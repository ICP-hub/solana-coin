{
  "version": 3,
  "sources": ["../../@solana/spl-token/src/index.ts", "../../@solana/spl-token/src/actions/index.ts", "../../@solana/spl-token/src/actions/amountToUiAmount.ts", "../../@solana/spl-token/src/constants.ts", "../../@solana/spl-token/src/instructions/amountToUiAmount.ts", "../../@solana/buffer-layout-utils/src/index.ts", "../../@solana/buffer-layout-utils/src/base.ts", "../../@solana/buffer-layout-utils/src/bigint.ts", "../../@solana/buffer-layout-utils/src/decimal.ts", "../../@solana/buffer-layout-utils/src/native.ts", "../../@solana/buffer-layout-utils/src/web3.ts", "../../@solana/spl-token/src/errors.ts", "../../@solana/spl-token/src/instructions/types.ts", "../../@solana/spl-token/src/actions/approve.ts", "../../@solana/spl-token/src/instructions/approve.ts", "../../@solana/spl-token/src/instructions/internal.ts", "../../@solana/spl-token/src/actions/internal.ts", "../../@solana/spl-token/src/actions/approveChecked.ts", "../../@solana/spl-token/src/instructions/approveChecked.ts", "../../@solana/spl-token/src/actions/burn.ts", "../../@solana/spl-token/src/instructions/burn.ts", "../../@solana/spl-token/src/actions/burnChecked.ts", "../../@solana/spl-token/src/instructions/burnChecked.ts", "../../@solana/spl-token/src/actions/closeAccount.ts", "../../@solana/spl-token/src/instructions/closeAccount.ts", "../../@solana/spl-token/src/actions/createAccount.ts", "../../@solana/spl-token/src/extensions/extensionType.ts", "../../@solana/spl-token/src/state/account.ts", "../../@solana/spl-token/src/extensions/accountType.ts", "../../@solana/spl-token/src/state/multisig.ts", "../../@solana/spl-token/src/state/mint.ts", "../../@solana/spl-token/src/extensions/cpiGuard/index.ts", "../../@solana/spl-token/src/extensions/cpiGuard/actions.ts", "../../@solana/spl-token/src/extensions/cpiGuard/instructions.ts", "../../@solana/spl-token/src/extensions/cpiGuard/state.ts", "../../@solana/spl-token/src/extensions/defaultAccountState/index.ts", "../../@solana/spl-token/src/extensions/defaultAccountState/actions.ts", "../../@solana/spl-token/src/extensions/defaultAccountState/instructions.ts", "../../@solana/spl-token/src/extensions/defaultAccountState/state.ts", "../../@solana/spl-token/src/extensions/tokenGroup/index.ts", "../../@solana/spl-token/src/extensions/tokenGroup/actions.ts", "../../@solana/spl-token-group/src/index.ts", "../../@solana/spl-token-group/src/errors.ts", "../../@solana/spl-token-group/src/instruction.ts", "../../@solana/build-scripts/env-shim.ts", "../../@solana/errors/src/codes.ts", "../../@solana/errors/src/messages.ts", "../../@solana/errors/src/message-formatter.ts", "../../@solana/errors/src/error.ts", "../../@solana/errors/src/stack-trace.ts", "../../@solana/errors/src/rpc-enum-errors.ts", "../../@solana/errors/src/instruction-error.ts", "../../@solana/errors/src/transaction-error.ts", "../../@solana/errors/src/json-rpc-error.ts", "../../@solana/codecs-core/src/assertions.ts", "../../@solana/codecs-core/src/bytes.ts", "../../@solana/codecs-core/src/codec.ts", "../../@solana/codecs-core/src/combine-codec.ts", "../../@solana/codecs-core/src/fix-codec.ts", "../../@solana/codecs-core/src/map-codec.ts", "../../@solana/codecs-core/src/offset-codec.ts", "../../@solana/codecs-core/src/resize-codec.ts", "../../@solana/codecs-core/src/pad-codec.ts", "../../@solana/codecs-core/src/reverse-codec.ts", "../../@solana/codecs-numbers/src/assertions.ts", "../../@solana/codecs-numbers/src/common.ts", "../../@solana/codecs-numbers/src/f32.ts", "../../@solana/codecs-numbers/src/utils.ts", "../../@solana/codecs-numbers/src/f64.ts", "../../@solana/codecs-numbers/src/i128.ts", "../../@solana/codecs-numbers/src/i16.ts", "../../@solana/codecs-numbers/src/i32.ts", "../../@solana/codecs-numbers/src/i64.ts", "../../@solana/codecs-numbers/src/i8.ts", "../../@solana/codecs-numbers/src/short-u16.ts", "../../@solana/codecs-numbers/src/u128.ts", "../../@solana/codecs-numbers/src/u16.ts", "../../@solana/codecs-numbers/src/u32.ts", "../../@solana/codecs-numbers/src/u64.ts", "../../@solana/codecs-numbers/src/u8.ts", "../../@solana/codecs-data-structures/src/array.ts", "../../@solana/codecs-data-structures/src/assertions.ts", "../../@solana/codecs-data-structures/src/utils.ts", "../../@solana/codecs-data-structures/src/bit-array.ts", "../../@solana/codecs-data-structures/src/boolean.ts", "../../@solana/codecs-data-structures/src/bytes.ts", "../../@solana/codecs-data-structures/src/data-enum.ts", "../../@solana/codecs-data-structures/src/map.ts", "../../@solana/codecs-data-structures/src/tuple.ts", "../../@solana/codecs-data-structures/src/nullable.ts", "../../@solana/codecs-data-structures/src/scalar-enum.ts", "../../@solana/codecs-data-structures/src/set.ts", "../../@solana/codecs-data-structures/src/struct.ts", "../../@solana/codecs-data-structures/src/unit.ts", "../../@solana/codecs-strings/src/assertions.ts", "../../@solana/codecs-strings/src/baseX.ts", "../../@solana/codecs-strings/src/base10.ts", "../../@solana/codecs-strings/src/base16.ts", "../../@solana/codecs-strings/src/base58.ts", "../../@solana/codecs-strings/src/base64.ts", "../../@solana/codecs-strings/src/baseX-reslice.ts", "../../@solana/codecs-strings/src/null-characters.ts", "../../@solana/codecs-strings/src/string.ts", "../../@solana/codecs-strings/src/utf8.ts", "../../@solana/text-encoding-impl/src/index.browser.ts", "../../@solana/options/src/option.ts", "../../@solana/options/src/option-codec.ts", "../../@solana/options/src/unwrap-option.ts", "../../@solana/options/src/unwrap-option-recursively.ts", "../../@solana/spl-type-length-value/src/index.ts", "../../@solana/spl-type-length-value/src/splDiscriminate.ts", "../../@solana/spl-type-length-value/src/tlvState.ts", "../../@solana/spl-type-length-value/src/errors.ts", "../../@solana/spl-token-group/src/state/index.ts", "../../@solana/spl-token-group/src/state/tokenGroup.ts", "../../@solana/spl-token-group/src/state/tokenGroupMember.ts", "../../@solana/spl-token/src/extensions/tokenGroup/state.ts", "../../@solana/spl-token/src/extensions/groupMemberPointer/state.ts", "../../@solana/spl-token/src/extensions/groupPointer/state.ts", "../../@solana/spl-token/src/extensions/immutableOwner.ts", "../../@solana/spl-token/src/extensions/interestBearingMint/state.ts", "../../@solana/spl-token/src/extensions/memoTransfer/index.ts", "../../@solana/spl-token/src/extensions/memoTransfer/actions.ts", "../../@solana/spl-token/src/extensions/memoTransfer/instructions.ts", "../../@solana/spl-token/src/extensions/memoTransfer/state.ts", "../../@solana/spl-token/src/extensions/metadataPointer/state.ts", "../../@solana/spl-token/src/extensions/mintCloseAuthority.ts", "../../@solana/spl-token/src/extensions/nonTransferable.ts", "../../@solana/spl-token/src/extensions/permanentDelegate.ts", "../../@solana/spl-token/src/extensions/transferFee/index.ts", "../../@solana/spl-token/src/extensions/transferFee/actions.ts", "../../@solana/spl-token/src/extensions/transferFee/instructions.ts", "../../@solana/spl-token/src/serialization.ts", "../../@solana/spl-token/src/extensions/transferFee/state.ts", "../../@solana/spl-token/src/extensions/transferHook/index.ts", "../../@solana/spl-token/src/extensions/transferHook/actions.ts", "../../@solana/spl-token/src/extensions/transferHook/instructions.ts", "../../@solana/spl-token/src/instructions/transferChecked.ts", "../../@solana/spl-token/src/extensions/transferHook/state.ts", "../../@solana/spl-token/src/extensions/transferHook/seeds.ts", "../../@solana/spl-token/src/instructions/initializeAccount.ts", "../../@solana/spl-token/src/actions/createAssociatedTokenAccount.ts", "../../@solana/spl-token/src/instructions/associatedTokenAccount.ts", "../../@solana/spl-token/src/actions/createAssociatedTokenAccountIdempotent.ts", "../../@solana/spl-token/src/actions/createMint.ts", "../../@solana/spl-token/src/instructions/initializeMint2.ts", "../../@solana/spl-token/src/actions/createMultisig.ts", "../../@solana/spl-token/src/instructions/initializeMultisig.ts", "../../@solana/spl-token/src/actions/createNativeMint.ts", "../../@solana/spl-token/src/instructions/createNativeMint.ts", "../../@solana/spl-token/src/actions/createWrappedNativeAccount.ts", "../../@solana/spl-token/src/instructions/syncNative.ts", "../../@solana/spl-token/src/actions/freezeAccount.ts", "../../@solana/spl-token/src/instructions/freezeAccount.ts", "../../@solana/spl-token/src/actions/getOrCreateAssociatedTokenAccount.ts", "../../@solana/spl-token/src/actions/mintTo.ts", "../../@solana/spl-token/src/instructions/mintTo.ts", "../../@solana/spl-token/src/actions/mintToChecked.ts", "../../@solana/spl-token/src/instructions/mintToChecked.ts", "../../@solana/spl-token/src/actions/recoverNested.ts", "../../@solana/spl-token/src/actions/revoke.ts", "../../@solana/spl-token/src/instructions/revoke.ts", "../../@solana/spl-token/src/actions/setAuthority.ts", "../../@solana/spl-token/src/instructions/setAuthority.ts", "../../@solana/spl-token/src/actions/syncNative.ts", "../../@solana/spl-token/src/actions/thawAccount.ts", "../../@solana/spl-token/src/instructions/thawAccount.ts", "../../@solana/spl-token/src/actions/transfer.ts", "../../@solana/spl-token/src/instructions/transfer.ts", "../../@solana/spl-token/src/actions/transferChecked.ts", "../../@solana/spl-token/src/actions/uiAmountToAmount.ts", "../../@solana/spl-token/src/instructions/uiAmountToAmount.ts", "../../@solana/spl-token/src/extensions/index.ts", "../../@solana/spl-token/src/extensions/groupMemberPointer/index.ts", "../../@solana/spl-token/src/extensions/groupMemberPointer/instructions.ts", "../../@solana/spl-token/src/extensions/groupPointer/index.ts", "../../@solana/spl-token/src/extensions/groupPointer/instructions.ts", "../../@solana/spl-token/src/extensions/interestBearingMint/index.ts", "../../@solana/spl-token/src/extensions/interestBearingMint/actions.ts", "../../@solana/spl-token/src/instructions/initializeMint.ts", "../../@solana/spl-token/src/extensions/interestBearingMint/instructions.ts", "../../@solana/spl-token/src/extensions/metadataPointer/index.ts", "../../@solana/spl-token/src/extensions/metadataPointer/instructions.ts", "../../@solana/spl-token/src/extensions/tokenMetadata/index.ts", "../../@solana/spl-token/src/extensions/tokenMetadata/actions.ts", "../../@solana/spl-token-metadata/src/index.ts", "../../@solana/spl-token-metadata/src/errors.ts", "../../@solana/spl-token-metadata/src/field.ts", "../../@solana/spl-token-metadata/src/instruction.ts", "../../@solana/spl-token-metadata/src/state.ts", "../../@solana/spl-token/src/extensions/tokenMetadata/state.ts", "../../@solana/spl-token/src/state/index.ts", "../../@solana/spl-token/src/instructions/index.ts", "../../@solana/spl-token/src/instructions/decode.ts", "../../@solana/spl-token/src/instructions/initializeAccount2.ts", "../../@solana/spl-token/src/instructions/initializeAccount3.ts", "../../@solana/spl-token/lib/esm/instructions/initializeMultisig2.js", "../../@solana/spl-token/src/instructions/initializeImmutableOwner.ts", "../../@solana/spl-token/src/instructions/initializeMintCloseAuthority.ts", "../../@solana/spl-token/src/instructions/reallocate.ts", "../../@solana/spl-token/src/instructions/initializeNonTransferableMint.ts", "../../@solana/spl-token/src/instructions/initializePermanentDelegate.ts"],
  "sourcesContent": ["export * from './actions/index.js';\nexport * from './constants.js';\nexport * from './errors.js';\nexport * from './extensions/index.js';\nexport * from './instructions/index.js';\nexport * from './state/index.js';\n", "export * from './amountToUiAmount.js';\nexport * from './approve.js';\nexport * from './approveChecked.js';\nexport * from './burn.js';\nexport * from './burnChecked.js';\nexport * from './closeAccount.js';\nexport * from './createAccount.js';\nexport * from './createAssociatedTokenAccount.js';\nexport * from './createAssociatedTokenAccountIdempotent.js';\nexport * from './createMint.js';\nexport * from './createMultisig.js';\nexport * from './createNativeMint.js';\nexport * from './createWrappedNativeAccount.js';\nexport * from './freezeAccount.js';\nexport * from './getOrCreateAssociatedTokenAccount.js';\nexport * from './mintTo.js';\nexport * from './mintToChecked.js';\nexport * from './recoverNested.js';\nexport * from './revoke.js';\nexport * from './setAuthority.js';\nexport * from './syncNative.js';\nexport * from './thawAccount.js';\nexport * from './transfer.js';\nexport * from './transferChecked.js';\nexport * from './uiAmountToAmount.js';\n", "import type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAmountToUiAmountInstruction } from '../instructions/amountToUiAmount.js';\n\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Amount of tokens to be converted to Ui Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function amountToUiAmount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | bigint,\n    programId = TOKEN_PROGRAM_ID\n): Promise<string | TransactionError | null> {\n    const transaction = new Transaction().add(createAmountToUiAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData?.data) {\n        return Buffer.from(returnData.data[0], returnData.data[1]).toString('utf-8');\n    }\n    return err;\n}\n", "import { PublicKey } from '@solana/web3.js';\n\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId: PublicKey): boolean {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface AmountToUiAmountInstructionData {\n    instruction: TokenInstruction.AmountToUiAmount;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const amountToUiAmountInstructionData = struct<AmountToUiAmountInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n]);\n\n/**\n * Construct a AmountToUiAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       Amount of tokens to be converted to UiAmount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAmountToUiAmountInstruction(\n    mint: PublicKey,\n    amount: number | bigint,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n\n    const data = Buffer.alloc(amountToUiAmountInstructionData.span);\n    amountToUiAmountInstructionData.encode(\n        {\n            instruction: TokenInstruction.AmountToUiAmount,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid AmountToUiAmount instruction */\nexport interface DecodedAmountToUiAmountInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.AmountToUiAmount;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a AmountToUiAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeAmountToUiAmountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedAmountToUiAmountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== amountToUiAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeAmountToUiAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.AmountToUiAmount) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated AmountToUiAmount instruction */\nexport interface DecodedAmountToUiAmountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a AmountToUiAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeAmountToUiAmountInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedAmountToUiAmountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: amountToUiAmountInstructionData.decode(data),\n    };\n}\n", "export * from './base';\nexport * from './bigint';\nexport * from './decimal';\nexport * from './native';\nexport * from './web3';\n", "import { Layout } from '@solana/buffer-layout';\n\nexport interface EncodeDecode<T> {\n    decode(buffer: Buffer, offset?: number): T;\n    encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nexport const encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n", "import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n", "import { Layout } from '@solana/buffer-layout';\nimport BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base';\nimport { u128 } from './bigint';\n\nexport const WAD = new BigNumber('1e+18');\n\nexport const decimal = (property?: string): Layout<BigNumber> => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const decimalLayout = layout as Layout<unknown> as Layout<BigNumber>;\n\n    decimalLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n\n    decimalLayout.encode = (decimal: BigNumber, buffer: Buffer, offset: number) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n\n    return decimalLayout;\n};\n", "import { Layout, u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base';\n\nexport const bool = (property?: string): Layout<boolean> => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const boolLayout = layout as Layout<unknown> as Layout<boolean>;\n\n    boolLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n\n    boolLayout.encode = (bool: boolean, buffer: Buffer, offset: number) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n\n    return boolLayout;\n};\n", "import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n", "/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    name = 'TokenInvalidAccountError';\n}\n\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    name = 'TokenInvalidAccountDataError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    name = 'TokenUnsupportedInstructionError';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    name = 'TokenTransferHookAccountNotFound';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    name = 'TokenTransferHookInvalidSeed';\n}\n\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    name = 'TokenTransferHookAccountDataNotFound';\n}\n", "/** Instructions defined by the program */\nexport enum TokenInstruction {\n    InitializeMint = 0,\n    InitializeAccount = 1,\n    InitializeMultisig = 2,\n    Transfer = 3,\n    Approve = 4,\n    Revoke = 5,\n    SetAuthority = 6,\n    MintTo = 7,\n    Burn = 8,\n    CloseAccount = 9,\n    FreezeAccount = 10,\n    ThawAccount = 11,\n    TransferChecked = 12,\n    ApproveChecked = 13,\n    MintToChecked = 14,\n    BurnChecked = 15,\n    InitializeAccount2 = 16,\n    SyncNative = 17,\n    InitializeAccount3 = 18,\n    InitializeMultisig2 = 19,\n    InitializeMint2 = 20,\n    GetAccountDataSize = 21,\n    InitializeImmutableOwner = 22,\n    AmountToUiAmount = 23,\n    UiAmountToAmount = 24,\n    InitializeMintCloseAuthority = 25,\n    TransferFeeExtension = 26,\n    ConfidentialTransferExtension = 27,\n    DefaultAccountStateExtension = 28,\n    Reallocate = 29,\n    MemoTransferExtension = 30,\n    CreateNativeMint = 31,\n    InitializeNonTransferableMint = 32,\n    InterestBearingMintExtension = 33,\n    CpiGuardExtension = 34,\n    InitializePermanentDelegate = 35,\n    TransferHookExtension = 36,\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    MetadataPointerExtension = 39,\n    GroupPointerExtension = 40,\n    GroupMemberPointerExtension = 41,\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createApproveInstruction } from '../instructions/approve.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param delegate       Account authorized to transfer tokens from the account\n * @param owner          Owner of the account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approve(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createApproveInstruction(account, delegate, ownerPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface ApproveInstructionData {\n    instruction: TokenInstruction.Approve;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const approveInstructionData = struct<ApproveInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode(\n        {\n            instruction: TokenInstruction.Approve,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Approve instruction */\nexport interface DecodedApproveInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        delegate: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Approve;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedApproveInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, delegate, owner, multiSigners },\n        data,\n    } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve) throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Approve instruction */\nexport interface DecodedApproveInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        delegate: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedApproveInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n", "import type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\n\n/** @internal */\nexport function addSigners(\n    keys: AccountMeta[],\n    ownerOrAuthority: PublicKey,\n    multiSigners: (Signer | PublicKey)[]\n): AccountMeta[] {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    } else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n", "import type { Signer } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\n\n/** @internal */\nexport function getSigners(signerOrMultisig: Signer | PublicKey, multiSigners: Signer[]): [PublicKey, Signer[]] {\n    return signerOrMultisig instanceof PublicKey\n        ? [signerOrMultisig, multiSigners]\n        : [signerOrMultisig.publicKey, [signerOrMultisig]];\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createApproveCheckedInstruction } from '../instructions/approveChecked.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\n * decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Address of the mint\n * @param account        Address of the account\n * @param delegate       Account authorized to perform a transfer tokens from the source account\n * @param owner          Owner of the source account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param decimals       Number of decimals in approve amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approveChecked(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createApproveCheckedInstruction(\n            account,\n            mint,\n            delegate,\n            ownerPublicKey,\n            amount,\n            decimals,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface ApproveCheckedInstructionData {\n    instruction: TokenInstruction.ApproveChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const approveCheckedInstructionData = struct<ApproveCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveCheckedInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(approveCheckedInstructionData.span);\n    approveCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.ApproveChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid ApproveChecked instruction */\nexport interface DecodedApproveCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        delegate: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.ApproveChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedApproveCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, delegate, owner, multiSigners },\n        data,\n    } = decodeApproveCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ApproveChecked) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated ApproveChecked instruction */\nexport interface DecodedApproveCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        delegate: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, delegate, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedApproveCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveCheckedInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createBurnInstruction } from '../instructions/burn.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Burn tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to burn tokens from\n * @param mint           Mint for the account\n * @param owner          Account owner\n * @param amount         Amount to burn\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function burn(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createBurnInstruction(account, mint, ownerPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface BurnInstructionData {\n    instruction: TokenInstruction.Burn;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const burnInstructionData = struct<BurnInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(burnInstructionData.span);\n    burnInstructionData.encode(\n        {\n            instruction: TokenInstruction.Burn,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Burn instruction */\nexport interface DecodedBurnInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Burn;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedBurnInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, multiSigners },\n        data,\n    } = decodeBurnInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Burn instruction */\nexport interface DecodedBurnInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedBurnInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createBurnCheckedInstruction } from '../instructions/burnChecked.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Burn tokens from an account, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to burn tokens from\n * @param mint           Mint for the account\n * @param owner          Account owner\n * @param amount         Amount to burn\n * @param decimals       Number of decimals in amount to burn\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function burnChecked(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createBurnCheckedInstruction(account, mint, ownerPublicKey, amount, decimals, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface BurnCheckedInstructionData {\n    instruction: TokenInstruction.BurnChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const burnCheckedInstructionData = struct<BurnCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnCheckedInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(burnCheckedInstructionData.span);\n    burnCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.BurnChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid BurnChecked instruction */\nexport interface DecodedBurnCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.BurnChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedBurnCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, multiSigners },\n        data,\n    } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.BurnChecked) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated BurnChecked instruction */\nexport interface DecodedBurnCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedBurnCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnCheckedInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createCloseAccountInstruction } from '../instructions/closeAccount.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Close a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to close\n * @param destination    Account to receive the remaining balance of the closed account\n * @param authority      Authority which is allowed to close the account\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function closeAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createCloseAccountInstruction(account, destination, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface CloseAccountInstructionData {\n    instruction: TokenInstruction.CloseAccount;\n}\n\n/** TODO: docs */\nexport const closeAccountInstructionData = struct<CloseAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(\n    account: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(closeAccountInstructionData.span);\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid CloseAccount instruction */\nexport interface DecodedCloseAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.CloseAccount;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedCloseAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, destination, authority, multiSigners },\n        data,\n    } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated CloseAccount instruction */\nexport interface DecodedCloseAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked({\n    programId,\n    keys: [account, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedCloseAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: closeAccountInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const mintState = await getMint(connection, mint, confirmOptions?.commitment, programId);\n    const space = getAccountLenForMint(mintState);\n    const lamports = await connection.getMinimumBalanceForRentExemption(space);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space,\n            lamports,\n            programId,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n", "import type { AccountInfo, PublicKey } from '@solana/web3.js';\n\nimport { ACCOUNT_SIZE } from '../state/account.js';\nimport type { Mint } from '../state/mint.js';\nimport { MINT_SIZE, unpackMint } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { CPI_GUARD_SIZE } from './cpiGuard/index.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { TOKEN_GROUP_SIZE, TOKEN_GROUP_MEMBER_SIZE } from './tokenGroup/index.js';\nimport { GROUP_MEMBER_POINTER_SIZE } from './groupMemberPointer/state.js';\nimport { GROUP_POINTER_SIZE } from './groupPointer/state.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { METADATA_POINTER_SIZE } from './metadataPointer/state.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE, NON_TRANSFERABLE_ACCOUNT_SIZE } from './nonTransferable.js';\nimport { PERMANENT_DELEGATE_SIZE } from './permanentDelegate.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\nimport { TRANSFER_HOOK_ACCOUNT_SIZE, TRANSFER_HOOK_SIZE } from './transferHook/index.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../constants.js';\n\n// Sequence from https://github.com/solana-labs/solana-program-library/blob/master/token/program-2022/src/extension/mod.rs#L903\nexport enum ExtensionType {\n    Uninitialized,\n    TransferFeeConfig,\n    TransferFeeAmount,\n    MintCloseAuthority,\n    ConfidentialTransferMint,\n    ConfidentialTransferAccount,\n    DefaultAccountState,\n    ImmutableOwner,\n    MemoTransfer,\n    NonTransferable,\n    InterestBearingConfig,\n    CpiGuard,\n    PermanentDelegate,\n    NonTransferableAccount,\n    TransferHook,\n    TransferHookAccount,\n    // ConfidentialTransferFee, // Not implemented yet\n    // ConfidentialTransferFeeAmount, // Not implemented yet\n    MetadataPointer = 18, // Remove number once above extensions implemented\n    TokenMetadata = 19, // Remove number once above extensions implemented\n    GroupPointer = 20,\n    TokenGroup = 21,\n    GroupMemberPointer = 22,\n    TokenGroupMember = 23,\n}\n\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2;\n\nfunction addTypeAndLengthToLen(len: number): number {\n    return len + TYPE_SIZE + LENGTH_SIZE;\n}\n\nfunction isVariableLengthExtension(e: ExtensionType): boolean {\n    switch (e) {\n        case ExtensionType.TokenMetadata:\n            return true;\n        default:\n            return false;\n    }\n}\n\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nexport function getTypeLen(e: ExtensionType): number {\n    switch (e) {\n        case ExtensionType.Uninitialized:\n            return 0;\n        case ExtensionType.TransferFeeConfig:\n            return TRANSFER_FEE_CONFIG_SIZE;\n        case ExtensionType.TransferFeeAmount:\n            return TRANSFER_FEE_AMOUNT_SIZE;\n        case ExtensionType.MintCloseAuthority:\n            return MINT_CLOSE_AUTHORITY_SIZE;\n        case ExtensionType.ConfidentialTransferMint:\n            return 65;\n        case ExtensionType.ConfidentialTransferAccount:\n            return 295;\n        case ExtensionType.CpiGuard:\n            return CPI_GUARD_SIZE;\n        case ExtensionType.DefaultAccountState:\n            return DEFAULT_ACCOUNT_STATE_SIZE;\n        case ExtensionType.ImmutableOwner:\n            return IMMUTABLE_OWNER_SIZE;\n        case ExtensionType.MemoTransfer:\n            return MEMO_TRANSFER_SIZE;\n        case ExtensionType.MetadataPointer:\n            return METADATA_POINTER_SIZE;\n        case ExtensionType.NonTransferable:\n            return NON_TRANSFERABLE_SIZE;\n        case ExtensionType.InterestBearingConfig:\n            return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n        case ExtensionType.PermanentDelegate:\n            return PERMANENT_DELEGATE_SIZE;\n        case ExtensionType.NonTransferableAccount:\n            return NON_TRANSFERABLE_ACCOUNT_SIZE;\n        case ExtensionType.TransferHook:\n            return TRANSFER_HOOK_SIZE;\n        case ExtensionType.TransferHookAccount:\n            return TRANSFER_HOOK_ACCOUNT_SIZE;\n        case ExtensionType.GroupPointer:\n            return GROUP_POINTER_SIZE;\n        case ExtensionType.GroupMemberPointer:\n            return GROUP_MEMBER_POINTER_SIZE;\n        case ExtensionType.TokenGroup:\n            return TOKEN_GROUP_SIZE;\n        case ExtensionType.TokenGroupMember:\n            return TOKEN_GROUP_MEMBER_SIZE;\n        case ExtensionType.TokenMetadata:\n            throw Error(`Cannot get type length for variable extension type: ${e}`);\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\n\nexport function isMintExtension(e: ExtensionType): boolean {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.ConfidentialTransferMint:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.TransferHook:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n        case ExtensionType.GroupPointer:\n        case ExtensionType.GroupMemberPointer:\n        case ExtensionType.TokenGroup:\n        case ExtensionType.TokenGroupMember:\n            return true;\n        case ExtensionType.Uninitialized:\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n            return false;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\n\nexport function isAccountExtension(e: ExtensionType): boolean {\n    switch (e) {\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n            return true;\n        case ExtensionType.Uninitialized:\n        case ExtensionType.TransferFeeConfig:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.ConfidentialTransferMint:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.TransferHook:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n        case ExtensionType.GroupPointer:\n        case ExtensionType.GroupMemberPointer:\n        case ExtensionType.TokenGroup:\n        case ExtensionType.TokenGroupMember:\n            return false;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\n\nexport function getAccountTypeOfMintType(e: ExtensionType): ExtensionType {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n            return ExtensionType.TransferFeeAmount;\n        case ExtensionType.ConfidentialTransferMint:\n            return ExtensionType.ConfidentialTransferAccount;\n        case ExtensionType.NonTransferable:\n            return ExtensionType.NonTransferableAccount;\n        case ExtensionType.TransferHook:\n            return ExtensionType.TransferHookAccount;\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.CpiGuard:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.MetadataPointer:\n        case ExtensionType.TokenMetadata:\n        case ExtensionType.Uninitialized:\n        case ExtensionType.InterestBearingConfig:\n        case ExtensionType.PermanentDelegate:\n        case ExtensionType.NonTransferableAccount:\n        case ExtensionType.TransferHookAccount:\n        case ExtensionType.GroupPointer:\n        case ExtensionType.GroupMemberPointer:\n        case ExtensionType.TokenGroup:\n        case ExtensionType.TokenGroupMember:\n            return ExtensionType.Uninitialized;\n    }\n}\n\nfunction getLen(\n    extensionTypes: ExtensionType[],\n    baseSize: number,\n    variableLengthExtensions: { [E in ExtensionType]?: number } = {}\n): number {\n    if (extensionTypes.length === 0 && Object.keys(variableLengthExtensions).length === 0) {\n        return baseSize;\n    } else {\n        const accountLength =\n            ACCOUNT_SIZE +\n            ACCOUNT_TYPE_SIZE +\n            extensionTypes\n                .filter((element, i) => i === extensionTypes.indexOf(element))\n                .map((element) => addTypeAndLengthToLen(getTypeLen(element)))\n                .reduce((a, b) => a + b, 0) +\n            Object.entries(variableLengthExtensions)\n                .map(([extension, len]) => {\n                    if (!isVariableLengthExtension(Number(extension))) {\n                        throw Error(`Extension ${extension} is not variable length`);\n                    }\n                    return addTypeAndLengthToLen(len);\n                })\n                .reduce((a, b) => a + b, 0);\n        if (accountLength === MULTISIG_SIZE) {\n            return accountLength + TYPE_SIZE;\n        } else {\n            return accountLength;\n        }\n    }\n}\n\nexport function getMintLen(\n    extensionTypes: ExtensionType[],\n    variableLengthExtensions: { [E in ExtensionType]?: number } = {}\n): number {\n    return getLen(extensionTypes, MINT_SIZE, variableLengthExtensions);\n}\n\nexport function getAccountLen(extensionTypes: ExtensionType[]): number {\n    // There are currently no variable length extensions for accounts\n    return getLen(extensionTypes, ACCOUNT_SIZE);\n}\n\nexport function getExtensionData(extension: ExtensionType, tlvData: Buffer): Buffer | null {\n    let extensionTypeIndex = 0;\n    while (addTypeAndLengthToLen(extensionTypeIndex) <= tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        const typeIndex = addTypeAndLengthToLen(extensionTypeIndex);\n        if (entryType == extension) {\n            return tlvData.slice(typeIndex, typeIndex + entryLength);\n        }\n        extensionTypeIndex = typeIndex + entryLength;\n    }\n    return null;\n}\n\nexport function getExtensionTypes(tlvData: Buffer): ExtensionType[] {\n    const extensionTypes = [];\n    let extensionTypeIndex = 0;\n    while (extensionTypeIndex < tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        extensionTypes.push(entryType);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        extensionTypeIndex += addTypeAndLengthToLen(entryLength);\n    }\n    return extensionTypes;\n}\n\nexport function getAccountLenForMint(mint: Mint): number {\n    const extensionTypes = getExtensionTypes(mint.tlvData);\n    const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n    return getAccountLen(accountExtensions);\n}\n\nexport function getNewAccountLenForExtensionLen(\n    info: AccountInfo<Buffer>,\n    address: PublicKey,\n    extensionType: ExtensionType,\n    extensionLen: number,\n    programId = TOKEN_2022_PROGRAM_ID\n): number {\n    const mint = unpackMint(address, info, programId);\n    const extensionData = getExtensionData(extensionType, mint.tlvData);\n\n    const currentExtensionLen = extensionData ? addTypeAndLengthToLen(extensionData.length) : 0;\n    const newExtensionLen = addTypeAndLengthToLen(extensionLen);\n\n    return info.data.length + newExtensionLen - currentExtensionLen;\n}\n", "import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a token account */\nexport interface Account {\n    /** Address of the account */\n    address: PublicKey;\n    /** Mint associated with the account */\n    mint: PublicKey;\n    /** Owner of the account */\n    owner: PublicKey;\n    /** Number of tokens the account holds */\n    amount: bigint;\n    /** Authority that can transfer tokens from the account */\n    delegate: PublicKey | null;\n    /** Number of tokens the delegate is authorized to transfer */\n    delegatedAmount: bigint;\n    /** True if the account is initialized */\n    isInitialized: boolean;\n    /** True if the account is frozen */\n    isFrozen: boolean;\n    /** True if the account is a native token account */\n    isNative: boolean;\n    /**\n     * If the account is a native token account, it must be rent-exempt. The rent-exempt reserve is the amount that must\n     * remain in the balance until the account is closed.\n     */\n    rentExemptReserve: bigint | null;\n    /** Optional authority to close the account */\n    closeAuthority: PublicKey | null;\n    tlvData: Buffer;\n}\n\n/** Token account state as stored by the program */\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\n/** Token account as stored by the program */\nexport interface RawAccount {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: bigint;\n    delegateOption: 1 | 0;\n    delegate: PublicKey;\n    state: AccountState;\n    isNativeOption: 1 | 0;\n    isNative: bigint;\n    delegatedAmount: bigint;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct<RawAccount>([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(\n    connection: Connection,\n    addresses: PublicKey[],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account[]> {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Account {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account) throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n", "export enum AccountType {\n    Uninitialized,\n    Mint,\n    Account,\n}\nexport const ACCOUNT_TYPE_SIZE = 1;\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n\n/** Information about a multisig */\nexport interface Multisig {\n    /** Address of the multisig */\n    address: PublicKey;\n    /** Number of signers required */\n    m: number;\n    /** Number of possible signers, corresponds to the number of `signers` that are valid */\n    n: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Full set of signers, of which `n` are valid */\n    signer1: PublicKey;\n    signer2: PublicKey;\n    signer3: PublicKey;\n    signer4: PublicKey;\n    signer5: PublicKey;\n    signer6: PublicKey;\n    signer7: PublicKey;\n    signer8: PublicKey;\n    signer9: PublicKey;\n    signer10: PublicKey;\n    signer11: PublicKey;\n}\n\n/** Multisig as stored by the program */\nexport type RawMultisig = Omit<Multisig, 'address'>;\n\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct<RawMultisig>([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Multisig> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Multisig {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const multisig = MultisigLayout.decode(info.data);\n\n    return { address, ...multisig };\n}\n\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n", "import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n    TokenInvalidMintError,\n    TokenOwnerOffCurveError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a mint */\nexport interface Mint {\n    /** Address of the mint */\n    address: PublicKey;\n    /**\n     * Optional authority used to mint new tokens. The mint authority may only be provided during mint creation.\n     * If no mint authority is present then the mint has a fixed supply and no further tokens may be minted.\n     */\n    mintAuthority: PublicKey | null;\n    /** Total supply of tokens */\n    supply: bigint;\n    /** Number of base 10 digits to the right of the decimal place */\n    decimals: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Optional authority to freeze token accounts */\n    freezeAuthority: PublicKey | null;\n    /** Additional data for extension */\n    tlvData: Buffer;\n}\n\n/** Mint as stored by the program */\nexport interface RawMint {\n    mintAuthorityOption: 1 | 0;\n    mintAuthority: PublicKey;\n    supply: bigint;\n    decimals: number;\n    isInitialized: boolean;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct<RawMint>([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Mint> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address: PublicKey, info: AccountInfo<Buffer> | null, programId = TOKEN_PROGRAM_ID): Mint {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint) throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): PublicKey {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n", "export * from './actions.js';\nexport * from './instructions.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createDisableCpiGuardInstruction, createEnableCpiGuardInstruction } from './instructions.js';\n\n/**\n * Enable CPI Guard on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function enableCpiGuard(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createEnableCpiGuardInstruction(account, ownerPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Disable CPI Guard on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function disableCpiGuard(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createDisableCpiGuardInstruction(account, ownerPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum CpiGuardInstruction {\n    Enable = 0,\n    Disable = 1,\n}\n\n/** TODO: docs */\nexport interface CpiGuardInstructionData {\n    instruction: TokenInstruction.CpiGuardExtension;\n    cpiGuardInstruction: CpiGuardInstruction;\n}\n\n/** TODO: docs */\nexport const cpiGuardInstructionData = struct<CpiGuardInstructionData>([u8('instruction'), u8('cpiGuardInstruction')]);\n\n/**\n * Construct an EnableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableCpiGuardInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createCpiGuardInstruction(CpiGuardInstruction.Enable, account, authority, multiSigners, programId);\n}\n\n/**\n * Construct a DisableCpiGuard instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableCpiGuardInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createCpiGuardInstruction(CpiGuardInstruction.Disable, account, authority, multiSigners, programId);\n}\n\nfunction createCpiGuardInstruction(\n    cpiGuardInstruction: CpiGuardInstruction,\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[],\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(cpiGuardInstructionData.span);\n    cpiGuardInstructionData.encode(\n        {\n            instruction: TokenInstruction.CpiGuardExtension,\n            cpiGuardInstruction,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n", "import { struct } from '@solana/buffer-layout';\nimport { bool } from '@solana/buffer-layout-utils';\nimport type { Account } from '../../state/account.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** CpiGuard as stored by the program */\nexport interface CpiGuard {\n    /** Lock certain token operations from taking place within CPI for this account */\n    lockCpi: boolean;\n}\n\n/** Buffer layout for de/serializing a CPI Guard extension */\nexport const CpiGuardLayout = struct<CpiGuard>([bool('lockCpi')]);\n\nexport const CPI_GUARD_SIZE = CpiGuardLayout.span;\n\nexport function getCpiGuard(account: Account): CpiGuard | null {\n    const extensionData = getExtensionData(ExtensionType.CpiGuard, account.tlvData);\n    if (extensionData !== null) {\n        return CpiGuardLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "export * from './actions.js';\nexport * from './instructions.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport type { AccountState } from '../../state/account.js';\nimport {\n    createInitializeDefaultAccountStateInstruction,\n    createUpdateDefaultAccountStateInstruction,\n} from './instructions.js';\n\n/**\n * Initialize a default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to initialize with extension\n * @param state        Account state with which to initialize new accounts\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeDefaultAccountState(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    state: AccountState,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n\n/**\n * Update the default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to modify\n * @param state        New account state to set on created accounts\n * @param freezeAuthority          Freeze authority of the mint\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateDefaultAccountState(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    state: AccountState,\n    freezeAuthority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport type { AccountState } from '../../state/account.js';\n\nexport enum DefaultAccountStateInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\n/** TODO: docs */\nexport interface DefaultAccountStateInstructionData {\n    instruction: TokenInstruction.DefaultAccountStateExtension;\n    defaultAccountStateInstruction: DefaultAccountStateInstruction;\n    accountState: AccountState;\n}\n\n/** TODO: docs */\nexport const defaultAccountStateInstructionData = struct<DefaultAccountStateInstructionData>([\n    u8('instruction'),\n    u8('defaultAccountStateInstruction'),\n    u8('accountState'),\n]);\n\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeDefaultAccountStateInstruction(\n    mint: PublicKey,\n    accountState: AccountState,\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode(\n        {\n            instruction: TokenInstruction.DefaultAccountStateExtension,\n            defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n            accountState,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateDefaultAccountStateInstruction(\n    mint: PublicKey,\n    accountState: AccountState,\n    freezeAuthority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], freezeAuthority, multiSigners);\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode(\n        {\n            instruction: TokenInstruction.DefaultAccountStateExtension,\n            defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n            accountState,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountState } from '../../state/account.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** DefaultAccountState as stored by the program */\nexport interface DefaultAccountState {\n    /** Default AccountState in which new accounts are initialized */\n    state: AccountState;\n}\n\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const DefaultAccountStateLayout = struct<DefaultAccountState>([u8('state')]);\n\nexport const DEFAULT_ACCOUNT_STATE_SIZE = DefaultAccountStateLayout.span;\n\nexport function getDefaultAccountState(mint: Mint): DefaultAccountState | null {\n    const extensionData = getExtensionData(ExtensionType.DefaultAccountState, mint.tlvData);\n    if (extensionData !== null) {\n        return DefaultAccountStateLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "export * from './actions.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport {\n    createInitializeGroupInstruction,\n    createUpdateGroupMaxSizeInstruction,\n    createUpdateGroupAuthorityInstruction,\n    createInitializeMemberInstruction,\n    TOKEN_GROUP_SIZE,\n    TOKEN_GROUP_MEMBER_SIZE,\n} from '@solana/spl-token-group';\n\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { getSigners } from '../../actions/internal.js';\n\n/**\n * Initialize a new `Group`\n *\n * Assumes one has already initialized a mint for the group.\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fee\n * @param mint             Group mint\n * @param mintAuthority    Group mint authority\n * @param updateAuthority  Group update authority\n * @param maxSize          Maximum number of members in the group\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenGroupInitializeGroup(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    mintAuthority: PublicKey | Signer,\n    updateAuthority: PublicKey | null,\n    maxSize: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createInitializeGroupInstruction({\n            programId,\n            group: mint,\n            mint,\n            mintAuthority: mintAuthorityPublicKey,\n            updateAuthority,\n            maxSize,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Initialize a new `Group` with rent transfer.\n *\n * Assumes one has already initialized a mint for the group.\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fee\n * @param mint             Group mint\n * @param mintAuthority    Group mint authority\n * @param updateAuthority  Group update authority\n * @param maxSize          Maximum number of members in the group\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenGroupInitializeGroupWithRentTransfer(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    mintAuthority: PublicKey | Signer,\n    updateAuthority: PublicKey | null,\n    maxSize: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n\n    const lamports = await connection.getMinimumBalanceForRentExemption(TOKEN_GROUP_SIZE);\n\n    const transaction = new Transaction().add(\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: mint,\n            lamports,\n        }),\n        createInitializeGroupInstruction({\n            programId,\n            group: mint,\n            mint,\n            mintAuthority: mintAuthorityPublicKey,\n            updateAuthority,\n            maxSize,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Update the max size of a `Group`\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fee\n * @param mint             Group mint\n * @param updateAuthority  Group update authority\n * @param maxSize          Maximum number of members in the group\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenGroupUpdateGroupMaxSize(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey | Signer,\n    maxSize: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateGroupMaxSizeInstruction({\n            programId,\n            group: mint,\n            updateAuthority: updateAuthorityPublicKey,\n            maxSize,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Update the authority of a `Group`\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fee\n * @param mint             Group mint\n * @param updateAuthority  Group update authority\n * @param newAuthority     New authority for the token group, or unset\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenGroupUpdateGroupAuthority(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey | Signer,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateGroupAuthorityInstruction({\n            programId,\n            group: mint,\n            currentAuthority: updateAuthorityPublicKey,\n            newAuthority,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Initialize a new `Member` of a `Group`\n *\n * Assumes the `Group` has already been initialized,\n * as well as the mint for the member.\n *\n * @param connection             Connection to use\n * @param payer                  Payer of the transaction fee\n * @param mint                   Member mint\n * @param mintAuthority          Member mint authority\n * @param group                  Group mint\n * @param groupUpdateAuthority   Group update authority\n * @param multiSigners           Signing accounts if `authority` is a multisig\n * @param confirmOptions         Options for confirming the transaction\n * @param programId              SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenGroupMemberInitialize(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    mintAuthority: PublicKey | Signer,\n    group: PublicKey,\n    groupUpdateAuthority: PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createInitializeMemberInstruction({\n            programId,\n            member: mint,\n            memberMint: mint,\n            memberMintAuthority: mintAuthorityPublicKey,\n            group,\n            groupUpdateAuthority,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Initialize a new `Member` of a `Group` with rent transfer.\n *\n * Assumes the `Group` has already been initialized,\n * as well as the mint for the member.\n *\n * @param connection             Connection to use\n * @param payer                  Payer of the transaction fee\n * @param mint                   Member mint\n * @param mintAuthority          Member mint authority\n * @param group                  Group mint\n * @param groupUpdateAuthority   Group update authority\n * @param multiSigners           Signing accounts if `authority` is a multisig\n * @param confirmOptions         Options for confirming the transaction\n * @param programId              SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenGroupMemberInitializeWithRentTransfer(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    mintAuthority: PublicKey | Signer,\n    group: PublicKey,\n    groupUpdateAuthority: PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n\n    const lamports = await connection.getMinimumBalanceForRentExemption(TOKEN_GROUP_MEMBER_SIZE);\n\n    const transaction = new Transaction().add(\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: mint,\n            lamports,\n        }),\n        createInitializeMemberInstruction({\n            programId,\n            member: mint,\n            memberMint: mint,\n            memberMintAuthority: mintAuthorityPublicKey,\n            group,\n            groupUpdateAuthority,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "export * from './errors.js';\nexport * from './instruction.js';\nexport * from './state/index.js';\n", "export class TokenGroupError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if size is greater than proposed max size */\nexport class SizeExceedsNewMaxSizeError extends TokenGroupError {\n    name = 'SizeExceedsNewMaxSizeError';\n}\n\n/** Thrown if size is greater than max size */\nexport class SizeExceedsMaxSizeError extends TokenGroupError {\n    name = 'SizeExceedsMaxSizeError';\n}\n\n/** Thrown if group is immutable */\nexport class ImmutableGroupError extends TokenGroupError {\n    name = 'ImmutableGroupError';\n}\n\n/** Thrown if incorrect mint authority has signed the instruction */\nexport class IncorrectMintAuthorityError extends TokenGroupError {\n    name = 'IncorrectMintAuthorityError';\n}\n\n/** Thrown if incorrect update authority has signed the instruction */\nexport class IncorrectUpdateAuthorityError extends TokenGroupError {\n    name = 'IncorrectUpdateAuthorityError';\n}\n\n/** Thrown if member account is the same as the group account */\nexport class MemberAccountIsGroupAccountError extends TokenGroupError {\n    name = 'MemberAccountIsGroupAccountError';\n}\n", "import type { Encoder } from '@solana/codecs';\nimport type { PublicKey } from '@solana/web3.js';\nimport { getBytesEncoder, getStructEncoder, getTupleEncoder, getU32Encoder, mapEncoder } from '@solana/codecs';\nimport { splDiscriminate } from '@solana/spl-type-length-value';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\n\nfunction getInstructionEncoder<T extends object>(discriminator: Uint8Array, dataEncoder: Encoder<T>): Encoder<T> {\n    return mapEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), (data: T): [Uint8Array, T] => [\n        discriminator,\n        data,\n    ]);\n}\n\nfunction getPublicKeyEncoder(): Encoder<PublicKey> {\n    return mapEncoder(getBytesEncoder({ size: 32 }), (publicKey: PublicKey) => publicKey.toBytes());\n}\n\nexport interface InitializeGroupInstruction {\n    programId: PublicKey;\n    group: PublicKey;\n    mint: PublicKey;\n    mintAuthority: PublicKey;\n    updateAuthority: PublicKey | null;\n    maxSize: number;\n}\n\nexport function createInitializeGroupInstruction(args: InitializeGroupInstruction): TransactionInstruction {\n    const { programId, group, mint, mintAuthority, updateAuthority, maxSize } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: false, isWritable: false, pubkey: mint },\n            { isSigner: true, isWritable: false, pubkey: mintAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_group_interface:initialize_token_group'),\n                getStructEncoder([\n                    ['updateAuthority', getPublicKeyEncoder()],\n                    ['maxSize', getU32Encoder()],\n                ])\n            ).encode({ updateAuthority: updateAuthority ?? SystemProgram.programId, maxSize })\n        ),\n    });\n}\n\nexport interface UpdateGroupMaxSize {\n    programId: PublicKey;\n    group: PublicKey;\n    updateAuthority: PublicKey;\n    maxSize: number;\n}\n\nexport function createUpdateGroupMaxSizeInstruction(args: UpdateGroupMaxSize): TransactionInstruction {\n    const { programId, group, updateAuthority, maxSize } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_group_interface:update_group_max_size'),\n                getStructEncoder([['maxSize', getU32Encoder()]])\n            ).encode({ maxSize })\n        ),\n    });\n}\n\nexport interface UpdateGroupAuthority {\n    programId: PublicKey;\n    group: PublicKey;\n    currentAuthority: PublicKey;\n    newAuthority: PublicKey | null;\n}\n\nexport function createUpdateGroupAuthorityInstruction(args: UpdateGroupAuthority): TransactionInstruction {\n    const { programId, group, currentAuthority, newAuthority } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: true, isWritable: false, pubkey: currentAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_group_interface:update_authority'),\n                getStructEncoder([['newAuthority', getPublicKeyEncoder()]])\n            ).encode({ newAuthority: newAuthority ?? SystemProgram.programId })\n        ),\n    });\n}\n\nexport interface InitializeMember {\n    programId: PublicKey;\n    member: PublicKey;\n    memberMint: PublicKey;\n    memberMintAuthority: PublicKey;\n    group: PublicKey;\n    groupUpdateAuthority: PublicKey;\n}\n\nexport function createInitializeMemberInstruction(args: InitializeMember): TransactionInstruction {\n    const { programId, member, memberMint, memberMintAuthority, group, groupUpdateAuthority } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: member },\n            { isSigner: false, isWritable: false, pubkey: memberMint },\n            { isSigner: true, isWritable: false, pubkey: memberMintAuthority },\n            { isSigner: false, isWritable: true, pubkey: group },\n            { isSigner: true, isWritable: false, pubkey: groupUpdateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_group_interface:initialize_member'),\n                getStructEncoder([])\n            ).encode({})\n        ),\n    });\n}\n", "// Clever obfuscation to prevent the build system from inlining the value of `NODE_ENV`\nexport const __DEV__ = /* @__PURE__ */ (() => (process as any)['en' + 'v'].NODE_ENV === 'development')();\n", "/**\n * To add a new error, follow the instructions at\n * https://github.com/solana-labs/solana-web3.js/tree/master/packages/errors/#adding-a-new-error\n *\n * WARNING:\n *   - Don't remove error codes\n *   - Don't change or reorder error codes.\n *\n * Good naming conventions:\n *   - Prefixing common errors — e.g. under the same package — can be a good way to namespace them. E.g. All codec-related errors start with `SOLANA_ERROR__CODECS__`.\n *   - Use consistent names — e.g. choose `PDA` or `PROGRAM_DERIVED_ADDRESS` and stick with it. Ensure your names are consistent with existing error codes. The decision might have been made for you.\n *   - Recommended prefixes and suffixes:\n *     - `MALFORMED_`: Some input was not constructed properly. E.g. `MALFORMED_BASE58_ENCODED_ADDRESS`.\n *     - `INVALID_`: Some input is invalid (other than because it was MALFORMED). E.g. `INVALID_NUMBER_OF_BYTES`.\n *     - `EXPECTED_`: Some input was different than expected, no need to specify the \"GOT\" part unless necessary. E.g. `EXPECTED_DECODED_ACCOUNT`.\n *     - `_CANNOT_`: Some operation cannot be performed or some input cannot be used due to some condition. E.g. `CANNOT_DECODE_EMPTY_BYTE_ARRAY` or `PDA_CANNOT_END_WITH_PDA_MARKER`.\n *     - `_MUST_BE_`: Some condition must be true. E.g. `NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE`.\n *     - `_FAILED_TO_`: Tried to perform some operation and failed. E.g. `FAILED_TO_DECODE_ACCOUNT`.\n *     - `_NOT_FOUND`: Some operation lead to not finding something. E.g. `ACCOUNT_NOT_FOUND`.\n *     - `_OUT_OF_RANGE`: Some value is out of range. E.g. `ENUM_DISCRIMINATOR_OUT_OF_RANGE`.\n *     - `_EXCEEDED`: Some limit was exceeded. E.g. `PDA_MAX_SEED_LENGTH_EXCEEDED`.\n *     - `_MISMATCH`: Some elements do not match. E.g. `ENCODER_DECODER_FIXED_SIZE_MISMATCH`.\n *     - `_MISSING`: Some required input is missing. E.g. `TRANSACTION_FEE_PAYER_MISSING`.\n *     - `_UNIMPLEMENTED`: Some required component is not available in the environment. E.g. `SUBTLE_CRYPTO_VERIFY_FUNCTION_UNIMPLEMENTED`.\n */\nexport const SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED = 1 as const;\nexport const SOLANA_ERROR__INVALID_NONCE = 2 as const;\nexport const SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND = 3 as const;\nexport const SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE = 4 as const;\nexport const SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH = 5 as const;\nexport const SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE = 6 as const;\nexport const SOLANA_ERROR__MALFORMED_BIGINT_STRING = 7 as const;\nexport const SOLANA_ERROR__MALFORMED_NUMBER_STRING = 8 as const;\nexport const SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE = 9 as const;\n\n// JSON-RPC-related errors.\n// Reserve error codes in the range [-32768, -32000]\n// Keep in sync with https://github.com/anza-xyz/agave/blob/master/rpc-client-api/src/custom_error.rs\nexport const SOLANA_ERROR__JSON_RPC__PARSE_ERROR = -32700 as const;\nexport const SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR = -32603 as const;\nexport const SOLANA_ERROR__JSON_RPC__INVALID_PARAMS = -32602 as const;\nexport const SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND = -32601 as const;\nexport const SOLANA_ERROR__JSON_RPC__INVALID_REQUEST = -32600 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = -32016 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = -32015 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = -32014 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = -32013 as const;\nexport const SOLANA_ERROR__JSON_RPC__SCAN_ERROR = -32012 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = -32011 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = -32010 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = -32009 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT = -32008 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED = -32007 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = -32006 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY = -32005 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE = -32004 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = -32003 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = -32002 as const;\nexport const SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP = -32001 as const;\n\n// Addresses-related errors.\n// Reserve error codes in the range [2800000-2800999].\nexport const SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH = 2800000 as const;\nexport const SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE = 2800001 as const;\nexport const SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS = 2800002 as const;\nexport const SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY = 2800003 as const;\nexport const SOLANA_ERROR__ADDRESSES__MALFORMED_PDA = 2800004 as const;\nexport const SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE = 2800005 as const;\nexport const SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED = 2800006 as const;\nexport const SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED = 2800007 as const;\nexport const SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE = 2800008 as const;\nexport const SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED = 2800009 as const;\nexport const SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER = 2800010 as const;\n\n// Account-related errors.\n// Reserve error codes in the range [3230000-3230999].\nexport const SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND = 3230000 as const;\nexport const SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND = 32300001 as const;\nexport const SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT = 3230002 as const;\nexport const SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT = 3230003 as const;\nexport const SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED = 3230004 as const;\n\n// Subtle-Crypto-related errors.\n// Reserve error codes in the range [3610000-3610999].\nexport const SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT = 3610000 as const;\nexport const SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED = 3610001 as const;\nexport const SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED = 3610002 as const;\nexport const SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED = 3610003 as const;\nexport const SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED = 3610004 as const;\nexport const SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED = 3610005 as const;\nexport const SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED = 3610006 as const;\n\n// Key-related errors.\n// Reserve error codes in the range [3704000-3704999].\nexport const SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH = 3704000 as const;\nexport const SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH = 3704001 as const;\nexport const SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH = 3704002 as const;\nexport const SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE = 3704003 as const;\n\n// Instruction-related errors.\n// Reserve error codes in the range [4128000-4128999].\nexport const SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS = 4128000 as const;\nexport const SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA = 4128001 as const;\nexport const SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH = 4128002 as const;\n\n// Instruction errors.\n// Reserve error codes starting with [4615000-4615999] for the Rust enum `InstructionError`.\n// Error names here are dictated by the RPC (see ./instruction-error.ts).\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN = 4615000 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR = 4615001 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT = 4615002 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA = 4615003 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA = 4615004 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL = 4615005 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS = 4615006 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID = 4615007 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE = 4615008 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED = 4615009 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT = 4615010 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION = 4615011 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID = 4615012 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND = 4615013 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED = 4615014 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE = 4615015 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED = 4615016 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX = 4615017 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED = 4615018 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED = 4615019 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS = 4615020 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED = 4615021 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE = 4615022 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED = 4615023 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 4615024 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC = 4615025 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM = 4615026 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR = 4615027 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED = 4615028 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE = 4615029 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = 4615030 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID = 4615031 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH = 4615032 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT = 4615033 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED = 4615034 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4615035 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS = 4615036 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC = 4615037 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED = 4615038 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION = 4615039 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE = 4615040 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE = 4615041 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE = 4615042 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE = 4615043 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY = 4615044 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR = 4615045 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT = 4615046 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER = 4615047 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW = 4615048 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR = 4615049 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER = 4615050 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED = 4615051 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED = 4615052 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED = 4615053 as const;\nexport const SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS = 4615054 as const;\n\n// Signer-related errors.\n// Reserve error codes in the range [5508000-5508999].\nexport const SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS = 5508000 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER = 5508001 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER = 5508002 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER = 5508003 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER = 5508004 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER = 5508005 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER = 5508006 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER = 5508007 as const;\nexport const SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER = 5508008 as const;\nexport const SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS = 5508009 as const;\nexport const SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING = 5508010 as const;\n\n// Transaction-related errors.\n// Reserve error codes in the range [5663000-5663999].\nexport const SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES = 5663000 as const;\nexport const SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE = 5663001 as const;\nexport const SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME = 5663002 as const;\nexport const SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME = 5663003 as const;\nexport const SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE = 5663004 as const;\nexport const SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING = 5663005 as const;\nexport const SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE = 5663006 as const;\nexport const SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND = 5663007 as const;\nexport const SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING = 5663008 as const;\nexport const SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING = 5663009 as const;\nexport const SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING = 5663010 as const;\nexport const SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING = 5663011 as const;\nexport const SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING = 5663012 as const;\nexport const SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING = 5663013 as const;\nexport const SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE =\n    5663014 as const;\n\n// Transaction errors.\n// Reserve error codes starting with [7050000-7050999] for the Rust enum `TransactionError`.\n// Error names here are dictated by the RPC (see ./transaction-error.ts).\nexport const SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN = 7050000 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE = 7050001 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE = 7050002 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND = 7050003 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND = 7050004 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE = 7050005 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE = 7050006 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED = 7050007 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND = 7050008 as const;\n// `InstructionError` intentionally omitted.\nexport const SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP = 7050009 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE = 7050010 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX = 7050011 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE = 7050012 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION = 7050013 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE = 7050014 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE = 7050015 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING = 7050016 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT = 7050017 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION = 7050018 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT = 7050019 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT = 7050020 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT = 7050021 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS = 7050022 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND = 7050023 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER = 7050024 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA = 7050025 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX = 7050026 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT = 7050027 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT = 7050028 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT = 7050029 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION = 7050030 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = 7050031 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED = 7050032 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT = 7050033 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED = 7050034 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED = 7050035 as const;\nexport const SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION = 7050036 as const;\n\n// Codec-related errors.\n// Reserve error codes in the range [8078000-8078999].\nexport const SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY = 8078000 as const;\nexport const SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH = 8078001 as const;\nexport const SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH = 8078002 as const;\nexport const SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH = 8078003 as const;\nexport const SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH = 8078004 as const;\nexport const SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH = 8078005 as const;\nexport const SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH = 8078006 as const;\nexport const SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS = 8078007 as const;\nexport const SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE = 8078008 as const;\nexport const SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT = 8078009 as const;\nexport const SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT = 8078010 as const;\nexport const SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE = 8078011 as const;\nexport const SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE = 8078012 as const;\nexport const SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH = 8078013 as const;\nexport const SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE = 8078014 as const;\n\n// RPC-related errors.\n// Reserve error codes in the range [8100000-8100999].\nexport const SOLANA_ERROR__RPC__INTEGER_OVERFLOW = 8100000 as const;\nexport const SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN = 8100001 as const;\nexport const SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR = 8100002 as const;\n\n// RPC-Subscriptions-related errors.\n// Reserve error codes in the range [8190000-8190999].\nexport const SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST = 8190000 as const;\nexport const SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID = 8190001 as const;\nexport const SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED = 8190002 as const;\nexport const SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED = 8190003 as const;\nexport const SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT = 8190004 as const;\n\n// Invariant violation errors.\n// Reserve error codes in the range [9900000-9900999].\n// These errors should only be thrown when there is a bug with the\n// library itself and should, in theory, never reach the end user.\nexport const SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING = 9900000 as const;\nexport const SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE =\n    9900001 as const;\nexport const SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING = 9900002 as const;\nexport const SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE = 9900003 as const;\n\n/**\n * A union of every Solana error code\n *\n * You might be wondering why this is not a TypeScript enum or const enum.\n *\n * One of the goals of this library is to enable people to use some or none of it without having to\n * bundle all of it.\n *\n * If we made the set of error codes an enum then anyone who imported it (even if to only use a\n * single error code) would be forced to bundle every code and its label.\n *\n * Const enums appear to solve this problem by letting the compiler inline only the codes that are\n * actually used. Unfortunately exporting ambient (const) enums from a library like `@solana/errors`\n * is not safe, for a variety of reasons covered here: https://stackoverflow.com/a/28818850\n */\nexport type SolanaErrorCode =\n    | typeof SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND\n    | typeof SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED\n    | typeof SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT\n    | typeof SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT\n    | typeof SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND\n    | typeof SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED\n    | typeof SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS\n    | typeof SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH\n    | typeof SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY\n    | typeof SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE\n    | typeof SOLANA_ERROR__ADDRESSES__MALFORMED_PDA\n    | typeof SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED\n    | typeof SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED\n    | typeof SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER\n    | typeof SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED\n    | typeof SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY\n    | typeof SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH\n    | typeof SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH\n    | typeof SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH\n    | typeof SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH\n    | typeof SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH\n    | typeof SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH\n    | typeof SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH\n    | typeof SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT\n    | typeof SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS\n    | typeof SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT\n    | typeof SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE\n    | typeof SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS\n    | typeof SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA\n    | typeof SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID\n    | typeof SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR\n    | typeof SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH\n    | typeof SOLANA_ERROR__INVALID_NONCE\n    | typeof SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING\n    | typeof SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE\n    | typeof SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE\n    | typeof SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING\n    | typeof SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR\n    | typeof SOLANA_ERROR__JSON_RPC__INVALID_PARAMS\n    | typeof SOLANA_ERROR__JSON_RPC__INVALID_REQUEST\n    | typeof SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND\n    | typeof SOLANA_ERROR__JSON_RPC__PARSE_ERROR\n    | typeof SOLANA_ERROR__JSON_RPC__SCAN_ERROR\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE\n    | typeof SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION\n    | typeof SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH\n    | typeof SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH\n    | typeof SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH\n    | typeof SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__MALFORMED_BIGINT_STRING\n    | typeof SOLANA_ERROR__MALFORMED_NUMBER_STRING\n    | typeof SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND\n    | typeof SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND\n    | typeof SOLANA_ERROR__RPC__INTEGER_OVERFLOW\n    | typeof SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR\n    | typeof SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN\n    | typeof SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST\n    | typeof SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID\n    | typeof SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED\n    | typeof SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED\n    | typeof SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT\n    | typeof SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER\n    | typeof SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS\n    | typeof SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING\n    | typeof SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED\n    | typeof SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT\n    | typeof SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED\n    | typeof SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED\n    | typeof SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED\n    | typeof SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED\n    | typeof SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED\n    | typeof SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING\n    | typeof SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME\n    | typeof SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME\n    | typeof SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING\n    | typeof SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING\n    | typeof SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND\n    | typeof SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING\n    | typeof SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING\n    | typeof SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE\n    | typeof SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING\n    | typeof SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES\n    | typeof SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE\n    | typeof SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING\n    | typeof SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT\n    | typeof SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT;\n", "import {\n    SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND,\n    SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED,\n    SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT,\n    SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT,\n    SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND,\n    SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED,\n    SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS,\n    SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH,\n    SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY,\n    SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE,\n    SOLANA_ERROR__ADDRESSES__MALFORMED_PDA,\n    SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED,\n    SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED,\n    SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE,\n    SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER,\n    SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE,\n    SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED,\n    SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE,\n    SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY,\n    SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH,\n    SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH,\n    SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH,\n    SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE,\n    SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH,\n    SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH,\n    SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH,\n    SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH,\n    SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT,\n    SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS,\n    SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT,\n    SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE,\n    SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE,\n    SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE,\n    SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS,\n    SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA,\n    SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW,\n    SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR,\n    SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS,\n    SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH,\n    SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,\n    SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX,\n    SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC,\n    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT,\n    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND,\n    SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR,\n    SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER,\n    SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC,\n    SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS,\n    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT,\n    SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID,\n    SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS,\n    SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION,\n    SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE,\n    SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED,\n    SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION,\n    SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT,\n    SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN,\n    SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID,\n    SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR,\n    SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH,\n    SOLANA_ERROR__INVALID_NONCE,\n    SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING,\n    SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE,\n    SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE,\n    SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING,\n    SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR,\n    SOLANA_ERROR__JSON_RPC__INVALID_PARAMS,\n    SOLANA_ERROR__JSON_RPC__INVALID_REQUEST,\n    SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND,\n    SOLANA_ERROR__JSON_RPC__PARSE_ERROR,\n    SOLANA_ERROR__JSON_RPC__SCAN_ERROR,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION,\n    SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH,\n    SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH,\n    SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH,\n    SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE,\n    SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE,\n    SOLANA_ERROR__MALFORMED_BIGINT_STRING,\n    SOLANA_ERROR__MALFORMED_NUMBER_STRING,\n    SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND,\n    SOLANA_ERROR__RPC__INTEGER_OVERFLOW,\n    SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR,\n    SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN,\n    SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST,\n    SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID,\n    SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED,\n    SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED,\n    SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT,\n    SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS,\n    SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER,\n    SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER,\n    SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER,\n    SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER,\n    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER,\n    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER,\n    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER,\n    SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER,\n    SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS,\n    SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING,\n    SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED,\n    SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT,\n    SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED,\n    SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED,\n    SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED,\n    SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED,\n    SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED,\n    SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE,\n    SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING,\n    SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME,\n    SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME,\n    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING,\n    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE,\n    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING,\n    SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND,\n    SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING,\n    SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING,\n    SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE,\n    SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING,\n    SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES,\n    SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE,\n    SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING,\n    SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE,\n    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING,\n    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE,\n    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE,\n    SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND,\n    SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND,\n    SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED,\n    SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND,\n    SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP,\n    SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE,\n    SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION,\n    SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE,\n    SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT,\n    SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT,\n    SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED,\n    SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE,\n    SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND,\n    SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED,\n    SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED,\n    SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE,\n    SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE,\n    SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS,\n    SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION,\n    SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN,\n    SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION,\n    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT,\n    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT,\n    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT,\n    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT,\n    SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT,\n    SolanaErrorCode,\n} from './codes';\n\n/**\n * To add a new error, follow the instructions at\n * https://github.com/solana-labs/solana-web3.js/tree/master/packages/errors#adding-a-new-error\n *\n * WARNING:\n *   - Don't change the meaning of an error message.\n */\nexport const SolanaErrorMessages: Readonly<{\n    // This type makes this data structure exhaustive with respect to `SolanaErrorCode`.\n    // TypeScript will fail to build this project if add an error code without a message.\n    [P in SolanaErrorCode]: string;\n}> = {\n    [SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND]: 'Account not found at address: $address',\n    [SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED]:\n        'Not all accounts were decoded. Encoded accounts found at addresses: $addresses.',\n    [SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT]: 'Expected decoded account at address: $address',\n    [SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT]: 'Failed to decode account data at address: $address',\n    [SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND]: 'Accounts not found at addresses: $addresses',\n    [SOLANA_ERROR__ADDRESSES__FAILED_TO_FIND_VIABLE_PDA_BUMP_SEED]:\n        'Unable to find a viable program address bump seed.',\n    [SOLANA_ERROR__ADDRESSES__INVALID_BASE58_ENCODED_ADDRESS]: '$putativeAddress is not a base58-encoded address.',\n    [SOLANA_ERROR__ADDRESSES__INVALID_BYTE_LENGTH]:\n        'Expected base58 encoded address to decode to a byte array of length 32. Actual length: $actualLength.',\n    [SOLANA_ERROR__ADDRESSES__INVALID_ED25519_PUBLIC_KEY]: 'The `CryptoKey` must be an `Ed25519` public key.',\n    [SOLANA_ERROR__ADDRESSES__INVALID_SEEDS_POINT_ON_CURVE]: 'Invalid seeds; point must fall off the Ed25519 curve.',\n    [SOLANA_ERROR__ADDRESSES__MALFORMED_PDA]:\n        'Expected given program derived address to have the following format: [Address, ProgramDerivedAddressBump].',\n    [SOLANA_ERROR__ADDRESSES__MAX_NUMBER_OF_PDA_SEEDS_EXCEEDED]:\n        'A maximum of $maxSeeds seeds, including the bump seed, may be supplied when creating an address. Received: $actual.',\n    [SOLANA_ERROR__ADDRESSES__MAX_PDA_SEED_LENGTH_EXCEEDED]:\n        'The seed at index $index with length $actual exceeds the maximum length of $maxSeedLength bytes.',\n    [SOLANA_ERROR__ADDRESSES__PDA_BUMP_SEED_OUT_OF_RANGE]:\n        'Expected program derived address bump to be in the range [0, 255], got: $bump.',\n    [SOLANA_ERROR__ADDRESSES__PDA_ENDS_WITH_PDA_MARKER]: 'Program address cannot end with PDA marker.',\n    [SOLANA_ERROR__ADDRESSES__STRING_LENGTH_OUT_OF_RANGE]:\n        'Expected base58-encoded address string of length in the range [32, 44]. Actual length: $actualLength.',\n    [SOLANA_ERROR__BLOCKHASH_STRING_LENGTH_OUT_OF_RANGE]:\n        'Expected base58-encoded blockash string of length in the range [32, 44]. Actual length: $actualLength.',\n    [SOLANA_ERROR__BLOCK_HEIGHT_EXCEEDED]:\n        'The network has progressed past the last block for which this transaction could have been committed.',\n    [SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY]:\n        'Codec [$codecDescription] cannot decode empty byte arrays.',\n    [SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH]:\n        'Encoder and decoder must have the same fixed size, got [$encoderFixedSize] and [$decoderFixedSize].',\n    [SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH]:\n        'Encoder and decoder must have the same max size, got [$encoderMaxSize] and [$decoderMaxSize].',\n    [SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH]:\n        'Encoder and decoder must either both be fixed-size or variable-size.',\n    [SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE]:\n        'Enum discriminator out of range. Expected a number between $minRange and $maxRange, got $discriminator.',\n    [SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH]: 'Expected a fixed-size codec, got a variable-size one.',\n    [SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH]:\n        'Codec [$codecDescription] expected a positive byte length, got $bytesLength.',\n    [SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH]: 'Expected a variable-size codec, got a fixed-size one.',\n    [SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH]:\n        'Codec [$codecDescription] expected $expected bytes, got $bytesLength.',\n    [SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT]:\n        'Invalid data enum variant. Expected one of [$variants], got $value.',\n    [SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS]:\n        'Expected [$codecDescription] to have $expected items, got $actual.',\n    [SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT]:\n        'Invalid scalar enum variant. Expected one of [$variants] or a number between $minRange and $maxRange, got $value.',\n    [SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE]: 'Invalid value $value for base $base with alphabet $alphabet.',\n    [SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE]:\n        'Codec [$codecDescription] expected number to be in the range [$min, $max], got $value.',\n    [SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE]:\n        'Codec [$codecDescription] expected offset to be in the range [0, $bytesLength], got $offset.',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_ALREADY_INITIALIZED]: 'instruction requires an uninitialized account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_FAILED]:\n        'instruction tries to borrow reference for an account which is already borrowed',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]:\n        'instruction left account with an outstanding borrowed reference',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_SIZE_CHANGED]:\n        \"program other than the account's owner changed the size of the account data\",\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_DATA_TOO_SMALL]: 'account data too small for instruction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_EXECUTABLE]: 'instruction expected an executable account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ACCOUNT_NOT_RENT_EXEMPT]:\n        'An account does not have enough lamports to be rent-exempt',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ARITHMETIC_OVERFLOW]: 'Program arithmetic overflowed',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR]: 'Failed to serialize or deserialize account data: $encodedData',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS]:\n        'Builtin programs must consume compute units',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__CALL_DEPTH]: 'Cross-program invocation call depth too deep',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__COMPUTATIONAL_BUDGET_EXCEEDED]: 'Computational budget exceeded',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM]: 'custom program error: #$code',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_INDEX]: 'instruction contains duplicate accounts',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__DUPLICATE_ACCOUNT_OUT_OF_SYNC]:\n        'instruction modifications of multiply-passed account differ',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT]: 'executable accounts must be rent exempt',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_DATA_MODIFIED]: 'instruction changed executable accounts data',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_LAMPORT_CHANGE]:\n        'instruction changed the balance of an executable account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__EXECUTABLE_MODIFIED]: 'instruction changed executable bit of an account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_DATA_MODIFIED]:\n        'instruction modified data of an account it does not own',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__EXTERNAL_ACCOUNT_LAMPORT_SPEND]:\n        'instruction spent from the balance of an account it does not own',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__GENERIC_ERROR]: 'generic instruction error',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__ILLEGAL_OWNER]: 'Provided owner is not allowed',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__IMMUTABLE]: 'Account is immutable',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_AUTHORITY]: 'Incorrect authority provided',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INCORRECT_PROGRAM_ID]: 'incorrect program id for instruction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INSUFFICIENT_FUNDS]: 'insufficient funds for instruction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_DATA]: 'invalid account data for instruction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ACCOUNT_OWNER]: 'Invalid account owner',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ARGUMENT]: 'invalid program argument',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_ERROR]: 'program returned invalid error code',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_INSTRUCTION_DATA]: 'invalid instruction data',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_REALLOC]: 'Failed to reallocate account data',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__INVALID_SEEDS]: 'Provided seeds do not result in a valid address',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED]:\n        'Accounts data allocations exceeded the maximum allowed per transaction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_ACCOUNTS_EXCEEDED]: 'Max accounts exceeded',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED]: 'Max instruction trace length exceeded',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__MAX_SEED_LENGTH_EXCEEDED]:\n        'Length of the seed is too long for address generation',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_ACCOUNT]: 'An account required by the instruction is missing',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__MISSING_REQUIRED_SIGNATURE]: 'missing required signature for instruction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__MODIFIED_PROGRAM_ID]:\n        'instruction illegally modified the program id of an account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__NOT_ENOUGH_ACCOUNT_KEYS]: 'insufficient account keys for instruction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__PRIVILEGE_ESCALATION]:\n        'Cross-program invocation with unauthorized signer or writable account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_ENVIRONMENT_SETUP_FAILURE]:\n        'Failed to create program execution environment',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPILE]: 'Program failed to compile',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__PROGRAM_FAILED_TO_COMPLETE]: 'Program failed to complete',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_DATA_MODIFIED]: 'instruction modified data of a read-only account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__READONLY_LAMPORT_CHANGE]:\n        'instruction changed the balance of a read-only account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__REENTRANCY_NOT_ALLOWED]:\n        'Cross-program invocation reentrancy not allowed for this instruction',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__RENT_EPOCH_MODIFIED]: 'instruction modified rent epoch of an account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__UNBALANCED_INSTRUCTION]:\n        'sum of account balances before and after instruction do not match',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__UNINITIALIZED_ACCOUNT]: 'instruction requires an initialized account',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN]: '',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_PROGRAM_ID]: 'Unsupported program id',\n    [SOLANA_ERROR__INSTRUCTION_ERROR__UNSUPPORTED_SYSVAR]: 'Unsupported sysvar',\n    [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS]: 'The instruction does not have any accounts.',\n    [SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA]: 'The instruction does not have any data.',\n    [SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH]:\n        'Expected instruction to have progress address $expectedProgramAddress, got $actualProgramAddress.',\n    [SOLANA_ERROR__INVALID_BLOCKHASH_BYTE_LENGTH]:\n        'Expected base58 encoded blockhash to decode to a byte array of length 32. Actual length: $actualLength.',\n    [SOLANA_ERROR__INVALID_NONCE]:\n        'The nonce `$expectedNonceValue` is no longer valid. It has advanced to `$actualNonceValue`',\n    [SOLANA_ERROR__INVARIANT_VIOLATION__CACHED_ABORTABLE_ITERABLE_CACHE_ENTRY_MISSING]:\n        'Invariant violation: Found no abortable iterable cache entry for key `$cacheKey`. It ' +\n        'should be impossible to hit this error; please file an issue at ' +\n        'https://sola.na/web3invariant',\n    [SOLANA_ERROR__INVARIANT_VIOLATION__SWITCH_MUST_BE_EXHAUSTIVE]:\n        'Invariant violation: Switch statement non-exhaustive. Received unexpected value ' +\n        '`$unexpectedValue`. It should be impossible to hit this error; please file an issue at ' +\n        'https://sola.na/web3invariant',\n    [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_MUST_NOT_POLL_BEFORE_RESOLVING_EXISTING_MESSAGE_PROMISE]:\n        'Invariant violation: WebSocket message iterator state is corrupt; iterated without first ' +\n        'resolving existing message promise. It should be impossible to hit this error; please ' +\n        'file an issue at https://sola.na/web3invariant',\n    [SOLANA_ERROR__INVARIANT_VIOLATION__WEBSOCKET_MESSAGE_ITERATOR_STATE_MISSING]:\n        'Invariant violation: WebSocket message iterator is missing state storage. It should be ' +\n        'impossible to hit this error; please file an issue at https://sola.na/web3invariant',\n    [SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR]: 'JSON-RPC error: Internal JSON-RPC error ($__serverMessage)',\n    [SOLANA_ERROR__JSON_RPC__INVALID_PARAMS]: 'JSON-RPC error: Invalid method parameter(s) ($__serverMessage)',\n    [SOLANA_ERROR__JSON_RPC__INVALID_REQUEST]:\n        'JSON-RPC error: The JSON sent is not a valid `Request` object ($__serverMessage)',\n    [SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND]:\n        'JSON-RPC error: The method does not exist / is not available ($__serverMessage)',\n    [SOLANA_ERROR__JSON_RPC__PARSE_ERROR]:\n        'JSON-RPC error: An error occurred on the server while parsing the JSON text ($__serverMessage)',\n    [SOLANA_ERROR__JSON_RPC__SCAN_ERROR]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED]: 'Minimum context slot has not been reached',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NODE_UNHEALTHY]: 'Node is unhealthy; behind by $numSlotsBehind slots',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_NO_SNAPSHOT]: 'No snapshot',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE]: 'Transaction simulation failed',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE]:\n        'Transaction history is not available from this node',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE]: '$__serverMessage',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH]: 'Transaction signature length mismatch',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE]:\n        'Transaction signature verification failure',\n    [SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION]: '$__serverMessage',\n    [SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH]: 'Key pair bytes must be of length 64, got $byteLength.',\n    [SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH]:\n        'Expected private key bytes with length 32. Actual length: $actualLength.',\n    [SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH]:\n        'Expected base58-encoded signature to decode to a byte array of length 64. Actual length: $actualLength.',\n    [SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE]:\n        'Expected base58-encoded signature string of length in the range [64, 88]. Actual length: $actualLength.',\n    [SOLANA_ERROR__LAMPORTS_OUT_OF_RANGE]: 'Lamports value must be in the range [0, 2e64-1]',\n    [SOLANA_ERROR__MALFORMED_BIGINT_STRING]: '`$value` cannot be parsed as a `BigInt`',\n    [SOLANA_ERROR__MALFORMED_NUMBER_STRING]: '`$value` cannot be parsed as a `Number`',\n    [SOLANA_ERROR__NONCE_ACCOUNT_NOT_FOUND]: 'No nonce account could be found at address `$nonceAccountAddress`',\n    [SOLANA_ERROR__RPC_SUBSCRIPTIONS__CANNOT_CREATE_SUBSCRIPTION_REQUEST]:\n        \"Either the notification name must end in 'Notifications' or the API must supply a \" +\n        \"subscription creator function for the notification '$notificationName' to map between \" +\n        'the notification name and the subscribe/unsubscribe method names.',\n    [SOLANA_ERROR__RPC_SUBSCRIPTIONS__EXPECTED_SERVER_SUBSCRIPTION_ID]:\n        'Failed to obtain a subscription id from the server',\n    [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CLOSED_BEFORE_MESSAGE_BUFFERED]:\n        'WebSocket was closed before payload could be added to the send buffer',\n    [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_CONNECTION_CLOSED]: 'WebSocket connection closed',\n    [SOLANA_ERROR__RPC_SUBSCRIPTIONS__TRANSPORT_FAILED_TO_CONNECT]: 'WebSocket failed to connect',\n    [SOLANA_ERROR__RPC__INTEGER_OVERFLOW]:\n        'The $argumentLabel argument to the `$methodName` RPC method$optionalPathLabel was ' +\n        '`$value`. This number is unsafe for use with the Solana JSON-RPC because it exceeds ' +\n        '`Number.MAX_SAFE_INTEGER`.',\n    [SOLANA_ERROR__RPC__TRANSPORT_HTTP_ERROR]: 'HTTP error ($statusCode): $message',\n    [SOLANA_ERROR__RPC__TRANSPORT_HTTP_HEADER_FORBIDDEN]:\n        'HTTP header(s) forbidden: $headers. Learn more at ' +\n        'https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name.',\n    [SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS]:\n        'Multiple distinct signers were identified for address `$address`. Please ensure that ' +\n        'you are using the same signer instance for each address.',\n    [SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER]:\n        'The provided value does not implement the `KeyPairSigner` interface',\n    [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER]:\n        'The provided value does not implement the `MessageModifyingSigner` interface',\n    [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER]:\n        'The provided value does not implement the `MessagePartialSigner` interface',\n    [SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER]:\n        'The provided value does not implement any of the `MessageSigner` interfaces',\n    [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER]:\n        'The provided value does not implement the `TransactionModifyingSigner` interface',\n    [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER]:\n        'The provided value does not implement the `TransactionPartialSigner` interface',\n    [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER]:\n        'The provided value does not implement the `TransactionSendingSigner` interface',\n    [SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER]:\n        'The provided value does not implement any of the `TransactionSigner` interfaces',\n    [SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS]:\n        'More than one `TransactionSendingSigner` was identified.',\n    [SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING]:\n        'No `TransactionSendingSigner` was identified. Please provide a valid ' +\n        '`ITransactionWithSingleSendingSigner` transaction.',\n    [SOLANA_ERROR__SUBTLE_CRYPTO__DIGEST_UNIMPLEMENTED]: 'No digest implementation could be found.',\n    [SOLANA_ERROR__SUBTLE_CRYPTO__DISALLOWED_IN_INSECURE_CONTEXT]:\n        'Cryptographic operations are only allowed in secure browser contexts. Read more ' +\n        'here: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts.',\n    [SOLANA_ERROR__SUBTLE_CRYPTO__ED25519_ALGORITHM_UNIMPLEMENTED]:\n        'This runtime does not support the generation of Ed25519 key pairs.\\n\\nInstall and ' +\n        'import `@solana/webcrypto-ed25519-polyfill` before generating keys in ' +\n        'environments that do not support Ed25519.\\n\\nFor a list of runtimes that ' +\n        'currently support Ed25519 operations, visit ' +\n        'https://github.com/WICG/webcrypto-secure-curves/issues/20.',\n    [SOLANA_ERROR__SUBTLE_CRYPTO__EXPORT_FUNCTION_UNIMPLEMENTED]:\n        'No signature verification implementation could be found.',\n    [SOLANA_ERROR__SUBTLE_CRYPTO__GENERATE_FUNCTION_UNIMPLEMENTED]: 'No key generation implementation could be found.',\n    [SOLANA_ERROR__SUBTLE_CRYPTO__SIGN_FUNCTION_UNIMPLEMENTED]: 'No signing implementation could be found.',\n    [SOLANA_ERROR__SUBTLE_CRYPTO__VERIFY_FUNCTION_UNIMPLEMENTED]: 'No key export implementation could be found.',\n    [SOLANA_ERROR__TIMESTAMP_OUT_OF_RANGE]: 'Timestamp value must be in the range [-8.64e15, 8.64e15]. `$value` given',\n    [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_BORROW_OUTSTANDING]:\n        'Transaction processing left an account with an outstanding borrowed reference',\n    [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_IN_USE]: 'Account in use',\n    [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_LOADED_TWICE]: 'Account loaded twice',\n    [SOLANA_ERROR__TRANSACTION_ERROR__ACCOUNT_NOT_FOUND]:\n        'Attempt to debit an account but found no record of a prior credit.',\n    [SOLANA_ERROR__TRANSACTION_ERROR__ADDRESS_LOOKUP_TABLE_NOT_FOUND]:\n        \"Transaction loads an address table account that doesn't exist\",\n    [SOLANA_ERROR__TRANSACTION_ERROR__ALREADY_PROCESSED]: 'This transaction has already been processed',\n    [SOLANA_ERROR__TRANSACTION_ERROR__BLOCKHASH_NOT_FOUND]: 'Blockhash not found',\n    [SOLANA_ERROR__TRANSACTION_ERROR__CALL_CHAIN_TOO_DEEP]: 'Loader call chain is too deep',\n    [SOLANA_ERROR__TRANSACTION_ERROR__CLUSTER_MAINTENANCE]:\n        'Transactions are currently disabled due to cluster maintenance',\n    [SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION]:\n        'Transaction contains a duplicate instruction ($index) that is not allowed',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_FEE]: 'Insufficient funds for fee',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT]:\n        'Transaction results in an account ($accountIndex) with insufficient funds for rent',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_FOR_FEE]: 'This account may not be used to pay transaction fees',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ACCOUNT_INDEX]: 'Transaction contains an invalid account reference',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_DATA]:\n        'Transaction loads an address table account with invalid data',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_INDEX]:\n        'Transaction address table lookup uses an invalid index',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_ADDRESS_LOOKUP_TABLE_OWNER]:\n        'Transaction loads an address table account with an invalid owner',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_LOADED_ACCOUNTS_DATA_SIZE_LIMIT]:\n        'LoadedAccountsDataSizeLimit set for transaction must be greater than 0.',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_PROGRAM_FOR_EXECUTION]:\n        'This program may not be used for executing instructions',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_RENT_PAYING_ACCOUNT]:\n        'Transaction leaves an account with a lower balance than rent-exempt minimum',\n    [SOLANA_ERROR__TRANSACTION_ERROR__INVALID_WRITABLE_ACCOUNT]:\n        'Transaction loads a writable account that cannot be written',\n    [SOLANA_ERROR__TRANSACTION_ERROR__MAX_LOADED_ACCOUNTS_DATA_SIZE_EXCEEDED]:\n        'Transaction exceeded max loaded accounts data size cap',\n    [SOLANA_ERROR__TRANSACTION_ERROR__MISSING_SIGNATURE_FOR_FEE]:\n        'Transaction requires a fee but has no signature present',\n    [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_ACCOUNT_NOT_FOUND]: 'Attempt to load a program that does not exist',\n    [SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED]:\n        'Execution of the program referenced by account at index $accountIndex is temporarily restricted.',\n    [SOLANA_ERROR__TRANSACTION_ERROR__RESANITIZATION_NEEDED]: 'ResanitizationNeeded',\n    [SOLANA_ERROR__TRANSACTION_ERROR__SANITIZE_FAILURE]: 'Transaction failed to sanitize accounts offsets correctly',\n    [SOLANA_ERROR__TRANSACTION_ERROR__SIGNATURE_FAILURE]: 'Transaction did not pass signature verification',\n    [SOLANA_ERROR__TRANSACTION_ERROR__TOO_MANY_ACCOUNT_LOCKS]: 'Transaction locked too many accounts',\n    [SOLANA_ERROR__TRANSACTION_ERROR__UNBALANCED_TRANSACTION]:\n        'Sum of account balances before and after transaction do not match',\n    [SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN]: 'The transaction failed with the error `$errorName`',\n    [SOLANA_ERROR__TRANSACTION_ERROR__UNSUPPORTED_VERSION]: 'Transaction version is unsupported',\n    [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_BLOCK_LIMIT]:\n        'Transaction would exceed account data limit within the block',\n    [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_ACCOUNT_DATA_TOTAL_LIMIT]:\n        'Transaction would exceed total account data limit',\n    [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_ACCOUNT_COST_LIMIT]:\n        'Transaction would exceed max account limit within the block',\n    [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_BLOCK_COST_LIMIT]:\n        'Transaction would exceed max Block Cost Limit',\n    [SOLANA_ERROR__TRANSACTION_ERROR__WOULD_EXCEED_MAX_VOTE_COST_LIMIT]: 'Transaction would exceed max Vote Cost Limit',\n    [SOLANA_ERROR__TRANSACTION__ADDRESS_MISSING]: 'Transaction is missing an address at index: $index.',\n    [SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME]: 'Transaction does not have a blockhash lifetime',\n    [SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME]: 'Transaction is not a durable nonce transaction',\n    [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING]:\n        'Contents of these address lookup tables unknown: $lookupTableAddresses',\n    [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE]:\n        'Lookup of address at index $highestRequestedIndex failed for lookup table ' +\n        '`$lookupTableAddress`. Highest known index is $highestKnownIndex. The lookup table ' +\n        'may have been extended since its contents were retrieved',\n    [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING]: 'No fee payer set in CompiledTransaction',\n    [SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND]:\n        'Could not find program address at index $index',\n    [SOLANA_ERROR__TRANSACTION__FEE_PAYER_MISSING]: 'Transaction is missing a fee payer.',\n    [SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING]:\n        \"Could not determine this transaction's signature. Make sure that the transaction has \" +\n        'been signed by its fee payer.',\n    [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_FIRST_INSTRUCTION_MUST_BE_ADVANCE_NONCE]:\n        'Transaction first instruction is not advance nonce account instruction.',\n    [SOLANA_ERROR__TRANSACTION__INVALID_NONCE_TRANSACTION_INSTRUCTIONS_MISSING]:\n        'Transaction with no instructions cannot be durable nonce transaction.',\n    [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES]:\n        'This transaction includes an address (`$programAddress`) which is both ' +\n        'invoked and set as the fee payer. Program addresses may not pay fees',\n    [SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE]:\n        'This transaction includes an address (`$programAddress`) which is both invoked and ' +\n        'marked writable. Program addresses may not be writable',\n    [SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING]: 'Transaction is missing signatures for addresses: $addresses.',\n    [SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE]:\n        'Transaction version must be in the range [0, 127]. `$actualVersion` given',\n};\n", "import { SolanaErrorCode } from './codes';\nimport { SolanaErrorMessages } from './messages';\n\nfunction encodeValue(value: unknown): string {\n    if (Array.isArray(value)) {\n        return (\n            /* \"[\" */ '%5B' +\n            value\n                .map(element =>\n                    typeof element === 'string'\n                        ? encodeURIComponent(`\"${element.replace(/\"/g, '\\\\\"')}\"`)\n                        : encodeValue(element),\n                )\n                .join(/* \", \" */ '%2C%20') +\n            /* \"]\" */ '%5D'\n        );\n    } else if (typeof value === 'bigint') {\n        return `${value}n`;\n    } else {\n        return encodeURIComponent(\n            String(\n                value != null && Object.getPrototypeOf(value) === null\n                    ? // Plain objects with no protoype don't have a `toString` method.\n                      // Convert them before stringifying them.\n                      { ...(value as object) }\n                    : value,\n            ),\n        );\n    }\n}\n\nfunction encodeObjectContextEntry([key, value]: [string, unknown]): `${typeof key}=${string}` {\n    return `${key}=${encodeValue(value)}`;\n}\n\nfunction encodeContextObject(context: object) {\n    return Object.entries(context).map(encodeObjectContextEntry).join('&');\n}\n\nexport function getHumanReadableErrorMessage<TErrorCode extends SolanaErrorCode>(\n    code: TErrorCode,\n    context: object = {},\n): string {\n    const messageFormatString = SolanaErrorMessages[code];\n    const message = messageFormatString.replace(/(?<!\\\\)\\$(\\w+)/g, (substring, variableName) =>\n        variableName in context ? `${context[variableName as keyof typeof context]}` : substring,\n    );\n    return message;\n}\n\nexport function getErrorMessage<TErrorCode extends SolanaErrorCode>(code: TErrorCode, context: object = {}): string {\n    if (__DEV__) {\n        return getHumanReadableErrorMessage(code, context);\n    } else {\n        let decodingAdviceMessage = `Solana error #${code}; Decode this error by running \\`npx @solana/errors decode ${code}`;\n        if (Object.keys(context).length) {\n            /**\n             * DANGER: Be sure that the shell command is escaped in such a way that makes it\n             *         impossible for someone to craft malicious context values that would result in\n             *         an exploit against anyone who bindly copy/pastes it into their terminal.\n             */\n            decodingAdviceMessage += ` $\"${encodeContextObject(context)}\"`;\n        }\n        return `${decodingAdviceMessage}\\``;\n    }\n}\n", "import { SolanaErrorCode } from './codes';\nimport { SolanaErrorContext } from './context';\nimport { getErrorMessage } from './message-formatter';\n\nexport function isSolanaError<TErrorCode extends SolanaErrorCode>(\n    e: unknown,\n    code?: TErrorCode,\n): e is SolanaError<TErrorCode> {\n    const isSolanaError = e instanceof Error && e.name === 'SolanaError';\n    if (isSolanaError) {\n        if (code !== undefined) {\n            return (e as SolanaError<TErrorCode>).context.__code === code;\n        }\n        return true;\n    }\n    return false;\n}\n\ntype SolanaErrorCodedContext = Readonly<{\n    [P in SolanaErrorCode]: (SolanaErrorContext[P] extends undefined ? object : SolanaErrorContext[P]) & {\n        __code: P;\n    };\n}>;\n\nexport class SolanaError<TErrorCode extends SolanaErrorCode = SolanaErrorCode> extends Error {\n    readonly context: SolanaErrorCodedContext[TErrorCode];\n    constructor(\n        ...[code, contextAndErrorOptions]: SolanaErrorContext[TErrorCode] extends undefined\n            ? [code: TErrorCode, errorOptions?: ErrorOptions | undefined]\n            : [code: TErrorCode, contextAndErrorOptions: SolanaErrorContext[TErrorCode] & (ErrorOptions | undefined)]\n    ) {\n        let context: SolanaErrorContext[TErrorCode] | undefined;\n        let errorOptions: ErrorOptions | undefined;\n        if (contextAndErrorOptions) {\n            // If the `ErrorOptions` type ever changes, update this code.\n            const { cause, ...contextRest } = contextAndErrorOptions;\n            if (cause) {\n                errorOptions = { cause };\n            }\n            if (Object.keys(contextRest).length > 0) {\n                context = contextRest as SolanaErrorContext[TErrorCode];\n            }\n        }\n        const message = getErrorMessage(code, context);\n        super(message, errorOptions);\n        this.context = {\n            __code: code,\n            ...context,\n        } as SolanaErrorCodedContext[TErrorCode];\n        // This is necessary so that `isSolanaError()` can identify a `SolanaError` without having\n        // to import the class for use in an `instanceof` check.\n        this.name = 'SolanaError';\n    }\n}\n", "export function safeCaptureStackTrace(...args: Parameters<typeof Error.captureStackTrace>): void {\n    if ('captureStackTrace' in Error && typeof Error.captureStackTrace === 'function') {\n        Error.captureStackTrace(...args);\n    }\n}\n", "import { SolanaErrorCode } from './codes';\nimport { SolanaErrorContext } from './context';\nimport { SolanaError } from './error';\nimport { safeCaptureStackTrace } from './stack-trace';\n\ntype Config = Readonly<{\n    /**\n     * Oh, hello. You might wonder what in tarnation is going on here. Allow us to explain.\n     *\n     * One of the goals of `@solana/errors` is to allow errors that are not interesting to your\n     * application to shake out of your app bundle in production. This means that we must never\n     * export large hardcoded maps of error codes/messages.\n     *\n     * Unfortunately, where instruction and transaction errors from the RPC are concerned, we have\n     * no choice but to keep a map between the RPC `rpcEnumError` enum name and its corresponding\n     * `SolanaError` code. In the interest of implementing that map in as few bytes of source code\n     * as possible, we do the following:\n     *\n     *   1. Reserve a block of sequential error codes for the enum in question\n     *   2. Hardcode the list of enum names in that same order\n     *   3. Match the enum error name from the RPC with its index in that list, and reconstruct the\n     *      `SolanaError` code by adding the `errorCodeBaseOffset` to that index\n     */\n    errorCodeBaseOffset: number;\n    getErrorContext: (\n        errorCode: SolanaErrorCode,\n        rpcErrorName: string,\n        rpcErrorContext?: unknown,\n    ) => SolanaErrorContext[SolanaErrorCode];\n    orderedErrorNames: string[];\n    rpcEnumError: string | { [key: string]: unknown };\n}>;\n\nexport function getSolanaErrorFromRpcError(\n    { errorCodeBaseOffset, getErrorContext, orderedErrorNames, rpcEnumError }: Config,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    constructorOpt: Function,\n): SolanaError {\n    let rpcErrorName;\n    let rpcErrorContext;\n    if (typeof rpcEnumError === 'string') {\n        rpcErrorName = rpcEnumError;\n    } else {\n        rpcErrorName = Object.keys(rpcEnumError)[0];\n        rpcErrorContext = rpcEnumError[rpcErrorName];\n    }\n    const codeOffset = orderedErrorNames.indexOf(rpcErrorName);\n    const errorCode = (errorCodeBaseOffset + codeOffset) as SolanaErrorCode;\n    const errorContext = getErrorContext(errorCode, rpcErrorName, rpcErrorContext);\n    const err = new SolanaError(errorCode, errorContext);\n    safeCaptureStackTrace(err, constructorOpt);\n    return err;\n}\n", "import {\n    SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR,\n    SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,\n    SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN,\n} from './codes';\nimport { SolanaError } from './error';\nimport { getSolanaErrorFromRpcError } from './rpc-enum-errors';\n\nconst ORDERED_ERROR_NAMES = [\n    // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/program/src/instruction.rs\n    // If this list ever gets too large, consider implementing a compression strategy like this:\n    // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n    'GenericError',\n    'InvalidArgument',\n    'InvalidInstructionData',\n    'InvalidAccountData',\n    'AccountDataTooSmall',\n    'InsufficientFunds',\n    'IncorrectProgramId',\n    'MissingRequiredSignature',\n    'AccountAlreadyInitialized',\n    'UninitializedAccount',\n    'UnbalancedInstruction',\n    'ModifiedProgramId',\n    'ExternalAccountLamportSpend',\n    'ExternalAccountDataModified',\n    'ReadonlyLamportChange',\n    'ReadonlyDataModified',\n    'DuplicateAccountIndex',\n    'ExecutableModified',\n    'RentEpochModified',\n    'NotEnoughAccountKeys',\n    'AccountDataSizeChanged',\n    'AccountNotExecutable',\n    'AccountBorrowFailed',\n    'AccountBorrowOutstanding',\n    'DuplicateAccountOutOfSync',\n    'Custom',\n    'InvalidError',\n    'ExecutableDataModified',\n    'ExecutableLamportChange',\n    'ExecutableAccountNotRentExempt',\n    'UnsupportedProgramId',\n    'CallDepth',\n    'MissingAccount',\n    'ReentrancyNotAllowed',\n    'MaxSeedLengthExceeded',\n    'InvalidSeeds',\n    'InvalidRealloc',\n    'ComputationalBudgetExceeded',\n    'PrivilegeEscalation',\n    'ProgramEnvironmentSetupFailure',\n    'ProgramFailedToComplete',\n    'ProgramFailedToCompile',\n    'Immutable',\n    'IncorrectAuthority',\n    'BorshIoError',\n    'AccountNotRentExempt',\n    'InvalidAccountOwner',\n    'ArithmeticOverflow',\n    'UnsupportedSysvar',\n    'IllegalOwner',\n    'MaxAccountsDataAllocationsExceeded',\n    'MaxAccountsExceeded',\n    'MaxInstructionTraceLengthExceeded',\n    'BuiltinProgramsMustConsumeComputeUnits',\n];\n\nexport function getSolanaErrorFromInstructionError(\n    index: number,\n    instructionError: string | { [key: string]: unknown },\n): SolanaError {\n    return getSolanaErrorFromRpcError(\n        {\n            errorCodeBaseOffset: 4615001,\n            getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n                if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__UNKNOWN) {\n                    return {\n                        errorName: rpcErrorName,\n                        index,\n                        ...(rpcErrorContext !== undefined ? { instructionErrorContext: rpcErrorContext } : null),\n                    };\n                } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM) {\n                    return {\n                        code: rpcErrorContext as number,\n                        index,\n                    };\n                } else if (errorCode === SOLANA_ERROR__INSTRUCTION_ERROR__BORSH_IO_ERROR) {\n                    return {\n                        encodedData: rpcErrorContext as string,\n                        index,\n                    };\n                }\n                return { index };\n            },\n            orderedErrorNames: ORDERED_ERROR_NAMES,\n            rpcEnumError: instructionError,\n        },\n        getSolanaErrorFromInstructionError,\n    );\n}\n", "import {\n    SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION,\n    SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT,\n    SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED,\n    SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN,\n} from './codes';\nimport { SolanaError } from './error';\nimport { getSolanaErrorFromInstructionError } from './instruction-error';\nimport { getSolanaErrorFromRpcError } from './rpc-enum-errors';\n\n/**\n * How to add an error when an entry is added to the RPC `TransactionError` enum:\n *\n *   1. Follow the instructions in `./codes.ts` to add a corresponding Solana error code\n *   2. Add the `TransactionError` enum name in the same order as it appears in `./codes.ts`\n *   3. Add the new error name/code mapping to `./__tests__/transaction-error-test.ts`\n */\nconst ORDERED_ERROR_NAMES = [\n    // Keep synced with RPC source: https://github.com/anza-xyz/agave/blob/master/sdk/src/transaction/error.rs\n    // If this list ever gets too large, consider implementing a compression strategy like this:\n    // https://gist.github.com/steveluscher/aaa7cbbb5433b1197983908a40860c47\n    'AccountInUse',\n    'AccountLoadedTwice',\n    'AccountNotFound',\n    'ProgramAccountNotFound',\n    'InsufficientFundsForFee',\n    'InvalidAccountForFee',\n    'AlreadyProcessed',\n    'BlockhashNotFound',\n    // `InstructionError` intentionally omitted; delegated to `getSolanaErrorFromInstructionError`\n    'CallChainTooDeep',\n    'MissingSignatureForFee',\n    'InvalidAccountIndex',\n    'SignatureFailure',\n    'InvalidProgramForExecution',\n    'SanitizeFailure',\n    'ClusterMaintenance',\n    'AccountBorrowOutstanding',\n    'WouldExceedMaxBlockCostLimit',\n    'UnsupportedVersion',\n    'InvalidWritableAccount',\n    'WouldExceedMaxAccountCostLimit',\n    'WouldExceedAccountDataBlockLimit',\n    'TooManyAccountLocks',\n    'AddressLookupTableNotFound',\n    'InvalidAddressLookupTableOwner',\n    'InvalidAddressLookupTableData',\n    'InvalidAddressLookupTableIndex',\n    'InvalidRentPayingAccount',\n    'WouldExceedMaxVoteCostLimit',\n    'WouldExceedAccountDataTotalLimit',\n    'DuplicateInstruction',\n    'InsufficientFundsForRent',\n    'MaxLoadedAccountsDataSizeExceeded',\n    'InvalidLoadedAccountsDataSizeLimit',\n    'ResanitizationNeeded',\n    'ProgramExecutionTemporarilyRestricted',\n    'UnbalancedTransaction',\n];\n\nexport function getSolanaErrorFromTransactionError(transactionError: string | { [key: string]: unknown }): SolanaError {\n    if (typeof transactionError === 'object' && 'InstructionError' in transactionError) {\n        return getSolanaErrorFromInstructionError(\n            ...(transactionError.InstructionError as Parameters<typeof getSolanaErrorFromInstructionError>),\n        );\n    }\n    return getSolanaErrorFromRpcError(\n        {\n            errorCodeBaseOffset: 7050001,\n            getErrorContext(errorCode, rpcErrorName, rpcErrorContext) {\n                if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__UNKNOWN) {\n                    return {\n                        errorName: rpcErrorName,\n                        ...(rpcErrorContext !== undefined ? { transactionErrorContext: rpcErrorContext } : null),\n                    };\n                } else if (errorCode === SOLANA_ERROR__TRANSACTION_ERROR__DUPLICATE_INSTRUCTION) {\n                    return {\n                        index: rpcErrorContext as number,\n                    };\n                } else if (\n                    errorCode === SOLANA_ERROR__TRANSACTION_ERROR__INSUFFICIENT_FUNDS_FOR_RENT ||\n                    errorCode === SOLANA_ERROR__TRANSACTION_ERROR__PROGRAM_EXECUTION_TEMPORARILY_RESTRICTED\n                ) {\n                    return {\n                        accountIndex: (rpcErrorContext as { account_index: number }).account_index,\n                    };\n                }\n            },\n            orderedErrorNames: ORDERED_ERROR_NAMES,\n            rpcEnumError: transactionError,\n        },\n        getSolanaErrorFromTransactionError,\n    );\n}\n", "import {\n    SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR,\n    SOLANA_ERROR__JSON_RPC__INVALID_PARAMS,\n    SOLANA_ERROR__JSON_RPC__INVALID_REQUEST,\n    SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND,\n    SOLANA_ERROR__JSON_RPC__PARSE_ERROR,\n    SOLANA_ERROR__JSON_RPC__SCAN_ERROR,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE,\n    SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION,\n    SolanaErrorCode,\n} from './codes';\nimport { SolanaErrorContext } from './context';\nimport { SolanaError } from './error';\nimport { safeCaptureStackTrace } from './stack-trace';\nimport { getSolanaErrorFromTransactionError } from './transaction-error';\n\ninterface RpcErrorResponse {\n    code: number;\n    data?: unknown;\n    message: string;\n}\n\ntype TransactionError = string | { [key: string]: unknown };\n\n// Keep in sync with https://github.com/anza-xyz/agave/blob/master/rpc-client-api/src/response.rs\nexport interface RpcSimulateTransactionResult {\n    accounts:\n        | ({\n              data:\n                  | string // LegacyBinary\n                  | {\n                        // Json\n                        parsed: unknown;\n                        program: string;\n                        space: number;\n                    }\n                  // Binary\n                  | [encodedBytes: string, encoding: 'base58' | 'base64' | 'base64+zstd' | 'binary' | 'jsonParsed'];\n              executable: boolean;\n              lamports: number;\n              owner: string;\n              rentEpoch: number;\n              space?: number;\n          } | null)[]\n        | null;\n    err: TransactionError | null;\n    // Enabled by `enable_cpi_recording`\n    innerInstructions?:\n        | {\n              index: number;\n              instructions: (\n                  | {\n                        // Compiled\n                        accounts: number[];\n                        data: string;\n                        programIdIndex: number;\n                        stack_height?: number;\n                    }\n                  | {\n                        // Parsed\n                        parsed: unknown;\n                        program: string;\n                        program_id: string;\n                        stack_height?: number;\n                    }\n                  | {\n                        // PartiallyDecoded\n                        accounts: string[];\n                        data: string;\n                        program_id: string;\n                        stack_height?: number;\n                    }\n              )[];\n          }[]\n        | null;\n    logs: string[] | null;\n    returnData: {\n        data: [string, 'base64'];\n        programId: string;\n    } | null;\n    unitsConsumed: number | null;\n}\n\nexport function getSolanaErrorFromJsonRpcError({ code, data, message }: RpcErrorResponse): SolanaError {\n    let out: SolanaError;\n    if (code === SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE) {\n        const { err, ...preflightErrorContext } = data as RpcSimulateTransactionResult;\n        const causeObject = err ? { cause: getSolanaErrorFromTransactionError(err) } : null;\n        out = new SolanaError(SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE, {\n            ...preflightErrorContext,\n            ...causeObject,\n        });\n    } else {\n        let errorContext;\n        switch (code) {\n            case SOLANA_ERROR__JSON_RPC__INTERNAL_ERROR:\n            case SOLANA_ERROR__JSON_RPC__INVALID_PARAMS:\n            case SOLANA_ERROR__JSON_RPC__INVALID_REQUEST:\n            case SOLANA_ERROR__JSON_RPC__METHOD_NOT_FOUND:\n            case SOLANA_ERROR__JSON_RPC__PARSE_ERROR:\n            case SOLANA_ERROR__JSON_RPC__SCAN_ERROR:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_CLEANED_UP:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_NOT_AVAILABLE:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SLOT_SKIPPED:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:\n            case SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:\n                // The server supplies no structured data, but rather a pre-formatted message. Put\n                // the server message in `context` so as not to completely lose the data. The long\n                // term fix for this is to add data to the server responses and modify the\n                // messages in `@solana/errors` to be actual format strings.\n                errorContext = { __serverMessage: message };\n                break;\n            default:\n                if (typeof data === 'object' && !Array.isArray(data)) {\n                    errorContext = data;\n                }\n        }\n        out = new SolanaError(code as SolanaErrorCode, errorContext as SolanaErrorContext[SolanaErrorCode]);\n    }\n    safeCaptureStackTrace(out, getSolanaErrorFromJsonRpcError);\n    return out;\n}\n", "import {\n    SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY,\n    SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH,\n    SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE,\n    SolanaError,\n} from '@solana/errors';\n\n/**\n * Asserts that a given byte array is not empty.\n */\nexport function assertByteArrayIsNotEmptyForCodec(codecDescription: string, bytes: Uint8Array, offset = 0) {\n    if (bytes.length - offset <= 0) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__CANNOT_DECODE_EMPTY_BYTE_ARRAY, {\n            codecDescription,\n        });\n    }\n}\n\n/**\n * Asserts that a given byte array has enough bytes to decode.\n */\nexport function assertByteArrayHasEnoughBytesForCodec(\n    codecDescription: string,\n    expected: number,\n    bytes: Uint8Array,\n    offset = 0,\n) {\n    const bytesLength = bytes.length - offset;\n    if (bytesLength < expected) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_BYTE_LENGTH, {\n            bytesLength,\n            codecDescription,\n            expected,\n        });\n    }\n}\n\n/**\n * Asserts that a given offset is within the byte array bounds.\n * This range is between 0 and the byte array length and is inclusive.\n * An offset equals to the byte array length is considered a valid offset\n * as it allows the post-offset of codecs to signal the end of the byte array.\n */\nexport function assertByteArrayOffsetIsNotOutOfRange(codecDescription: string, offset: number, bytesLength: number) {\n    if (offset < 0 || offset > bytesLength) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__OFFSET_OUT_OF_RANGE, {\n            bytesLength,\n            codecDescription,\n            offset,\n        });\n    }\n}\n", "/**\n * Concatenates an array of `Uint8Array`s into a single `Uint8Array`.\n * Reuses the original byte array when applicable.\n */\nexport const mergeBytes = (byteArrays: Uint8Array[]): Uint8Array => {\n    const nonEmptyByteArrays = byteArrays.filter(arr => arr.length);\n    if (nonEmptyByteArrays.length === 0) {\n        return byteArrays.length ? byteArrays[0] : new Uint8Array();\n    }\n\n    if (nonEmptyByteArrays.length === 1) {\n        return nonEmptyByteArrays[0];\n    }\n\n    const totalLength = nonEmptyByteArrays.reduce((total, arr) => total + arr.length, 0);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    nonEmptyByteArrays.forEach(arr => {\n        result.set(arr, offset);\n        offset += arr.length;\n    });\n    return result;\n};\n\n/**\n * Pads a `Uint8Array` with zeroes to the specified length.\n * If the array is longer than the specified length, it is returned as-is.\n */\nexport const padBytes = (bytes: Uint8Array, length: number): Uint8Array => {\n    if (bytes.length >= length) return bytes;\n    const paddedBytes = new Uint8Array(length).fill(0);\n    paddedBytes.set(bytes);\n    return paddedBytes;\n};\n\n/**\n * Fixes a `Uint8Array` to the specified length.\n * If the array is longer than the specified length, it is truncated.\n * If the array is shorter than the specified length, it is padded with zeroes.\n */\nexport const fixBytes = (bytes: Uint8Array, length: number): Uint8Array =>\n    padBytes(bytes.length <= length ? bytes : bytes.slice(0, length), length);\n", "import {\n    SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH,\n    SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH,\n    SolanaError,\n} from '@solana/errors';\n\n/**\n * Defines an offset in bytes.\n */\nexport type Offset = number;\n\ntype BaseEncoder<TFrom> = {\n    /** Encode the provided value and return the encoded bytes directly. */\n    readonly encode: (value: TFrom) => Uint8Array;\n    /**\n     * Writes the encoded value into the provided byte array at the given offset.\n     * Returns the offset of the next byte after the encoded value.\n     */\n    readonly write: (value: TFrom, bytes: Uint8Array, offset: Offset) => Offset;\n};\n\nexport type FixedSizeEncoder<TFrom, TSize extends number = number> = BaseEncoder<TFrom> & {\n    /** The fixed size of the encoded value in bytes. */\n    readonly fixedSize: TSize;\n};\n\nexport type VariableSizeEncoder<TFrom> = BaseEncoder<TFrom> & {\n    /** The total size of the encoded value in bytes. */\n    readonly getSizeFromValue: (value: TFrom) => number;\n    /** The maximum size an encoded value can be in bytes, if applicable. */\n    readonly maxSize?: number;\n};\n\n/**\n * An object that can encode a value to a `Uint8Array`.\n */\nexport type Encoder<TFrom> = FixedSizeEncoder<TFrom> | VariableSizeEncoder<TFrom>;\n\ntype BaseDecoder<TTo> = {\n    /** Decodes the provided byte array at the given offset (or zero) and returns the value directly. */\n    readonly decode: (bytes: Uint8Array, offset?: Offset) => TTo;\n    /**\n     * Reads the encoded value from the provided byte array at the given offset.\n     * Returns the decoded value and the offset of the next byte after the encoded value.\n     */\n    readonly read: (bytes: Uint8Array, offset: Offset) => [TTo, Offset];\n};\n\nexport type FixedSizeDecoder<TTo, TSize extends number = number> = BaseDecoder<TTo> & {\n    /** The fixed size of the encoded value in bytes. */\n    readonly fixedSize: TSize;\n};\n\nexport type VariableSizeDecoder<TTo> = BaseDecoder<TTo> & {\n    /** The maximum size an encoded value can be in bytes, if applicable. */\n    readonly maxSize?: number;\n};\n\n/**\n * An object that can decode a value from a `Uint8Array`.\n */\nexport type Decoder<TTo> = FixedSizeDecoder<TTo> | VariableSizeDecoder<TTo>;\n\nexport type FixedSizeCodec<TFrom, TTo extends TFrom = TFrom, TSize extends number = number> = FixedSizeDecoder<\n    TTo,\n    TSize\n> &\n    FixedSizeEncoder<TFrom, TSize>;\n\nexport type VariableSizeCodec<TFrom, TTo extends TFrom = TFrom> = VariableSizeDecoder<TTo> & VariableSizeEncoder<TFrom>;\n\n/**\n * An object that can encode and decode a value to and from a `Uint8Array`.\n * It supports encoding looser types than it decodes for convenience.\n * For example, a `bigint` encoder will always decode to a `bigint`\n * but can be used to encode a `number`.\n *\n * @typeParam TFrom - The type of the value to encode.\n * @typeParam TTo - The type of the decoded value. Defaults to `TFrom`.\n */\nexport type Codec<TFrom, TTo extends TFrom = TFrom> = FixedSizeCodec<TFrom, TTo> | VariableSizeCodec<TFrom, TTo>;\n\n/**\n * Get the encoded size of a given value in bytes.\n */\nexport function getEncodedSize<TFrom>(\n    value: TFrom,\n    encoder: { fixedSize: number } | { getSizeFromValue: (value: TFrom) => number },\n): number {\n    return 'fixedSize' in encoder ? encoder.fixedSize : encoder.getSizeFromValue(value);\n}\n\n/** Fills the missing `encode` function using the existing `write` function. */\nexport function createEncoder<TFrom, TSize extends number>(\n    encoder: Omit<FixedSizeEncoder<TFrom, TSize>, 'encode'>,\n): FixedSizeEncoder<TFrom, TSize>;\nexport function createEncoder<TFrom>(encoder: Omit<VariableSizeEncoder<TFrom>, 'encode'>): VariableSizeEncoder<TFrom>;\nexport function createEncoder<TFrom>(\n    encoder: Omit<FixedSizeEncoder<TFrom>, 'encode'> | Omit<VariableSizeEncoder<TFrom>, 'encode'>,\n): Encoder<TFrom>;\nexport function createEncoder<TFrom>(\n    encoder: Omit<FixedSizeEncoder<TFrom>, 'encode'> | Omit<VariableSizeEncoder<TFrom>, 'encode'>,\n): Encoder<TFrom> {\n    return Object.freeze({\n        ...encoder,\n        encode: value => {\n            const bytes = new Uint8Array(getEncodedSize(value, encoder));\n            encoder.write(value, bytes, 0);\n            return bytes;\n        },\n    });\n}\n\n/** Fills the missing `decode` function using the existing `read` function. */\nexport function createDecoder<TTo, TSize extends number>(\n    decoder: Omit<FixedSizeDecoder<TTo, TSize>, 'decode'>,\n): FixedSizeDecoder<TTo, TSize>;\nexport function createDecoder<TTo>(decoder: Omit<VariableSizeDecoder<TTo>, 'decode'>): VariableSizeDecoder<TTo>;\nexport function createDecoder<TTo>(\n    decoder: Omit<FixedSizeDecoder<TTo>, 'decode'> | Omit<VariableSizeDecoder<TTo>, 'decode'>,\n): Decoder<TTo>;\nexport function createDecoder<TTo>(\n    decoder: Omit<FixedSizeDecoder<TTo>, 'decode'> | Omit<VariableSizeDecoder<TTo>, 'decode'>,\n): Decoder<TTo> {\n    return Object.freeze({\n        ...decoder,\n        decode: (bytes, offset = 0) => decoder.read(bytes, offset)[0],\n    });\n}\n\n/** Fills the missing `encode` and `decode` function using the existing `write` and `read` functions. */\nexport function createCodec<TFrom, TTo extends TFrom = TFrom, TSize extends number = number>(\n    codec: Omit<FixedSizeCodec<TFrom, TTo, TSize>, 'decode' | 'encode'>,\n): FixedSizeCodec<TFrom, TTo, TSize>;\nexport function createCodec<TFrom, TTo extends TFrom = TFrom>(\n    codec: Omit<VariableSizeCodec<TFrom, TTo>, 'decode' | 'encode'>,\n): VariableSizeCodec<TFrom, TTo>;\nexport function createCodec<TFrom, TTo extends TFrom = TFrom>(\n    codec:\n        | Omit<FixedSizeCodec<TFrom, TTo>, 'decode' | 'encode'>\n        | Omit<VariableSizeCodec<TFrom, TTo>, 'decode' | 'encode'>,\n): Codec<TFrom, TTo>;\nexport function createCodec<TFrom, TTo extends TFrom = TFrom>(\n    codec:\n        | Omit<FixedSizeCodec<TFrom, TTo>, 'decode' | 'encode'>\n        | Omit<VariableSizeCodec<TFrom, TTo>, 'decode' | 'encode'>,\n): Codec<TFrom, TTo> {\n    return Object.freeze({\n        ...codec,\n        decode: (bytes, offset = 0) => codec.read(bytes, offset)[0],\n        encode: value => {\n            const bytes = new Uint8Array(getEncodedSize(value, codec));\n            codec.write(value, bytes, 0);\n            return bytes;\n        },\n    });\n}\n\nexport function isFixedSize<TFrom, TSize extends number>(\n    encoder: FixedSizeEncoder<TFrom, TSize> | VariableSizeEncoder<TFrom>,\n): encoder is FixedSizeEncoder<TFrom, TSize>;\nexport function isFixedSize<TTo, TSize extends number>(\n    decoder: FixedSizeDecoder<TTo, TSize> | VariableSizeDecoder<TTo>,\n): decoder is FixedSizeDecoder<TTo, TSize>;\nexport function isFixedSize<TFrom, TTo extends TFrom, TSize extends number>(\n    codec: FixedSizeCodec<TFrom, TTo, TSize> | VariableSizeCodec<TFrom, TTo>,\n): codec is FixedSizeCodec<TFrom, TTo, TSize>;\nexport function isFixedSize<TSize extends number>(\n    codec: { fixedSize: TSize } | { maxSize?: number },\n): codec is { fixedSize: TSize };\nexport function isFixedSize(codec: { fixedSize: number } | { maxSize?: number }): codec is { fixedSize: number } {\n    return 'fixedSize' in codec && typeof codec.fixedSize === 'number';\n}\n\nexport function assertIsFixedSize<TFrom, TSize extends number>(\n    encoder: FixedSizeEncoder<TFrom, TSize> | VariableSizeEncoder<TFrom>,\n): asserts encoder is FixedSizeEncoder<TFrom, TSize>;\nexport function assertIsFixedSize<TTo, TSize extends number>(\n    decoder: FixedSizeDecoder<TTo, TSize> | VariableSizeDecoder<TTo>,\n): asserts decoder is FixedSizeDecoder<TTo, TSize>;\nexport function assertIsFixedSize<TFrom, TTo extends TFrom, TSize extends number>(\n    codec: FixedSizeCodec<TFrom, TTo, TSize> | VariableSizeCodec<TFrom, TTo>,\n): asserts codec is FixedSizeCodec<TFrom, TTo, TSize>;\nexport function assertIsFixedSize<TSize extends number>(\n    codec: { fixedSize: TSize } | { maxSize?: number },\n): asserts codec is { fixedSize: TSize };\nexport function assertIsFixedSize(\n    codec: { fixedSize: number } | { maxSize?: number },\n): asserts codec is { fixedSize: number } {\n    if (!isFixedSize(codec)) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_FIXED_LENGTH);\n    }\n}\n\nexport function isVariableSize<TFrom>(encoder: Encoder<TFrom>): encoder is VariableSizeEncoder<TFrom>;\nexport function isVariableSize<TTo>(decoder: Decoder<TTo>): decoder is VariableSizeDecoder<TTo>;\nexport function isVariableSize<TFrom, TTo extends TFrom>(\n    codec: Codec<TFrom, TTo>,\n): codec is VariableSizeCodec<TFrom, TTo>;\nexport function isVariableSize(codec: { fixedSize: number } | { maxSize?: number }): codec is { maxSize?: number };\nexport function isVariableSize(codec: { fixedSize: number } | { maxSize?: number }): codec is { maxSize?: number } {\n    return !isFixedSize(codec);\n}\n\nexport function assertIsVariableSize<T>(encoder: Encoder<T>): asserts encoder is VariableSizeEncoder<T>;\nexport function assertIsVariableSize<T>(decoder: Decoder<T>): asserts decoder is VariableSizeDecoder<T>;\nexport function assertIsVariableSize<TFrom, TTo extends TFrom>(\n    codec: Codec<TFrom, TTo>,\n): asserts codec is VariableSizeCodec<TFrom, TTo>;\nexport function assertIsVariableSize(\n    codec: { fixedSize: number } | { maxSize?: number },\n): asserts codec is { maxSize?: number };\nexport function assertIsVariableSize(\n    codec: { fixedSize: number } | { maxSize?: number },\n): asserts codec is { maxSize?: number } {\n    if (!isVariableSize(codec)) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_VARIABLE_LENGTH);\n    }\n}\n", "import {\n    SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH,\n    SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH,\n    SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH,\n    SolanaError,\n} from '@solana/errors';\n\nimport {\n    Codec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    isFixedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from './codec';\n\n/**\n * Combines an encoder and a decoder into a codec.\n * The encoder and decoder must have the same fixed size, max size and description.\n * If a description is provided, it will override the encoder and decoder descriptions.\n */\nexport function combineCodec<TFrom, TTo extends TFrom, TSize extends number>(\n    encoder: FixedSizeEncoder<TFrom, TSize>,\n    decoder: FixedSizeDecoder<TTo, TSize>,\n): FixedSizeCodec<TFrom, TTo, TSize>;\nexport function combineCodec<TFrom, TTo extends TFrom>(\n    encoder: VariableSizeEncoder<TFrom>,\n    decoder: VariableSizeDecoder<TTo>,\n): VariableSizeCodec<TFrom, TTo>;\nexport function combineCodec<TFrom, TTo extends TFrom>(\n    encoder: Encoder<TFrom>,\n    decoder: Decoder<TTo>,\n): Codec<TFrom, TTo>;\nexport function combineCodec<TFrom, TTo extends TFrom>(\n    encoder: Encoder<TFrom>,\n    decoder: Decoder<TTo>,\n): Codec<TFrom, TTo> {\n    if (isFixedSize(encoder) !== isFixedSize(decoder)) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_SIZE_COMPATIBILITY_MISMATCH);\n    }\n\n    if (isFixedSize(encoder) && isFixedSize(decoder) && encoder.fixedSize !== decoder.fixedSize) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_FIXED_SIZE_MISMATCH, {\n            decoderFixedSize: decoder.fixedSize,\n            encoderFixedSize: encoder.fixedSize,\n        });\n    }\n\n    if (!isFixedSize(encoder) && !isFixedSize(decoder) && encoder.maxSize !== decoder.maxSize) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__ENCODER_DECODER_MAX_SIZE_MISMATCH, {\n            decoderMaxSize: decoder.maxSize,\n            encoderMaxSize: encoder.maxSize,\n        });\n    }\n\n    return {\n        ...decoder,\n        ...encoder,\n        decode: decoder.decode,\n        encode: encoder.encode,\n        read: decoder.read,\n        write: encoder.write,\n    };\n}\n", "import { assertByteArrayHasEnoughBytesForCodec } from './assertions';\nimport { fixBytes } from './bytes';\nimport {\n    Codec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    isFixedSize,\n    Offset,\n} from './codec';\nimport { combineCodec } from './combine-codec';\n\n/**\n * Creates a fixed-size encoder from a given encoder.\n *\n * @param encoder - The encoder to wrap into a fixed-size encoder.\n * @param fixedBytes - The fixed number of bytes to write.\n */\nexport function fixEncoder<TFrom, TSize extends number>(\n    encoder: Encoder<TFrom>,\n    fixedBytes: TSize,\n): FixedSizeEncoder<TFrom, TSize> {\n    return createEncoder({\n        fixedSize: fixedBytes,\n        write: (value: TFrom, bytes: Uint8Array, offset: Offset) => {\n            // Here we exceptionally use the `encode` function instead of the `write`\n            // function as using the nested `write` function on a fixed-sized byte\n            // array may result in a out-of-bounds error on the nested encoder.\n            const variableByteArray = encoder.encode(value);\n            const fixedByteArray =\n                variableByteArray.length > fixedBytes ? variableByteArray.slice(0, fixedBytes) : variableByteArray;\n            bytes.set(fixedByteArray, offset);\n            return offset + fixedBytes;\n        },\n    });\n}\n\n/**\n * Creates a fixed-size decoder from a given decoder.\n *\n * @param decoder - The decoder to wrap into a fixed-size decoder.\n * @param fixedBytes - The fixed number of bytes to read.\n */\nexport function fixDecoder<TTo, TSize extends number>(\n    decoder: Decoder<TTo>,\n    fixedBytes: TSize,\n): FixedSizeDecoder<TTo, TSize> {\n    return createDecoder({\n        fixedSize: fixedBytes,\n        read: (bytes: Uint8Array, offset: Offset) => {\n            assertByteArrayHasEnoughBytesForCodec('fixCodec', fixedBytes, bytes, offset);\n            // Slice the byte array to the fixed size if necessary.\n            if (offset > 0 || bytes.length > fixedBytes) {\n                bytes = bytes.slice(offset, offset + fixedBytes);\n            }\n            // If the nested decoder is fixed-size, pad and truncate the byte array accordingly.\n            if (isFixedSize(decoder)) {\n                bytes = fixBytes(bytes, decoder.fixedSize);\n            }\n            // Decode the value using the nested decoder.\n            const [value] = decoder.read(bytes, 0);\n            return [value, offset + fixedBytes];\n        },\n    });\n}\n\n/**\n * Creates a fixed-size codec from a given codec.\n *\n * @param codec - The codec to wrap into a fixed-size codec.\n * @param fixedBytes - The fixed number of bytes to read/write.\n */\nexport function fixCodec<TFrom, TTo extends TFrom, TSize extends number>(\n    codec: Codec<TFrom, TTo>,\n    fixedBytes: TSize,\n): FixedSizeCodec<TFrom, TTo, TSize> {\n    return combineCodec(fixEncoder(codec, fixedBytes), fixDecoder(codec, fixedBytes));\n}\n", "import {\n    Codec,\n    createCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    isVariableSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from './codec';\n\n/**\n * Converts an encoder A to a encoder B by mapping their values.\n */\nexport function mapEncoder<TOldFrom, TNewFrom, TSize extends number>(\n    encoder: FixedSizeEncoder<TOldFrom, TSize>,\n    unmap: (value: TNewFrom) => TOldFrom,\n): FixedSizeEncoder<TNewFrom, TSize>;\nexport function mapEncoder<TOldFrom, TNewFrom>(\n    encoder: VariableSizeEncoder<TOldFrom>,\n    unmap: (value: TNewFrom) => TOldFrom,\n): VariableSizeEncoder<TNewFrom>;\nexport function mapEncoder<TOldFrom, TNewFrom>(\n    encoder: Encoder<TOldFrom>,\n    unmap: (value: TNewFrom) => TOldFrom,\n): Encoder<TNewFrom>;\nexport function mapEncoder<TOldFrom, TNewFrom>(\n    encoder: Encoder<TOldFrom>,\n    unmap: (value: TNewFrom) => TOldFrom,\n): Encoder<TNewFrom> {\n    return createEncoder({\n        ...(isVariableSize(encoder)\n            ? { ...encoder, getSizeFromValue: (value: TNewFrom) => encoder.getSizeFromValue(unmap(value)) }\n            : encoder),\n        write: (value: TNewFrom, bytes, offset) => encoder.write(unmap(value), bytes, offset),\n    });\n}\n\n/**\n * Converts an decoder A to a decoder B by mapping their values.\n */\nexport function mapDecoder<TOldTo, TNewTo, TSize extends number>(\n    decoder: FixedSizeDecoder<TOldTo, TSize>,\n    map: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): FixedSizeDecoder<TNewTo, TSize>;\nexport function mapDecoder<TOldTo, TNewTo>(\n    decoder: VariableSizeDecoder<TOldTo>,\n    map: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): VariableSizeDecoder<TNewTo>;\nexport function mapDecoder<TOldTo, TNewTo>(\n    decoder: Decoder<TOldTo>,\n    map: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): Decoder<TNewTo>;\nexport function mapDecoder<TOldTo, TNewTo>(\n    decoder: Decoder<TOldTo>,\n    map: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): Decoder<TNewTo> {\n    return createDecoder({\n        ...decoder,\n        read: (bytes: Uint8Array, offset) => {\n            const [value, newOffset] = decoder.read(bytes, offset);\n            return [map(value, bytes, offset), newOffset];\n        },\n    });\n}\n\n/**\n * Converts a codec A to a codec B by mapping their values.\n */\nexport function mapCodec<TOldFrom, TNewFrom, TTo extends TNewFrom & TOldFrom, TSize extends number>(\n    codec: FixedSizeCodec<TOldFrom, TTo, TSize>,\n    unmap: (value: TNewFrom) => TOldFrom,\n): FixedSizeCodec<TNewFrom, TTo, TSize>;\nexport function mapCodec<TOldFrom, TNewFrom, TTo extends TNewFrom & TOldFrom>(\n    codec: VariableSizeCodec<TOldFrom, TTo>,\n    unmap: (value: TNewFrom) => TOldFrom,\n): VariableSizeCodec<TNewFrom, TTo>;\nexport function mapCodec<TOldFrom, TNewFrom, TTo extends TNewFrom & TOldFrom>(\n    codec: Codec<TOldFrom, TTo>,\n    unmap: (value: TNewFrom) => TOldFrom,\n): Codec<TNewFrom, TTo>;\nexport function mapCodec<TOldFrom, TNewFrom, TOldTo extends TOldFrom, TNewTo extends TNewFrom, TSize extends number>(\n    codec: FixedSizeCodec<TOldFrom, TOldTo, TSize>,\n    unmap: (value: TNewFrom) => TOldFrom,\n    map: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): FixedSizeCodec<TNewFrom, TNewTo, TSize>;\nexport function mapCodec<TOldFrom, TNewFrom, TOldTo extends TOldFrom, TNewTo extends TNewFrom>(\n    codec: VariableSizeCodec<TOldFrom, TOldTo>,\n    unmap: (value: TNewFrom) => TOldFrom,\n    map: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): VariableSizeCodec<TNewFrom, TNewTo>;\nexport function mapCodec<TOldFrom, TNewFrom, TOldTo extends TOldFrom, TNewTo extends TNewFrom>(\n    codec: Codec<TOldFrom, TOldTo>,\n    unmap: (value: TNewFrom) => TOldFrom,\n    map: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): Codec<TNewFrom, TNewTo>;\nexport function mapCodec<TOldFrom, TNewFrom, TOldTo extends TOldFrom, TNewTo extends TNewFrom>(\n    codec: Codec<TOldFrom, TOldTo>,\n    unmap: (value: TNewFrom) => TOldFrom,\n    map?: (value: TOldTo, bytes: Uint8Array, offset: number) => TNewTo,\n): Codec<TNewFrom, TNewTo> {\n    return createCodec({\n        ...mapEncoder(codec, unmap),\n        read: map ? mapDecoder(codec, map).read : (codec.read as unknown as Decoder<TNewTo>['read']),\n    });\n}\n", "import { assertByteArrayOffsetIsNotOutOfRange } from './assertions';\nimport { Codec, createDecoder, createEncoder, Decoder, Encoder, Offset } from './codec';\nimport { combineCodec } from './combine-codec';\n\ntype OffsetConfig = {\n    postOffset?: PostOffsetFunction;\n    preOffset?: PreOffsetFunction;\n};\n\ntype PreOffsetFunctionScope = {\n    /** The entire byte array. */\n    bytes: Uint8Array;\n    /** The original offset prior to encode or decode. */\n    preOffset: Offset;\n    /** Wraps the offset to the byte array length. */\n    wrapBytes: (offset: Offset) => Offset;\n};\n\ntype PreOffsetFunction = (scope: PreOffsetFunctionScope) => Offset;\ntype PostOffsetFunction = (\n    scope: PreOffsetFunctionScope & {\n        /** The modified offset used to encode or decode. */\n        newPreOffset: Offset;\n        /** The original offset returned by the encoder or decoder. */\n        postOffset: Offset;\n    },\n) => Offset;\n\n/**\n * Moves the offset of a given encoder.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function offsetEncoder<TEncoder extends Encoder<any>>(encoder: TEncoder, config: OffsetConfig): TEncoder {\n    return createEncoder({\n        ...encoder,\n        write: (value, bytes, preOffset) => {\n            const wrapBytes = (offset: Offset) => modulo(offset, bytes.length);\n            const newPreOffset = config.preOffset ? config.preOffset({ bytes, preOffset, wrapBytes }) : preOffset;\n            assertByteArrayOffsetIsNotOutOfRange('offsetEncoder', newPreOffset, bytes.length);\n            const postOffset = encoder.write(value, bytes, newPreOffset);\n            const newPostOffset = config.postOffset\n                ? config.postOffset({ bytes, newPreOffset, postOffset, preOffset, wrapBytes })\n                : postOffset;\n            assertByteArrayOffsetIsNotOutOfRange('offsetEncoder', newPostOffset, bytes.length);\n            return newPostOffset;\n        },\n    }) as TEncoder;\n}\n\n/**\n * Moves the offset of a given decoder.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function offsetDecoder<TDecoder extends Decoder<any>>(decoder: TDecoder, config: OffsetConfig): TDecoder {\n    return createDecoder({\n        ...decoder,\n        read: (bytes, preOffset) => {\n            const wrapBytes = (offset: Offset) => modulo(offset, bytes.length);\n            const newPreOffset = config.preOffset ? config.preOffset({ bytes, preOffset, wrapBytes }) : preOffset;\n            assertByteArrayOffsetIsNotOutOfRange('offsetDecoder', newPreOffset, bytes.length);\n            const [value, postOffset] = decoder.read(bytes, newPreOffset);\n            const newPostOffset = config.postOffset\n                ? config.postOffset({ bytes, newPreOffset, postOffset, preOffset, wrapBytes })\n                : postOffset;\n            assertByteArrayOffsetIsNotOutOfRange('offsetDecoder', newPostOffset, bytes.length);\n            return [value, newPostOffset];\n        },\n    }) as TDecoder;\n}\n\n/**\n * Moves the offset of a given codec.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function offsetCodec<TCodec extends Codec<any>>(codec: TCodec, config: OffsetConfig): TCodec {\n    return combineCodec(offsetEncoder(codec, config), offsetDecoder(codec, config)) as TCodec;\n}\n\n/** A modulo function that handles negative dividends and zero divisors. */\nfunction modulo(dividend: number, divisor: number) {\n    if (divisor === 0) return 0;\n    return ((dividend % divisor) + divisor) % divisor;\n}\n", "import { SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, SolanaError } from '@solana/errors';\n\nimport {\n    Codec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    isFixedSize,\n} from './codec';\nimport { combineCodec } from './combine-codec';\n\n/**\n * Updates the size of a given encoder.\n */\nexport function resizeEncoder<TFrom, TSize extends number, TNewSize extends number>(\n    encoder: FixedSizeEncoder<TFrom, TSize>,\n    resize: (size: TSize) => TNewSize,\n): FixedSizeEncoder<TFrom, TNewSize>;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resizeEncoder<TEncoder extends Encoder<any>>(\n    encoder: TEncoder,\n    resize: (size: number) => number,\n): TEncoder;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resizeEncoder<TEncoder extends Encoder<any>>(\n    encoder: TEncoder,\n    resize: (size: number) => number,\n): TEncoder {\n    if (isFixedSize(encoder)) {\n        const fixedSize = resize(encoder.fixedSize);\n        if (fixedSize < 0) {\n            throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n                bytesLength: fixedSize,\n                codecDescription: 'resizeEncoder',\n            });\n        }\n        return createEncoder({ ...encoder, fixedSize }) as TEncoder;\n    }\n    return createEncoder({\n        ...encoder,\n        getSizeFromValue: value => {\n            const newSize = resize(encoder.getSizeFromValue(value));\n            if (newSize < 0) {\n                throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n                    bytesLength: newSize,\n                    codecDescription: 'resizeEncoder',\n                });\n            }\n            return newSize;\n        },\n    }) as TEncoder;\n}\n\n/**\n * Updates the size of a given decoder.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function resizeDecoder<TFrom, TSize extends number, TNewSize extends number>(\n    decoder: FixedSizeDecoder<TFrom, TSize>,\n    resize: (size: TSize) => TNewSize,\n): FixedSizeDecoder<TFrom, TNewSize>;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resizeDecoder<TDecoder extends Decoder<any>>(\n    decoder: TDecoder,\n    resize: (size: number) => number,\n): TDecoder;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resizeDecoder<TDecoder extends Decoder<any>>(\n    decoder: TDecoder,\n    resize: (size: number) => number,\n): TDecoder {\n    if (isFixedSize(decoder)) {\n        const fixedSize = resize(decoder.fixedSize);\n        if (fixedSize < 0) {\n            throw new SolanaError(SOLANA_ERROR__CODECS__EXPECTED_POSITIVE_BYTE_LENGTH, {\n                bytesLength: fixedSize,\n                codecDescription: 'resizeDecoder',\n            });\n        }\n        return createDecoder({ ...decoder, fixedSize }) as TDecoder;\n    }\n    return decoder;\n}\n\n/**\n * Updates the size of a given codec.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resizeCodec<TFrom, TTo extends TFrom, TSize extends number, TNewSize extends number>(\n    codec: FixedSizeCodec<TFrom, TTo, TSize>,\n    resize: (size: TSize) => TNewSize,\n): FixedSizeCodec<TFrom, TTo, TNewSize>;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resizeCodec<TCodec extends Codec<any>>(codec: TCodec, resize: (size: number) => number): TCodec;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resizeCodec<TCodec extends Codec<any>>(codec: TCodec, resize: (size: number) => number): TCodec {\n    return combineCodec(resizeEncoder(codec, resize), resizeDecoder(codec, resize)) as TCodec;\n}\n", "import { Codec, Decoder, Encoder, Offset } from './codec';\nimport { combineCodec } from './combine-codec';\nimport { offsetDecoder, offsetEncoder } from './offset-codec';\nimport { resizeDecoder, resizeEncoder } from './resize-codec';\n\n/**\n * Adds left padding to the given encoder.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function padLeftEncoder<TEncoder extends Encoder<any>>(encoder: TEncoder, offset: Offset): TEncoder {\n    return offsetEncoder(\n        resizeEncoder(encoder, size => size + offset),\n        { preOffset: ({ preOffset }) => preOffset + offset },\n    );\n}\n\n/**\n * Adds right padding to the given encoder.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function padRightEncoder<TEncoder extends Encoder<any>>(encoder: TEncoder, offset: Offset): TEncoder {\n    return offsetEncoder(\n        resizeEncoder(encoder, size => size + offset),\n        { postOffset: ({ postOffset }) => postOffset + offset },\n    );\n}\n\n/**\n * Adds left padding to the given decoder.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function padLeftDecoder<TDecoder extends Decoder<any>>(decoder: TDecoder, offset: Offset): TDecoder {\n    return offsetDecoder(\n        resizeDecoder(decoder, size => size + offset),\n        { preOffset: ({ preOffset }) => preOffset + offset },\n    );\n}\n\n/**\n * Adds right padding to the given decoder.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function padRightDecoder<TDecoder extends Decoder<any>>(decoder: TDecoder, offset: Offset): TDecoder {\n    return offsetDecoder(\n        resizeDecoder(decoder, size => size + offset),\n        { postOffset: ({ postOffset }) => postOffset + offset },\n    );\n}\n\n/**\n * Adds left padding to the given codec.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function padLeftCodec<TCodec extends Codec<any>>(codec: TCodec, offset: Offset): TCodec {\n    return combineCodec(padLeftEncoder(codec, offset), padLeftDecoder(codec, offset)) as TCodec;\n}\n\n/**\n * Adds right padding to the given codec.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function padRightCodec<TCodec extends Codec<any>>(codec: TCodec, offset: Offset): TCodec {\n    return combineCodec(padRightEncoder(codec, offset), padRightDecoder(codec, offset)) as TCodec;\n}\n", "import {\n    assertIsFixedSize,\n    createDecoder,\n    createEncoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n} from './codec';\nimport { combineCodec } from './combine-codec';\n\n/**\n * Reverses the bytes of a fixed-size encoder.\n */\nexport function reverseEncoder<TFrom, TSize extends number>(\n    encoder: FixedSizeEncoder<TFrom, TSize>,\n): FixedSizeEncoder<TFrom, TSize> {\n    assertIsFixedSize(encoder);\n    return createEncoder({\n        ...encoder,\n        write: (value: TFrom, bytes, offset) => {\n            const newOffset = encoder.write(value, bytes, offset);\n            const slice = bytes.slice(offset, offset + encoder.fixedSize).reverse();\n            bytes.set(slice, offset);\n            return newOffset;\n        },\n    });\n}\n\n/**\n * Reverses the bytes of a fixed-size decoder.\n */\nexport function reverseDecoder<TTo, TSize extends number>(\n    decoder: FixedSizeDecoder<TTo, TSize>,\n): FixedSizeDecoder<TTo, TSize> {\n    assertIsFixedSize(decoder);\n    return createDecoder({\n        ...decoder,\n        read: (bytes, offset) => {\n            const reverseEnd = offset + decoder.fixedSize;\n            if (offset === 0 && bytes.length === reverseEnd) {\n                return decoder.read(bytes.reverse(), offset);\n            }\n            const reversedBytes = bytes.slice();\n            reversedBytes.set(bytes.slice(offset, reverseEnd).reverse(), offset);\n            return decoder.read(reversedBytes, offset);\n        },\n    });\n}\n\n/**\n * Reverses the bytes of a fixed-size codec.\n */\nexport function reverseCodec<TFrom, TTo extends TFrom, TSize extends number>(\n    codec: FixedSizeCodec<TFrom, TTo, TSize>,\n): FixedSizeCodec<TFrom, TTo, TSize> {\n    return combineCodec(reverseEncoder(codec), reverseDecoder(codec));\n}\n", "import { SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, SolanaError } from '@solana/errors';\n\n/**\n * Asserts that a given number is between a given range.\n */\nexport function assertNumberIsBetweenForCodec(\n    codecDescription: string,\n    min: bigint | number,\n    max: bigint | number,\n    value: bigint | number,\n) {\n    if (value < min || value > max) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n            codecDescription,\n            max,\n            min,\n            value,\n        });\n    }\n}\n", "import { Codec, Decoder, Encoder, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\n/** Defines a encoder for numbers and bigints. */\nexport type NumberEncoder = Encoder<bigint | number> | Encoder<number>;\n\n/** Defines a fixed-size encoder for numbers and bigints. */\nexport type FixedSizeNumberEncoder<TSize extends number = number> =\n    | FixedSizeEncoder<bigint | number, TSize>\n    | FixedSizeEncoder<number, TSize>;\n\n/** Defines a decoder for numbers and bigints. */\nexport type NumberDecoder = Decoder<bigint> | Decoder<number>;\n\n/** Defines a fixed-size decoder for numbers and bigints. */\nexport type FixedSizeNumberDecoder<TSize extends number = number> =\n    | FixedSizeDecoder<bigint, TSize>\n    | FixedSizeDecoder<number, TSize>;\n\n/** Defines a codec for numbers and bigints. */\nexport type NumberCodec = Codec<bigint | number, bigint> | Codec<number>;\n\n/** Defines a fixed-size codec for numbers and bigints. */\nexport type FixedSizeNumberCodec<TSize extends number = number> =\n    | FixedSizeCodec<bigint | number, bigint, TSize>\n    | FixedSizeCodec<number, number, TSize>;\n\n/** Defines the config for number codecs that use more than one byte. */\nexport type NumberCodecConfig = {\n    /**\n     * Whether the serializer should use little-endian or big-endian encoding.\n     * @defaultValue `Endian.LITTLE`\n     */\n    endian?: Endian;\n};\n\n/** Defines the endianness of a number serializer. */\nexport enum Endian {\n    LITTLE,\n    BIG,\n}\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getF32Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<number, 4> =>\n    numberEncoderFactory({\n        config,\n        name: 'f32',\n        set: (view, value, le) => view.setFloat32(0, value, le),\n        size: 4,\n    });\n\nexport const getF32Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 4> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getFloat32(0, le),\n        name: 'f32',\n        size: 4,\n    });\n\nexport const getF32Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<number, number, 4> =>\n    combineCodec(getF32Encoder(config), getF32Decoder(config));\n", "import {\n    assertByteArrayHasEnoughBytesForCodec,\n    assertByteArrayIsNotEmptyForCodec,\n    createDecoder,\n    createEncoder,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    Offset,\n} from '@solana/codecs-core';\n\nimport { assertNumberIsBetweenForCodec } from './assertions';\nimport { Endian, NumberCodecConfig } from './common';\n\ntype NumberFactorySharedInput<TSize extends number> = {\n    config?: NumberCodecConfig;\n    name: string;\n    size: TSize;\n};\n\ntype NumberFactoryEncoderInput<TFrom, TSize extends number> = NumberFactorySharedInput<TSize> & {\n    range?: [bigint | number, bigint | number];\n    set: (view: DataView, value: TFrom, littleEndian?: boolean) => void;\n};\n\ntype NumberFactoryDecoderInput<TTo, TSize extends number> = NumberFactorySharedInput<TSize> & {\n    get: (view: DataView, littleEndian?: boolean) => TTo;\n};\n\nfunction isLittleEndian(config?: NumberCodecConfig): boolean {\n    return config?.endian === Endian.BIG ? false : true;\n}\n\nexport function numberEncoderFactory<TFrom extends bigint | number, TSize extends number>(\n    input: NumberFactoryEncoderInput<TFrom, TSize>,\n): FixedSizeEncoder<TFrom, TSize> {\n    return createEncoder({\n        fixedSize: input.size,\n        write(value: TFrom, bytes: Uint8Array, offset: Offset): Offset {\n            if (input.range) {\n                assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n            }\n            const arrayBuffer = new ArrayBuffer(input.size);\n            input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n            bytes.set(new Uint8Array(arrayBuffer), offset);\n            return offset + input.size;\n        },\n    });\n}\n\nexport function numberDecoderFactory<TTo extends bigint | number, TSize extends number>(\n    input: NumberFactoryDecoderInput<TTo, TSize>,\n): FixedSizeDecoder<TTo, TSize> {\n    return createDecoder({\n        fixedSize: input.size,\n        read(bytes, offset = 0): [TTo, number] {\n            assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n            assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n            const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n            return [input.get(view, isLittleEndian(input.config)), offset + input.size];\n        },\n    });\n}\n\n/**\n * Helper function to ensure that the ArrayBuffer is converted properly from a Uint8Array\n * Source: https://stackoverflow.com/questions/37228285/uint8array-to-arraybuffer\n */\nfunction toArrayBuffer(bytes: Uint8Array, offset?: number, length?: number): ArrayBuffer {\n    const bytesOffset = bytes.byteOffset + (offset ?? 0);\n    const bytesLength = length ?? bytes.byteLength;\n    return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getF64Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<number, 8> =>\n    numberEncoderFactory({\n        config,\n        name: 'f64',\n        set: (view, value, le) => view.setFloat64(0, value, le),\n        size: 8,\n    });\n\nexport const getF64Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 8> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getFloat64(0, le),\n        name: 'f64',\n        size: 8,\n    });\n\nexport const getF64Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<number, number, 8> =>\n    combineCodec(getF64Encoder(config), getF64Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI128Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 16> =>\n    numberEncoderFactory({\n        config,\n        name: 'i128',\n        range: [-BigInt('0x7fffffffffffffffffffffffffffffff') - 1n, BigInt('0x7fffffffffffffffffffffffffffffff')],\n        set: (view, value, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const rightMask = 0xffffffffffffffffn;\n            view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n            view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n        },\n        size: 16,\n    });\n\nexport const getI128Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 16> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const left = view.getBigInt64(leftOffset, le);\n            const right = view.getBigUint64(rightOffset, le);\n            return (left << 64n) + right;\n        },\n        name: 'i128',\n        size: 16,\n    });\n\nexport const getI128Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 16> =>\n    combineCodec(getI128Encoder(config), getI128Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI16Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<number, 2> =>\n    numberEncoderFactory({\n        config,\n        name: 'i16',\n        range: [-Number('0x7fff') - 1, Number('0x7fff')],\n        set: (view, value, le) => view.setInt16(0, value, le),\n        size: 2,\n    });\n\nexport const getI16Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 2> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getInt16(0, le),\n        name: 'i16',\n        size: 2,\n    });\n\nexport const getI16Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<number, number, 2> =>\n    combineCodec(getI16Encoder(config), getI16Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI32Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<number, 4> =>\n    numberEncoderFactory({\n        config,\n        name: 'i32',\n        range: [-Number('0x7fffffff') - 1, Number('0x7fffffff')],\n        set: (view, value, le) => view.setInt32(0, value, le),\n        size: 4,\n    });\n\nexport const getI32Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 4> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getInt32(0, le),\n        name: 'i32',\n        size: 4,\n    });\n\nexport const getI32Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<number, number, 4> =>\n    combineCodec(getI32Encoder(config), getI32Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI64Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 8> =>\n    numberEncoderFactory({\n        config,\n        name: 'i64',\n        range: [-BigInt('0x7fffffffffffffff') - 1n, BigInt('0x7fffffffffffffff')],\n        set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),\n        size: 8,\n    });\n\nexport const getI64Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 8> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getBigInt64(0, le),\n        name: 'i64',\n        size: 8,\n    });\n\nexport const getI64Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 8> =>\n    combineCodec(getI64Encoder(config), getI64Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI8Encoder = (): FixedSizeEncoder<number, 1> =>\n    numberEncoderFactory({\n        name: 'i8',\n        range: [-Number('0x7f') - 1, Number('0x7f')],\n        set: (view, value) => view.setInt8(0, value),\n        size: 1,\n    });\n\nexport const getI8Decoder = (): FixedSizeDecoder<number, 1> =>\n    numberDecoderFactory({\n        get: view => view.getInt8(0),\n        name: 'i8',\n        size: 1,\n    });\n\nexport const getI8Codec = (): FixedSizeCodec<number, number, 1> => combineCodec(getI8Encoder(), getI8Decoder());\n", "import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Offset,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { assertNumberIsBetweenForCodec } from './assertions';\n\n/**\n * Encodes short u16 numbers.\n * @see {@link getShortU16Codec} for a more detailed description.\n */\nexport const getShortU16Encoder = (): VariableSizeEncoder<number> =>\n    createEncoder({\n        getSizeFromValue: (value: number): number => {\n            if (value <= 0b01111111) return 1;\n            if (value <= 0b0011111111111111) return 2;\n            return 3;\n        },\n        maxSize: 3,\n        write: (value: number, bytes: Uint8Array, offset: Offset): Offset => {\n            assertNumberIsBetweenForCodec('shortU16', 0, 65535, value);\n            const shortU16Bytes = [0];\n            for (let ii = 0; ; ii += 1) {\n                // Shift the bits of the value over such that the next 7 bits are at the right edge.\n                const alignedValue = value >> (ii * 7);\n                if (alignedValue === 0) {\n                    // No more bits to consume.\n                    break;\n                }\n                // Extract those 7 bits using a mask.\n                const nextSevenBits = 0b1111111 & alignedValue;\n                shortU16Bytes[ii] = nextSevenBits;\n                if (ii > 0) {\n                    // Set the continuation bit of the previous slice.\n                    shortU16Bytes[ii - 1] |= 0b10000000;\n                }\n            }\n            bytes.set(shortU16Bytes, offset);\n            return offset + shortU16Bytes.length;\n        },\n    });\n\n/**\n * Decodes short u16 numbers.\n * @see {@link getShortU16Codec} for a more detailed description.\n */\nexport const getShortU16Decoder = (): VariableSizeDecoder<number> =>\n    createDecoder({\n        maxSize: 3,\n        read: (bytes: Uint8Array, offset): [number, Offset] => {\n            let value = 0;\n            let byteCount = 0;\n            while (++byteCount) {\n                const byteIndex = byteCount - 1;\n                const currentByte = bytes[offset + byteIndex];\n                const nextSevenBits = 0b1111111 & currentByte;\n                // Insert the next group of seven bits into the correct slot of the output value.\n                value |= nextSevenBits << (byteIndex * 7);\n                if ((currentByte & 0b10000000) === 0) {\n                    // This byte does not have its continuation bit set. We're done.\n                    break;\n                }\n            }\n            return [value, offset + byteCount];\n        },\n    });\n\n/**\n * Encodes and decodes short u16 numbers.\n *\n * Short u16 numbers are the same as u16, but serialized with 1 to 3 bytes.\n * If the value is above 0x7f, the top bit is set and the remaining\n * value is stored in the next bytes. Each byte follows the same\n * pattern until the 3rd byte. The 3rd byte, if needed, uses\n * all 8 bits to store the last byte of the original value.\n */\nexport const getShortU16Codec = (): VariableSizeCodec<number> =>\n    combineCodec(getShortU16Encoder(), getShortU16Decoder());\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU128Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 16> =>\n    numberEncoderFactory({\n        config,\n        name: 'u128',\n        range: [0n, BigInt('0xffffffffffffffffffffffffffffffff')],\n        set: (view, value, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const rightMask = 0xffffffffffffffffn;\n            view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n            view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n        },\n        size: 16,\n    });\n\nexport const getU128Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 16> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const left = view.getBigUint64(leftOffset, le);\n            const right = view.getBigUint64(rightOffset, le);\n            return (left << 64n) + right;\n        },\n        name: 'u128',\n        size: 16,\n    });\n\nexport const getU128Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 16> =>\n    combineCodec(getU128Encoder(config), getU128Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU16Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<number, 2> =>\n    numberEncoderFactory({\n        config,\n        name: 'u16',\n        range: [0, Number('0xffff')],\n        set: (view, value, le) => view.setUint16(0, value, le),\n        size: 2,\n    });\n\nexport const getU16Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 2> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getUint16(0, le),\n        name: 'u16',\n        size: 2,\n    });\n\nexport const getU16Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<number, number, 2> =>\n    combineCodec(getU16Encoder(config), getU16Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU32Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<number, 4> =>\n    numberEncoderFactory({\n        config,\n        name: 'u32',\n        range: [0, Number('0xffffffff')],\n        set: (view, value, le) => view.setUint32(0, value, le),\n        size: 4,\n    });\n\nexport const getU32Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 4> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getUint32(0, le),\n        name: 'u32',\n        size: 4,\n    });\n\nexport const getU32Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<number, number, 4> =>\n    combineCodec(getU32Encoder(config), getU32Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU64Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 8> =>\n    numberEncoderFactory({\n        config,\n        name: 'u64',\n        range: [0n, BigInt('0xffffffffffffffff')],\n        set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),\n        size: 8,\n    });\n\nexport const getU64Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 8> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getBigUint64(0, le),\n        name: 'u64',\n        size: 8,\n    });\n\nexport const getU64Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 8> =>\n    combineCodec(getU64Encoder(config), getU64Decoder(config));\n", "import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU8Encoder = (): FixedSizeEncoder<number, 1> =>\n    numberEncoderFactory({\n        name: 'u8',\n        range: [0, Number('0xff')],\n        set: (view, value) => view.setUint8(0, value),\n        size: 1,\n    });\n\nexport const getU8Decoder = (): FixedSizeDecoder<number, 1> =>\n    numberDecoderFactory({\n        get: view => view.getUint8(0),\n        name: 'u8',\n        size: 1,\n    });\n\nexport const getU8Codec = (): FixedSizeCodec<number, number, 1> => combineCodec(getU8Encoder(), getU8Decoder());\n", "import {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { getU32Decoder, getU32Encoder, NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\nimport { assertValidNumberOfItemsForCodec } from './assertions';\nimport { getFixedSize, getMaxSize } from './utils';\n\n/**\n * Represents all the size options for array-like codecs\n * — i.e. `array`, `map` and `set`.\n *\n * It can be one of the following:\n * - a {@link NumberCodec} that prefixes its content with its size.\n * - a fixed number of items.\n * - or `'remainder'` to infer the number of items by dividing\n *   the rest of the byte array by the fixed size of its item.\n *   Note that this option is only available for fixed-size items.\n */\nexport type ArrayLikeCodecSize<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> =\n    | TPrefix\n    | number\n    | 'remainder';\n\n/** Defines the configs for array codecs. */\nexport type ArrayCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The size of the array.\n     * @defaultValue u32 prefix.\n     */\n    size?: ArrayLikeCodecSize<TPrefix>;\n};\n\n/**\n * Encodes an array of items.\n *\n * @param item - The encoder to use for the array's items.\n * @param config - A set of config for the encoder.\n */\nexport function getArrayEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: ArrayCodecConfig<NumberEncoder> & { size: 0 },\n): FixedSizeEncoder<TFrom[], 0>;\nexport function getArrayEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: ArrayCodecConfig<NumberEncoder> & { size: number },\n): FixedSizeEncoder<TFrom[]>;\nexport function getArrayEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config?: ArrayCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<TFrom[]>;\nexport function getArrayEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: ArrayCodecConfig<NumberEncoder> = {},\n): Encoder<TFrom[]> {\n    const size = config.size ?? getU32Encoder();\n    const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n    const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? undefined;\n\n    return createEncoder({\n        ...(fixedSize !== null\n            ? { fixedSize }\n            : {\n                  getSizeFromValue: (array: TFrom[]) => {\n                      const prefixSize = typeof size === 'object' ? getEncodedSize(array.length, size) : 0;\n                      return prefixSize + [...array].reduce((all, value) => all + getEncodedSize(value, item), 0);\n                  },\n                  maxSize,\n              }),\n        write: (array: TFrom[], bytes, offset) => {\n            if (typeof size === 'number') {\n                assertValidNumberOfItemsForCodec('array', size, array.length);\n            }\n            if (typeof size === 'object') {\n                offset = size.write(array.length, bytes, offset);\n            }\n            array.forEach(value => {\n                offset = item.write(value, bytes, offset);\n            });\n            return offset;\n        },\n    });\n}\n\n/**\n * Decodes an array of items.\n *\n * @param item - The encoder to use for the array's items.\n * @param config - A set of config for the encoder.\n */\nexport function getArrayDecoder<TTo>(\n    item: Decoder<TTo>,\n    config: ArrayCodecConfig<NumberDecoder> & { size: 0 },\n): FixedSizeDecoder<TTo[], 0>;\nexport function getArrayDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: ArrayCodecConfig<NumberDecoder> & { size: number },\n): FixedSizeDecoder<TTo[]>;\nexport function getArrayDecoder<TTo>(\n    item: Decoder<TTo>,\n    config?: ArrayCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<TTo[]>;\nexport function getArrayDecoder<TTo>(item: Decoder<TTo>, config: ArrayCodecConfig<NumberDecoder> = {}): Decoder<TTo[]> {\n    const size = config.size ?? getU32Decoder();\n    const itemSize = getFixedSize(item);\n    const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n    const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? undefined;\n\n    return createDecoder({\n        ...(fixedSize !== null ? { fixedSize } : { maxSize }),\n        read: (bytes: Uint8Array, offset) => {\n            const array: TTo[] = [];\n            if (typeof size === 'object' && bytes.slice(offset).length === 0) {\n                return [array, offset];\n            }\n\n            if (size === 'remainder') {\n                while (offset < bytes.length) {\n                    const [value, newOffset] = item.read(bytes, offset);\n                    offset = newOffset;\n                    array.push(value);\n                }\n                return [array, offset];\n            }\n\n            const [resolvedSize, newOffset] = typeof size === 'number' ? [size, offset] : size.read(bytes, offset);\n            offset = newOffset;\n            for (let i = 0; i < resolvedSize; i += 1) {\n                const [value, newOffset] = item.read(bytes, offset);\n                offset = newOffset;\n                array.push(value);\n            }\n            return [array, offset];\n        },\n    });\n}\n\n/**\n * Creates a codec for an array of items.\n *\n * @param item - The codec to use for the array's items.\n * @param config - A set of config for the codec.\n */\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: ArrayCodecConfig<NumberCodec> & { size: 0 },\n): FixedSizeCodec<TFrom[], TTo[], 0>;\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: ArrayCodecConfig<NumberCodec> & { size: number },\n): FixedSizeCodec<TFrom[], TTo[]>;\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config?: ArrayCodecConfig<NumberCodec>,\n): VariableSizeCodec<TFrom[], TTo[]>;\nexport function getArrayCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: ArrayCodecConfig<NumberCodec> = {},\n): Codec<TFrom[], TTo[]> {\n    return combineCodec(getArrayEncoder(item, config as object), getArrayDecoder(item, config as object));\n}\n\nfunction computeArrayLikeCodecSize(size: number | object | 'remainder', itemSize: number | null): number | null {\n    if (typeof size !== 'number') return null;\n    if (size === 0) return 0;\n    return itemSize === null ? null : itemSize * size;\n}\n", "import { SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, SolanaError } from '@solana/errors';\n\n/** Checks the number of items in an array-like structure is expected. */\nexport function assertValidNumberOfItemsForCodec(\n    codecDescription: string,\n    expected: bigint | number,\n    actual: bigint | number,\n) {\n    if (expected !== actual) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n            actual,\n            codecDescription,\n            expected,\n        });\n    }\n}\n", "import { isFixedSize } from '@solana/codecs-core';\n\nexport function maxCodecSizes(sizes: (number | null)[]): number | null {\n    return sizes.reduce(\n        (all, size) => (all === null || size === null ? null : Math.max(all, size)),\n        0 as number | null,\n    );\n}\n\nexport function sumCodecSizes(sizes: (number | null)[]): number | null {\n    return sizes.reduce((all, size) => (all === null || size === null ? null : all + size), 0 as number | null);\n}\n\nexport function getFixedSize(codec: { fixedSize: number } | { maxSize?: number }): number | null {\n    return isFixedSize(codec) ? codec.fixedSize : null;\n}\n\nexport function getMaxSize(codec: { fixedSize: number } | { maxSize?: number }): number | null {\n    return isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n", "import {\n    assertByteArrayHasEnoughBytesForCodec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n} from '@solana/codecs-core';\n\n/** Defines the config for bitArray codecs. */\nexport type BitArrayCodecConfig = {\n    /**\n     * Whether to read the bits in reverse order.\n     * @defaultValue `false`\n     */\n    backward?: boolean;\n};\n\n/**\n * Encodes an array of booleans into bits.\n *\n * @param size - The amount of bytes to use for the bit array.\n * @param config - A set of config for the encoder.\n */\nexport function getBitArrayEncoder<TSize extends number>(\n    size: TSize,\n    config: BitArrayCodecConfig | boolean = {},\n): FixedSizeEncoder<boolean[], TSize> {\n    const parsedConfig: BitArrayCodecConfig = typeof config === 'boolean' ? { backward: config } : config;\n    const backward = parsedConfig.backward ?? false;\n    return createEncoder({\n        fixedSize: size,\n        write(value: boolean[], bytes, offset) {\n            const bytesToAdd: number[] = [];\n\n            for (let i = 0; i < size; i += 1) {\n                let byte = 0;\n                for (let j = 0; j < 8; j += 1) {\n                    const feature = Number(value[i * 8 + j] ?? 0);\n                    byte |= feature << (backward ? j : 7 - j);\n                }\n                if (backward) {\n                    bytesToAdd.unshift(byte);\n                } else {\n                    bytesToAdd.push(byte);\n                }\n            }\n\n            bytes.set(bytesToAdd, offset);\n            return size;\n        },\n    });\n}\n\n/**\n * Decodes bits into an array of booleans.\n *\n * @param size - The amount of bytes to use for the bit array.\n * @param config - A set of config for the decoder.\n */\nexport function getBitArrayDecoder<TSize extends number>(\n    size: TSize,\n    config: BitArrayCodecConfig | boolean = {},\n): FixedSizeDecoder<boolean[], TSize> {\n    const parsedConfig: BitArrayCodecConfig = typeof config === 'boolean' ? { backward: config } : config;\n    const backward = parsedConfig.backward ?? false;\n    return createDecoder({\n        fixedSize: size,\n        read(bytes, offset) {\n            assertByteArrayHasEnoughBytesForCodec('bitArray', size, bytes, offset);\n            const booleans: boolean[] = [];\n            let slice = bytes.slice(offset, offset + size);\n            slice = backward ? slice.reverse() : slice;\n\n            slice.forEach(byte => {\n                for (let i = 0; i < 8; i += 1) {\n                    if (backward) {\n                        booleans.push(Boolean(byte & 1));\n                        byte >>= 1;\n                    } else {\n                        booleans.push(Boolean(byte & 0b1000_0000));\n                        byte <<= 1;\n                    }\n                }\n            });\n\n            return [booleans, offset + size];\n        },\n    });\n}\n\n/**\n * An array of boolean codec that converts booleans to bits and vice versa.\n *\n * @param size - The amount of bytes to use for the bit array.\n * @param config - A set of config for the codec.\n */\nexport function getBitArrayCodec<TSize extends number>(\n    size: TSize,\n    config: BitArrayCodecConfig | boolean = {},\n): FixedSizeCodec<boolean[], boolean[], TSize> {\n    return combineCodec(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\n", "import {\n    assertIsFixedSize,\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    mapDecoder,\n    mapEncoder,\n} from '@solana/codecs-core';\nimport {\n    FixedSizeNumberCodec,\n    FixedSizeNumberDecoder,\n    FixedSizeNumberEncoder,\n    getU8Decoder,\n    getU8Encoder,\n    NumberCodec,\n    NumberDecoder,\n    NumberEncoder,\n} from '@solana/codecs-numbers';\n\n/** Defines the config for boolean codecs. */\nexport type BooleanCodecConfig<TSize extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The number codec to delegate to.\n     * @defaultValue u8 size.\n     */\n    size?: TSize;\n};\n\n/**\n * Encodes booleans.\n *\n * @param config - A set of config for the encoder.\n */\nexport function getBooleanEncoder(): FixedSizeEncoder<boolean, 1>;\nexport function getBooleanEncoder<TSize extends number>(\n    config: BooleanCodecConfig<NumberEncoder> & { size: FixedSizeNumberEncoder<TSize> },\n): FixedSizeEncoder<boolean, TSize>;\nexport function getBooleanEncoder(config: BooleanCodecConfig<NumberEncoder>): Encoder<boolean>;\nexport function getBooleanEncoder(config: BooleanCodecConfig<NumberEncoder> = {}): Encoder<boolean> {\n    const size = config.size ?? getU8Encoder();\n    assertIsFixedSize(size);\n    return mapEncoder(size, (value: boolean) => (value ? 1 : 0));\n}\n\n/**\n * Decodes booleans.\n *\n * @param config - A set of config for the decoder.\n */\nexport function getBooleanDecoder(): FixedSizeDecoder<boolean, 1>;\nexport function getBooleanDecoder<TSize extends number>(\n    config: BooleanCodecConfig<NumberDecoder> & { size: FixedSizeNumberDecoder<TSize> },\n): FixedSizeDecoder<boolean, TSize>;\nexport function getBooleanDecoder(config: BooleanCodecConfig<NumberDecoder>): Decoder<boolean>;\nexport function getBooleanDecoder(config: BooleanCodecConfig<NumberDecoder> = {}): Decoder<boolean> {\n    const size = config.size ?? getU8Decoder();\n    assertIsFixedSize(size);\n    return mapDecoder(size, (value: bigint | number): boolean => Number(value) === 1);\n}\n\n/**\n * Creates a boolean codec.\n *\n * @param config - A set of config for the codec.\n */\nexport function getBooleanCodec(): FixedSizeCodec<boolean, boolean, 1>;\nexport function getBooleanCodec<TSize extends number>(\n    config: BooleanCodecConfig<NumberCodec> & { size: FixedSizeNumberCodec<TSize> },\n): FixedSizeCodec<boolean, boolean, TSize>;\nexport function getBooleanCodec(config: BooleanCodecConfig<NumberCodec>): Codec<boolean>;\nexport function getBooleanCodec(config: BooleanCodecConfig<NumberCodec> = {}): Codec<boolean> {\n    return combineCodec(getBooleanEncoder(config), getBooleanDecoder(config));\n}\n", "import {\n    assertByteArrayHasEnoughBytesForCodec,\n    assertByteArrayIsNotEmptyForCodec,\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    fixDecoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    fixEncoder,\n    getEncodedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\n/** Defines the config for bytes codecs. */\nexport type BytesCodecConfig<TSize extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The size of the byte array. It can be one of the following:\n     * - a {@link NumberSerializer} that prefixes the byte array with its size.\n     * - a fixed number of bytes.\n     * - or `'variable'` to use the rest of the byte array.\n     * @defaultValue `'variable'`\n     */\n    size?: TSize | number | 'variable';\n};\n\n/**\n * Encodes sized bytes.\n *\n * @param config - A set of config for the encoder.\n */\nexport function getBytesEncoder<TSize extends number>(\n    config: BytesCodecConfig<NumberEncoder> & { size: TSize },\n): FixedSizeEncoder<Uint8Array, TSize>;\nexport function getBytesEncoder(config?: BytesCodecConfig<NumberEncoder>): VariableSizeEncoder<Uint8Array>;\nexport function getBytesEncoder(config: BytesCodecConfig<NumberEncoder> = {}): Encoder<Uint8Array> {\n    const size = config.size ?? 'variable';\n\n    const byteEncoder: Encoder<Uint8Array> = createEncoder({\n        getSizeFromValue: (value: Uint8Array) => value.length,\n        write: (value: Uint8Array, bytes, offset) => {\n            bytes.set(value, offset);\n            return offset + value.length;\n        },\n    });\n\n    if (size === 'variable') {\n        return byteEncoder;\n    }\n\n    if (typeof size === 'number') {\n        return fixEncoder(byteEncoder, size);\n    }\n\n    return createEncoder({\n        getSizeFromValue: (value: Uint8Array) => getEncodedSize(value.length, size) + value.length,\n        write: (value: Uint8Array, bytes, offset) => {\n            offset = size.write(value.length, bytes, offset);\n            return byteEncoder.write(value, bytes, offset);\n        },\n    });\n}\n\n/**\n * Decodes sized bytes.\n *\n * @param config - A set of config for the decoder.\n */\nexport function getBytesDecoder<TSize extends number>(\n    config: BytesCodecConfig<NumberDecoder> & { size: TSize },\n): FixedSizeDecoder<Uint8Array, TSize>;\nexport function getBytesDecoder(config?: BytesCodecConfig<NumberDecoder>): VariableSizeDecoder<Uint8Array>;\nexport function getBytesDecoder(config: BytesCodecConfig<NumberDecoder> = {}): Decoder<Uint8Array> {\n    const size = config.size ?? 'variable';\n\n    const byteDecoder: Decoder<Uint8Array> = createDecoder({\n        read: (bytes: Uint8Array, offset) => {\n            const slice = bytes.slice(offset);\n            return [slice, offset + slice.length];\n        },\n    });\n\n    if (size === 'variable') {\n        return byteDecoder;\n    }\n\n    if (typeof size === 'number') {\n        return fixDecoder(byteDecoder, size);\n    }\n\n    return createDecoder({\n        read: (bytes: Uint8Array, offset) => {\n            assertByteArrayIsNotEmptyForCodec('bytes', bytes, offset);\n            const [lengthBigInt, lengthOffset] = size.read(bytes, offset);\n            const length = Number(lengthBigInt);\n            offset = lengthOffset;\n            const contentBytes = bytes.slice(offset, offset + length);\n            assertByteArrayHasEnoughBytesForCodec('bytes', length, contentBytes);\n            const [value, contentOffset] = byteDecoder.read(contentBytes, 0);\n            offset += contentOffset;\n            return [value, offset];\n        },\n    });\n}\n\n/**\n * Creates a sized bytes codec.\n *\n * @param config - A set of config for the codec.\n */\nexport function getBytesCodec<TSize extends number>(\n    config: BytesCodecConfig<NumberCodec> & { size: TSize },\n): FixedSizeCodec<Uint8Array, Uint8Array, TSize>;\nexport function getBytesCodec(config?: BytesCodecConfig<NumberCodec>): VariableSizeCodec<Uint8Array>;\nexport function getBytesCodec(config: BytesCodecConfig<NumberCodec> = {}): Codec<Uint8Array> {\n    return combineCodec(getBytesEncoder(config), getBytesDecoder(config));\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n    assertByteArrayIsNotEmptyForCodec,\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    getEncodedSize,\n    isFixedSize,\n} from '@solana/codecs-core';\nimport { getU8Decoder, getU8Encoder, NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\nimport {\n    SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE,\n    SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT,\n    SolanaError,\n} from '@solana/errors';\n\nimport { getMaxSize, maxCodecSizes, sumCodecSizes } from './utils';\n\n/**\n * Defines a data enum using discriminated union types.\n *\n * @example\n * ```ts\n * type WebPageEvent =\n *   | { __kind: 'pageview', url: string }\n *   | { __kind: 'click', x: number, y: number };\n * ```\n */\nexport type DataEnum = { __kind: string };\n\n/**\n * Extracts a variant from a data enum.\n *\n * @example\n * ```ts\n * type WebPageEvent =\n *   | { __kind: 'pageview', url: string }\n *   | { __kind: 'click', x: number, y: number };\n * type ClickEvent = GetDataEnumKind<WebPageEvent, 'click'>;\n * // -> { __kind: 'click', x: number, y: number }\n * ```\n */\nexport type GetDataEnumKind<T extends DataEnum, K extends T['__kind']> = Extract<T, { __kind: K }>;\n\n/**\n * Extracts a variant from a data enum without its discriminator.\n *\n * @example\n * ```ts\n * type WebPageEvent =\n *   | { __kind: 'pageview', url: string }\n *   | { __kind: 'click', x: number, y: number };\n * type ClickEvent = GetDataEnumKindContent<WebPageEvent, 'click'>;\n * // -> { x: number, y: number }\n * ```\n */\nexport type GetDataEnumKindContent<T extends DataEnum, K extends T['__kind']> = Omit<\n    Extract<T, { __kind: K }>,\n    '__kind'\n>;\n\n/** Defines the config for data enum codecs. */\nexport type DataEnumCodecConfig<TDiscriminator = NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The codec to use for the enum discriminator prefixing the variant.\n     * @defaultValue u8 prefix.\n     */\n    size?: TDiscriminator;\n};\n\ntype Variants<T> = readonly (readonly [string, T])[];\ntype ArrayIndices<T extends readonly unknown[]> = Exclude<Partial<T>['length'], T['length']> & number;\n\ntype GetEncoderTypeFromVariants<TVariants extends Variants<Encoder<any>>> = {\n    [I in ArrayIndices<TVariants>]: (TVariants[I][1] extends Encoder<infer TFrom>\n        ? TFrom extends object\n            ? TFrom\n            : object\n        : never) & { __kind: TVariants[I][0] };\n}[ArrayIndices<TVariants>];\n\ntype GetDecoderTypeFromVariants<TVariants extends Variants<Decoder<any>>> = {\n    [I in ArrayIndices<TVariants>]: (TVariants[I][1] extends Decoder<infer TTo>\n        ? TTo extends object\n            ? TTo\n            : object\n        : never) & { __kind: TVariants[I][0] };\n}[ArrayIndices<TVariants>];\n\n/**\n * Creates a data enum encoder.\n *\n * @param variants - The variant encoders of the data enum.\n * @param config - A set of config for the encoder.\n */\nexport function getDataEnumEncoder<const TVariants extends Variants<Encoder<any>>>(\n    variants: TVariants,\n    config: DataEnumCodecConfig<NumberEncoder> = {},\n): Encoder<GetEncoderTypeFromVariants<TVariants>> {\n    type TFrom = GetEncoderTypeFromVariants<TVariants>;\n    const prefix = config.size ?? getU8Encoder();\n    const fixedSize = getDataEnumFixedSize(variants, prefix);\n    return createEncoder({\n        ...(fixedSize !== null\n            ? { fixedSize }\n            : {\n                  getSizeFromValue: (variant: TFrom) => {\n                      const discriminator = getVariantDiscriminator(variants, variant);\n                      const variantEncoder = variants[discriminator][1];\n                      return (\n                          getEncodedSize(discriminator, prefix) +\n                          getEncodedSize(variant as TFrom & void, variantEncoder)\n                      );\n                  },\n                  maxSize: getDataEnumMaxSize(variants, prefix),\n              }),\n        write: (variant: TFrom, bytes, offset) => {\n            const discriminator = getVariantDiscriminator(variants, variant);\n            offset = prefix.write(discriminator, bytes, offset);\n            const variantEncoder = variants[discriminator][1];\n            return variantEncoder.write(variant as TFrom & void, bytes, offset);\n        },\n    });\n}\n\n/**\n * Creates a data enum decoder.\n *\n * @param variants - The variant decoders of the data enum.\n * @param config - A set of config for the decoder.\n */\nexport function getDataEnumDecoder<const TVariants extends Variants<Decoder<any>>>(\n    variants: TVariants,\n    config: DataEnumCodecConfig<NumberDecoder> = {},\n): Decoder<GetDecoderTypeFromVariants<TVariants>> {\n    type TTo = GetDecoderTypeFromVariants<TVariants>;\n    const prefix = config.size ?? getU8Decoder();\n    const fixedSize = getDataEnumFixedSize(variants, prefix);\n    return createDecoder({\n        ...(fixedSize !== null ? { fixedSize } : { maxSize: getDataEnumMaxSize(variants, prefix) }),\n        read: (bytes: Uint8Array, offset) => {\n            assertByteArrayIsNotEmptyForCodec('dataEnum', bytes, offset);\n            const [discriminator, dOffset] = prefix.read(bytes, offset);\n            offset = dOffset;\n            const variantField = variants[Number(discriminator)] ?? null;\n            if (!variantField) {\n                throw new SolanaError(SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n                    discriminator,\n                    maxRange: variants.length - 1,\n                    minRange: 0,\n                });\n            }\n            const [variant, vOffset] = variantField[1].read(bytes, offset);\n            offset = vOffset;\n            return [{ __kind: variantField[0], ...(variant ?? {}) } as TTo, offset];\n        },\n    });\n}\n\n/**\n * Creates a data enum codec.\n *\n * @param variants - The variant codecs of the data enum.\n * @param config - A set of config for the codec.\n */\nexport function getDataEnumCodec<const TVariants extends Variants<Codec<any, any>>>(\n    variants: TVariants,\n    config: DataEnumCodecConfig<NumberCodec> = {},\n): Codec<\n    GetEncoderTypeFromVariants<TVariants>,\n    GetDecoderTypeFromVariants<TVariants> & GetEncoderTypeFromVariants<TVariants>\n> {\n    return combineCodec(\n        getDataEnumEncoder(variants, config),\n        getDataEnumDecoder(variants, config) as Decoder<\n            GetDecoderTypeFromVariants<TVariants> & GetEncoderTypeFromVariants<TVariants>\n        >,\n    );\n}\n\nfunction getDataEnumFixedSize<const TVariants extends Variants<Decoder<any> | Encoder<any>>>(\n    variants: TVariants,\n    prefix: object | { fixedSize: number },\n): number | null {\n    if (variants.length === 0) return isFixedSize(prefix) ? prefix.fixedSize : null;\n    if (!isFixedSize(variants[0][1])) return null;\n    const variantSize = variants[0][1].fixedSize;\n    const sameSizedVariants = variants.every(\n        variant => isFixedSize(variant[1]) && variant[1].fixedSize === variantSize,\n    );\n    if (!sameSizedVariants) return null;\n    return isFixedSize(prefix) ? prefix.fixedSize + variantSize : null;\n}\n\nfunction getDataEnumMaxSize<const TVariants extends Variants<Decoder<any> | Encoder<any>>>(\n    variants: TVariants,\n    prefix: object | { fixedSize: number },\n) {\n    const maxVariantSize = maxCodecSizes(variants.map(([, codec]) => getMaxSize(codec)));\n    return sumCodecSizes([getMaxSize(prefix), maxVariantSize]) ?? undefined;\n}\n\nfunction getVariantDiscriminator<const TVariants extends Variants<Decoder<any> | Encoder<any>>>(\n    variants: TVariants,\n    variant: { __kind: string },\n) {\n    const discriminator = variants.findIndex(([key]) => variant.__kind === key);\n    if (discriminator < 0) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT, {\n            value: variant.__kind,\n            variants: variants.map(([key]) => key),\n        });\n    }\n    return discriminator;\n}\n", "import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    mapDecoder,\n    mapEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\nimport { ArrayLikeCodecSize, getArrayDecoder, getArrayEncoder } from './array';\nimport { getTupleDecoder, getTupleEncoder } from './tuple';\n\n/** Defines the config for Map codecs. */\nexport type MapCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The size of the array.\n     * @defaultValue u32 prefix.\n     */\n    size?: ArrayLikeCodecSize<TPrefix>;\n};\n\n/**\n * Creates a encoder for a map.\n *\n * @param key - The encoder to use for the map's keys.\n * @param value - The encoder to use for the map's values.\n * @param config - A set of config for the encoder.\n */\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: Encoder<TFromKey>,\n    value: Encoder<TFromValue>,\n    config: MapCodecConfig<NumberEncoder> & { size: 0 },\n): FixedSizeEncoder<Map<TFromKey, TFromValue>, 0>;\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: FixedSizeEncoder<TFromKey>,\n    value: FixedSizeEncoder<TFromValue>,\n    config: MapCodecConfig<NumberEncoder> & { size: number },\n): FixedSizeEncoder<Map<TFromKey, TFromValue>>;\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: Encoder<TFromKey>,\n    value: Encoder<TFromValue>,\n    config?: MapCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<Map<TFromKey, TFromValue>>;\nexport function getMapEncoder<TFromKey, TFromValue>(\n    key: Encoder<TFromKey>,\n    value: Encoder<TFromValue>,\n    config: MapCodecConfig<NumberEncoder> = {},\n): Encoder<Map<TFromKey, TFromValue>> {\n    return mapEncoder(\n        getArrayEncoder(getTupleEncoder([key, value]), config as object),\n        (map: Map<TFromKey, TFromValue>): [TFromKey, TFromValue][] => [...map.entries()],\n    );\n}\n\n/**\n * Creates a decoder for a map.\n *\n * @param key - The decoder to use for the map's keys.\n * @param value - The decoder to use for the map's values.\n * @param config - A set of config for the decoder.\n */\nexport function getMapDecoder<TToKey, TToValue>(\n    key: Decoder<TToKey>,\n    value: Decoder<TToValue>,\n    config: MapCodecConfig<NumberDecoder> & { size: 0 },\n): FixedSizeDecoder<Map<TToKey, TToValue>, 0>;\nexport function getMapDecoder<TToKey, TToValue>(\n    key: FixedSizeDecoder<TToKey>,\n    value: FixedSizeDecoder<TToValue>,\n    config: MapCodecConfig<NumberDecoder> & { size: number },\n): FixedSizeDecoder<Map<TToKey, TToValue>>;\nexport function getMapDecoder<TToKey, TToValue>(\n    key: Decoder<TToKey>,\n    value: Decoder<TToValue>,\n    config?: MapCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<Map<TToKey, TToValue>>;\nexport function getMapDecoder<TToKey, TToValue>(\n    key: Decoder<TToKey>,\n    value: Decoder<TToValue>,\n    config: MapCodecConfig<NumberDecoder> = {},\n): Decoder<Map<TToKey, TToValue>> {\n    return mapDecoder(\n        getArrayDecoder(getTupleDecoder([key, value]), config as object),\n        (entries: [TToKey, TToValue][]): Map<TToKey, TToValue> => new Map(entries),\n    );\n}\n\n/**\n * Creates a codec for a map.\n *\n * @param key - The codec to use for the map's keys.\n * @param value - The codec to use for the map's values.\n * @param config - A set of config for the codec.\n */\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: Codec<TFromKey, TToKey>,\n    value: Codec<TFromValue, TToValue>,\n    config: MapCodecConfig<NumberCodec> & { size: 0 },\n): FixedSizeCodec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>, 0>;\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: FixedSizeCodec<TFromKey, TToKey>,\n    value: FixedSizeCodec<TFromValue, TToValue>,\n    config: MapCodecConfig<NumberCodec> & { size: number },\n): FixedSizeCodec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>>;\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: Codec<TFromKey, TToKey>,\n    value: Codec<TFromValue, TToValue>,\n    config?: MapCodecConfig<NumberCodec>,\n): VariableSizeCodec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>>;\nexport function getMapCodec<\n    TFromKey,\n    TFromValue,\n    TToKey extends TFromKey = TFromKey,\n    TToValue extends TFromValue = TFromValue,\n>(\n    key: Codec<TFromKey, TToKey>,\n    value: Codec<TFromValue, TToValue>,\n    config: MapCodecConfig<NumberCodec> = {},\n): Codec<Map<TFromKey, TFromValue>, Map<TToKey, TToValue>> {\n    return combineCodec(getMapEncoder(key, value, config as object), getMapDecoder(key, value, config as object));\n}\n", "import {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { assertValidNumberOfItemsForCodec } from './assertions';\nimport { getFixedSize, getMaxSize, sumCodecSizes } from './utils';\n\ntype WrapInFixedSizeEncoder<TFrom> = {\n    [P in keyof TFrom]: FixedSizeEncoder<TFrom[P]>;\n};\ntype WrapInEncoder<TFrom> = {\n    [P in keyof TFrom]: Encoder<TFrom[P]>;\n};\ntype WrapInFixedSizeDecoder<TTo> = {\n    [P in keyof TTo]: FixedSizeDecoder<TTo[P]>;\n};\ntype WrapInDecoder<TTo> = {\n    [P in keyof TTo]: Decoder<TTo[P]>;\n};\ntype WrapInCodec<TFrom, TTo extends TFrom> = {\n    [P in keyof TFrom]: Codec<TFrom[P], TTo[P]>;\n};\ntype WrapInFixedSizeCodec<TFrom, TTo extends TFrom> = {\n    [P in keyof TFrom]: FixedSizeCodec<TFrom[P], TTo[P]>;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AnyArray = any[];\n\n/**\n * Creates a encoder for a tuple-like array.\n *\n * @param items - The encoders to use for each item in the tuple.\n */\nexport function getTupleEncoder<TFrom extends AnyArray>(\n    items: WrapInFixedSizeEncoder<[...TFrom]>,\n): FixedSizeEncoder<TFrom>;\nexport function getTupleEncoder<TFrom extends AnyArray>(items: WrapInEncoder<[...TFrom]>): VariableSizeEncoder<TFrom>;\nexport function getTupleEncoder<TFrom extends AnyArray>(items: WrapInEncoder<[...TFrom]>): Encoder<TFrom> {\n    const fixedSize = sumCodecSizes(items.map(getFixedSize));\n    const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? undefined;\n\n    return createEncoder({\n        ...(fixedSize === null\n            ? {\n                  getSizeFromValue: (value: TFrom) =>\n                      items.map((item, index) => getEncodedSize(value[index], item)).reduce((all, one) => all + one, 0),\n                  maxSize,\n              }\n            : { fixedSize }),\n        write: (value: TFrom, bytes, offset) => {\n            assertValidNumberOfItemsForCodec('tuple', items.length, value.length);\n            items.forEach((item, index) => {\n                offset = item.write(value[index], bytes, offset);\n            });\n            return offset;\n        },\n    });\n}\n\n/**\n * Creates a decoder for a tuple-like array.\n *\n * @param items - The decoders to use for each item in the tuple.\n */\nexport function getTupleDecoder<TTo extends AnyArray>(items: WrapInFixedSizeDecoder<[...TTo]>): FixedSizeDecoder<TTo>;\nexport function getTupleDecoder<TTo extends AnyArray>(items: WrapInDecoder<[...TTo]>): VariableSizeDecoder<TTo>;\nexport function getTupleDecoder<TTo extends AnyArray>(items: WrapInDecoder<[...TTo]>): Decoder<TTo> {\n    const fixedSize = sumCodecSizes(items.map(getFixedSize));\n    const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? undefined;\n\n    return createDecoder({\n        ...(fixedSize === null ? { maxSize } : { fixedSize }),\n        read: (bytes: Uint8Array, offset) => {\n            const values = [] as AnyArray as TTo;\n            items.forEach(item => {\n                const [newValue, newOffset] = item.read(bytes, offset);\n                values.push(newValue);\n                offset = newOffset;\n            });\n            return [values, offset];\n        },\n    });\n}\n\n/**\n * Creates a codec for a tuple-like array.\n *\n * @param items - The codecs to use for each item in the tuple.\n */\nexport function getTupleCodec<TFrom extends AnyArray, TTo extends TFrom = TFrom>(\n    items: WrapInFixedSizeCodec<[...TFrom], [...TTo]>,\n): FixedSizeCodec<TFrom, TTo>;\nexport function getTupleCodec<TFrom extends AnyArray, TTo extends TFrom = TFrom>(\n    items: WrapInCodec<[...TFrom], [...TTo]>,\n): VariableSizeCodec<TFrom, TTo>;\nexport function getTupleCodec<TFrom extends AnyArray, TTo extends TFrom = TFrom>(\n    items: WrapInCodec<[...TFrom], [...TTo]>,\n): Codec<TFrom, TTo> {\n    return combineCodec(\n        getTupleEncoder(items as WrapInEncoder<[...TFrom]>),\n        getTupleDecoder(items as WrapInDecoder<[...TTo]>),\n    );\n}\n", "import {\n    assertIsFixedSize,\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    isFixedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport {\n    FixedSizeNumberCodec,\n    FixedSizeNumberDecoder,\n    FixedSizeNumberEncoder,\n    getU8Decoder,\n    getU8Encoder,\n    NumberCodec,\n    NumberDecoder,\n    NumberEncoder,\n} from '@solana/codecs-numbers';\n\nimport { getMaxSize, sumCodecSizes } from './utils';\n\n/** Defines the config for nullable codecs. */\nexport type NullableCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * Whether the item codec should be of fixed size.\n     *\n     * When this is true, a `null` value will skip the bytes that would\n     * have been used for the item. Note that this will only work if the\n     * item codec is of fixed size.\n     * @defaultValue `false`\n     */\n    fixed?: boolean;\n\n    /**\n     * The codec to use for the boolean prefix.\n     * @defaultValue u8 prefix.\n     */\n    prefix?: TPrefix;\n};\n\n/**\n * Creates a encoder for an optional value using `null` as the `None` value.\n *\n * @param item - The encoder to use for the value that may be present.\n * @param config - A set of config for the encoder.\n */\nexport function getNullableEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: NullableCodecConfig<FixedSizeNumberEncoder> & { fixed: true },\n): FixedSizeEncoder<TFrom | null>;\nexport function getNullableEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom, 0>,\n    config?: NullableCodecConfig<FixedSizeNumberEncoder>,\n): FixedSizeEncoder<TFrom | null>;\nexport function getNullableEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config?: NullableCodecConfig<NumberEncoder> & { fixed?: false },\n): VariableSizeEncoder<TFrom | null>;\nexport function getNullableEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: NullableCodecConfig<NumberEncoder> = {},\n): Encoder<TFrom | null> {\n    const prefix = config.prefix ?? getU8Encoder();\n    const fixed = config.fixed ?? false;\n\n    const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n    if (fixed || isZeroSizeItem) {\n        assertIsFixedSize(item);\n        assertIsFixedSize(prefix);\n        const fixedSize = prefix.fixedSize + item.fixedSize;\n        return createEncoder({\n            fixedSize,\n            write: (option: TFrom | null, bytes, offset) => {\n                const prefixOffset = prefix.write(Number(option !== null), bytes, offset);\n                if (option !== null) {\n                    item.write(option, bytes, prefixOffset);\n                }\n                return offset + fixedSize;\n            },\n        });\n    }\n\n    return createEncoder({\n        getSizeFromValue: (option: TFrom | null) =>\n            getEncodedSize(Number(option !== null), prefix) + (option !== null ? getEncodedSize(option, item) : 0),\n        maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? undefined,\n        write: (option: TFrom | null, bytes, offset) => {\n            offset = prefix.write(Number(option !== null), bytes, offset);\n            if (option !== null) {\n                offset = item.write(option, bytes, offset);\n            }\n            return offset;\n        },\n    });\n}\n\n/**\n * Creates a decoder for an optional value using `null` as the `None` value.\n *\n * @param item - The decoder to use for the value that may be present.\n * @param config - A set of config for the decoder.\n */\nexport function getNullableDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: NullableCodecConfig<FixedSizeNumberDecoder> & { fixed: true },\n): FixedSizeDecoder<TTo | null>;\nexport function getNullableDecoder<TTo>(\n    item: FixedSizeDecoder<TTo, 0>,\n    config?: NullableCodecConfig<FixedSizeNumberDecoder>,\n): FixedSizeDecoder<TTo | null>;\nexport function getNullableDecoder<TTo>(\n    item: Decoder<TTo>,\n    config?: NullableCodecConfig<NumberDecoder> & { fixed?: false },\n): VariableSizeDecoder<TTo | null>;\nexport function getNullableDecoder<TTo>(\n    item: Decoder<TTo>,\n    config: NullableCodecConfig<NumberDecoder> = {},\n): Decoder<TTo | null> {\n    const prefix = config.prefix ?? getU8Decoder();\n    const fixed = config.fixed ?? false;\n\n    let fixedSize: number | null = null;\n    const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n    if (fixed || isZeroSizeItem) {\n        assertIsFixedSize(item);\n        assertIsFixedSize(prefix);\n        fixedSize = prefix.fixedSize + item.fixedSize;\n    }\n\n    return createDecoder({\n        ...(fixedSize === null\n            ? { maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? undefined }\n            : { fixedSize }),\n        read: (bytes: Uint8Array, offset) => {\n            if (bytes.length - offset <= 0) {\n                return [null, offset];\n            }\n            const [isSome, prefixOffset] = prefix.read(bytes, offset);\n            if (isSome === 0) {\n                return [null, fixedSize !== null ? offset + fixedSize : prefixOffset];\n            }\n            const [value, newOffset] = item.read(bytes, prefixOffset);\n            return [value, fixedSize !== null ? offset + fixedSize : newOffset];\n        },\n    });\n}\n\n/**\n * Creates a codec for an optional value using `null` as the `None` value.\n *\n * @param item - The codec to use for the value that may be present.\n * @param config - A set of config for the codec.\n */\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: NullableCodecConfig<FixedSizeNumberCodec> & { fixed: true },\n): FixedSizeCodec<TFrom | null, TTo | null>;\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo, 0>,\n    config?: NullableCodecConfig<FixedSizeNumberCodec>,\n): FixedSizeCodec<TFrom | null, TTo | null>;\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config?: NullableCodecConfig<NumberCodec> & { fixed?: false },\n): VariableSizeCodec<TFrom | null, TTo | null>;\nexport function getNullableCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: NullableCodecConfig<NumberCodec> = {},\n): Codec<TFrom | null, TTo | null> {\n    const configCast = config as NullableCodecConfig<NumberCodec> & { fixed?: false };\n    return combineCodec(getNullableEncoder<TFrom>(item, configCast), getNullableDecoder<TTo>(item, configCast));\n}\n", "import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    mapDecoder,\n    mapEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport {\n    FixedSizeNumberCodec,\n    FixedSizeNumberDecoder,\n    FixedSizeNumberEncoder,\n    getU8Decoder,\n    getU8Encoder,\n    NumberCodec,\n    NumberDecoder,\n    NumberEncoder,\n} from '@solana/codecs-numbers';\nimport {\n    SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE,\n    SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT,\n    SolanaError,\n} from '@solana/errors';\n\n/**\n * Defines the \"lookup object\" of a scalar enum.\n *\n * @example\n * ```ts\n * enum Direction { Left, Right };\n * ```\n */\nexport type ScalarEnum = { [key: string]: number | string };\n\n/**\n * Returns the allowed input for a scalar enum.\n *\n * @example\n * ```ts\n * enum Direction { Left, Right };\n * type DirectionInput = ScalarEnumFrom<Direction>; // \"Left\" | \"Right\" | 0 | 1\n * ```\n */\nexport type ScalarEnumFrom<TEnum extends ScalarEnum> = TEnum[keyof TEnum] | keyof TEnum;\n\n/**\n * Returns all the available variants of a scalar enum.\n *\n * @example\n * ```ts\n * enum Direction { Left, Right };\n * type DirectionOutput = ScalarEnumFrom<Direction>; // 0 | 1\n * ```\n */\nexport type ScalarEnumTo<TEnum extends ScalarEnum> = TEnum[keyof TEnum];\n\n/** Defines the config for scalar enum codecs. */\nexport type ScalarEnumCodecConfig<TDiscriminator extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The codec to use for the enum discriminator.\n     * @defaultValue u8 discriminator.\n     */\n    size?: TDiscriminator;\n};\n\n/**\n * Creates a scalar enum encoder.\n *\n * @param constructor - The constructor of the scalar enum.\n * @param config - A set of config for the encoder.\n */\nexport function getScalarEnumEncoder<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n): FixedSizeEncoder<ScalarEnumFrom<TEnum>, 1>;\nexport function getScalarEnumEncoder<TEnum extends ScalarEnum, TSize extends number>(\n    constructor: TEnum,\n    config: ScalarEnumCodecConfig<NumberEncoder> & { size: FixedSizeNumberEncoder<TSize> },\n): FixedSizeEncoder<ScalarEnumFrom<TEnum>, TSize>;\nexport function getScalarEnumEncoder<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n    config?: ScalarEnumCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<ScalarEnumFrom<TEnum>>;\nexport function getScalarEnumEncoder<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n    config: ScalarEnumCodecConfig<NumberEncoder> = {},\n): Encoder<ScalarEnumFrom<TEnum>> {\n    const prefix = config.size ?? getU8Encoder();\n    const { minRange, maxRange, allStringInputs, enumKeys, enumValues } = getScalarEnumStats(constructor);\n    return mapEncoder(prefix, (value: ScalarEnumFrom<TEnum>): number => {\n        const isInvalidNumber = typeof value === 'number' && (value < minRange || value > maxRange);\n        const isInvalidString = typeof value === 'string' && !allStringInputs.includes(value);\n        if (isInvalidNumber || isInvalidString) {\n            throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT, {\n                maxRange,\n                minRange,\n                value,\n                variants: allStringInputs,\n            });\n        }\n        if (typeof value === 'number') return value;\n        const valueIndex = enumValues.indexOf(value as string);\n        if (valueIndex >= 0) return valueIndex;\n        return enumKeys.indexOf(value as string);\n    });\n}\n\n/**\n * Creates a scalar enum decoder.\n *\n * @param constructor - The constructor of the scalar enum.\n * @param config - A set of config for the decoder.\n */\nexport function getScalarEnumDecoder<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n): FixedSizeDecoder<ScalarEnumTo<TEnum>, 1>;\nexport function getScalarEnumDecoder<TEnum extends ScalarEnum, TSize extends number>(\n    constructor: TEnum,\n    config: ScalarEnumCodecConfig<NumberDecoder> & { size: FixedSizeNumberDecoder<TSize> },\n): FixedSizeDecoder<ScalarEnumTo<TEnum>, TSize>;\nexport function getScalarEnumDecoder<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n    config?: ScalarEnumCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<ScalarEnumTo<TEnum>>;\nexport function getScalarEnumDecoder<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n    config: ScalarEnumCodecConfig<NumberDecoder> = {},\n): Decoder<ScalarEnumTo<TEnum>> {\n    const prefix = config.size ?? getU8Decoder();\n    const { minRange, maxRange, enumKeys } = getScalarEnumStats(constructor);\n    return mapDecoder(prefix, (value: bigint | number): ScalarEnumTo<TEnum> => {\n        const valueAsNumber = Number(value);\n        if (valueAsNumber < minRange || valueAsNumber > maxRange) {\n            throw new SolanaError(SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n                discriminator: valueAsNumber,\n                maxRange,\n                minRange,\n            });\n        }\n        return constructor[enumKeys[valueAsNumber]] as ScalarEnumTo<TEnum>;\n    });\n}\n\n/**\n * Creates a scalar enum codec.\n *\n * @param constructor - The constructor of the scalar enum.\n * @param config - A set of config for the codec.\n */\nexport function getScalarEnumCodec<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n): FixedSizeCodec<ScalarEnumFrom<TEnum>, ScalarEnumTo<TEnum>, 1>;\nexport function getScalarEnumCodec<TEnum extends ScalarEnum, TSize extends number>(\n    constructor: TEnum,\n    config: ScalarEnumCodecConfig<NumberCodec> & { size: FixedSizeNumberCodec<TSize> },\n): FixedSizeCodec<ScalarEnumFrom<TEnum>, ScalarEnumTo<TEnum>, TSize>;\nexport function getScalarEnumCodec<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n    config?: ScalarEnumCodecConfig<NumberCodec>,\n): VariableSizeCodec<ScalarEnumFrom<TEnum>, ScalarEnumTo<TEnum>>;\nexport function getScalarEnumCodec<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n    config: ScalarEnumCodecConfig<NumberCodec> = {},\n): Codec<ScalarEnumFrom<TEnum>, ScalarEnumTo<TEnum>> {\n    return combineCodec(getScalarEnumEncoder(constructor, config), getScalarEnumDecoder(constructor, config));\n}\n\nfunction getScalarEnumStats<TEnum extends ScalarEnum>(\n    constructor: TEnum,\n): {\n    allStringInputs: string[];\n    enumKeys: string[];\n    enumValues: (number | string)[];\n    maxRange: number;\n    minRange: number;\n} {\n    const numericValues = Object.values(constructor).filter(v => typeof v === 'number') as number[];\n    const deduplicatedConstructor = Object.fromEntries(\n        Object.entries(constructor).slice(numericValues.length),\n    ) as Record<string, number | string>;\n    const enumKeys = Object.keys(deduplicatedConstructor);\n    const enumValues = Object.values(deduplicatedConstructor);\n    const minRange = 0;\n    const maxRange = enumValues.length - 1;\n    const allStringInputs: string[] = [\n        ...new Set([...enumKeys, ...enumValues.filter((v): v is string => typeof v === 'string')]),\n    ];\n\n    return {\n        allStringInputs,\n        enumKeys,\n        enumValues,\n        maxRange,\n        minRange,\n    };\n}\n", "import {\n    Codec,\n    combineCodec,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    mapDecoder,\n    mapEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\nimport { ArrayLikeCodecSize, getArrayDecoder, getArrayEncoder } from './array';\n\n/** Defines the config for set codecs. */\nexport type SetCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * The size of the set.\n     * @defaultValue u32 prefix.\n     */\n    size?: ArrayLikeCodecSize<TPrefix>;\n};\n\n/**\n * Encodes an set of items.\n *\n * @param item - The encoder to use for the set's items.\n * @param config - A set of config for the encoder.\n */\nexport function getSetEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: SetCodecConfig<NumberEncoder> & { size: 0 },\n): FixedSizeEncoder<Set<TFrom>, 0>;\nexport function getSetEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: SetCodecConfig<NumberEncoder> & { size: number },\n): FixedSizeEncoder<Set<TFrom>>;\nexport function getSetEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config?: SetCodecConfig<NumberEncoder>,\n): VariableSizeEncoder<Set<TFrom>>;\nexport function getSetEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: SetCodecConfig<NumberEncoder> = {},\n): Encoder<Set<TFrom>> {\n    return mapEncoder(getArrayEncoder(item, config as object), (set: Set<TFrom>): TFrom[] => [...set]);\n}\n\n/**\n * Decodes an set of items.\n *\n * @param item - The encoder to use for the set's items.\n * @param config - A set of config for the encoder.\n */\nexport function getSetDecoder<TTo>(\n    item: Decoder<TTo>,\n    config: SetCodecConfig<NumberDecoder> & { size: 0 },\n): FixedSizeDecoder<Set<TTo>, 0>;\nexport function getSetDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: SetCodecConfig<NumberDecoder> & { size: number },\n): FixedSizeDecoder<Set<TTo>>;\nexport function getSetDecoder<TTo>(\n    item: Decoder<TTo>,\n    config?: SetCodecConfig<NumberDecoder>,\n): VariableSizeDecoder<Set<TTo>>;\nexport function getSetDecoder<TTo>(item: Decoder<TTo>, config: SetCodecConfig<NumberDecoder> = {}): Decoder<Set<TTo>> {\n    return mapDecoder(getArrayDecoder(item, config as object), (entries: TTo[]): Set<TTo> => new Set(entries));\n}\n\n/**\n * Creates a codec for an set of items.\n *\n * @param item - The codec to use for the set's items.\n * @param config - A set of config for the codec.\n */\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: SetCodecConfig<NumberCodec> & { size: 0 },\n): FixedSizeCodec<Set<TFrom>, Set<TTo>, 0>;\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: SetCodecConfig<NumberCodec> & { size: number },\n): FixedSizeCodec<Set<TFrom>, Set<TTo>>;\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config?: SetCodecConfig<NumberCodec>,\n): VariableSizeCodec<Set<TFrom>, Set<TTo>>;\nexport function getSetCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: SetCodecConfig<NumberCodec> = {},\n): Codec<Set<TFrom>, Set<TTo>> {\n    return combineCodec(getSetEncoder(item, config as object), getSetDecoder(item, config as object));\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { getFixedSize, getMaxSize, sumCodecSizes } from './utils';\n\ntype Fields<T> = readonly (readonly [string, T])[];\ntype ArrayIndices<T extends readonly unknown[]> = Exclude<Partial<T>['length'], T['length']> & number;\n\ntype GetEncoderTypeFromFields<TFields extends Fields<Encoder<any>>> = {\n    [I in ArrayIndices<TFields> as TFields[I][0]]: TFields[I][1] extends Encoder<infer TFrom> ? TFrom : never;\n};\n\ntype GetDecoderTypeFromFields<TFields extends Fields<Decoder<any>>> = {\n    [I in ArrayIndices<TFields> as TFields[I][0]]: TFields[I][1] extends Decoder<infer TTo> ? TTo : never;\n};\n\n/**\n * Creates a encoder for a custom object.\n *\n * @param fields - The name and encoder of each field.\n */\nexport function getStructEncoder<const TFields extends Fields<FixedSizeEncoder<any>>>(\n    fields: TFields,\n): FixedSizeEncoder<GetEncoderTypeFromFields<TFields>>;\nexport function getStructEncoder<const TFields extends Fields<Encoder<any>>>(\n    fields: TFields,\n): VariableSizeEncoder<GetEncoderTypeFromFields<TFields>>;\nexport function getStructEncoder<const TFields extends Fields<Encoder<any>>>(\n    fields: TFields,\n): Encoder<GetEncoderTypeFromFields<TFields>> {\n    type TFrom = GetEncoderTypeFromFields<TFields>;\n    const fieldCodecs = fields.map(([, codec]) => codec);\n    const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n    const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? undefined;\n\n    return createEncoder({\n        ...(fixedSize === null\n            ? {\n                  getSizeFromValue: (value: TFrom) =>\n                      fields\n                          .map(([key, codec]) => getEncodedSize(value[key as keyof TFrom], codec))\n                          .reduce((all, one) => all + one, 0),\n                  maxSize,\n              }\n            : { fixedSize }),\n        write: (struct: TFrom, bytes, offset) => {\n            fields.forEach(([key, codec]) => {\n                offset = codec.write(struct[key as keyof TFrom], bytes, offset);\n            });\n            return offset;\n        },\n    });\n}\n\n/**\n * Creates a decoder for a custom object.\n *\n * @param fields - The name and decoder of each field.\n */\nexport function getStructDecoder<const TFields extends Fields<FixedSizeDecoder<any>>>(\n    fields: TFields,\n): FixedSizeDecoder<GetDecoderTypeFromFields<TFields>>;\nexport function getStructDecoder<const TFields extends Fields<Decoder<any>>>(\n    fields: TFields,\n): VariableSizeDecoder<GetDecoderTypeFromFields<TFields>>;\nexport function getStructDecoder<const TFields extends Fields<Decoder<any>>>(\n    fields: TFields,\n): Decoder<GetDecoderTypeFromFields<TFields>> {\n    type TTo = GetDecoderTypeFromFields<TFields>;\n    const fieldCodecs = fields.map(([, codec]) => codec);\n    const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n    const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? undefined;\n\n    return createDecoder({\n        ...(fixedSize === null ? { maxSize } : { fixedSize }),\n        read: (bytes: Uint8Array, offset) => {\n            const struct = {} as TTo;\n            fields.forEach(([key, codec]) => {\n                const [value, newOffset] = codec.read(bytes, offset);\n                offset = newOffset;\n                struct[key as keyof TTo] = value;\n            });\n            return [struct, offset];\n        },\n    });\n}\n\n/**\n * Creates a codec for a custom object.\n *\n * @param fields - The name and codec of each field.\n */\nexport function getStructCodec<const TFields extends Fields<FixedSizeCodec<any>>>(\n    fields: TFields,\n): FixedSizeCodec<\n    GetEncoderTypeFromFields<TFields>,\n    GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>\n>;\nexport function getStructCodec<const TFields extends Fields<Codec<any>>>(\n    fields: TFields,\n): VariableSizeCodec<\n    GetEncoderTypeFromFields<TFields>,\n    GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>\n>;\nexport function getStructCodec<const TFields extends Fields<Codec<any>>>(\n    fields: TFields,\n): Codec<GetEncoderTypeFromFields<TFields>, GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>> {\n    return combineCodec(\n        getStructEncoder(fields),\n        getStructDecoder(fields) as Decoder<GetDecoderTypeFromFields<TFields> & GetEncoderTypeFromFields<TFields>>,\n    );\n}\n", "import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n} from '@solana/codecs-core';\n\n/**\n * Creates a void encoder.\n */\nexport function getUnitEncoder(): FixedSizeEncoder<void, 0> {\n    return createEncoder({\n        fixedSize: 0,\n        write: (_value, _bytes, offset) => offset,\n    });\n}\n\n/**\n * Creates a void decoder.\n */\nexport function getUnitDecoder(): FixedSizeDecoder<void, 0> {\n    return createDecoder({\n        fixedSize: 0,\n        read: (_bytes: Uint8Array, offset) => [undefined, offset],\n    });\n}\n\n/**\n * Creates a void codec.\n */\nexport function getUnitCodec(): FixedSizeCodec<void, void, 0> {\n    return combineCodec(getUnitEncoder(), getUnitDecoder());\n}\n", "import { SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, SolanaError } from '@solana/errors';\n\n/**\n * Asserts that a given string matches a given alphabet.\n */\nexport function assertValidBaseString(alphabet: string, testValue: string, givenValue = testValue) {\n    if (!testValue.match(new RegExp(`^[${alphabet}]*$`))) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n            alphabet,\n            base: alphabet.length,\n            value: givenValue,\n        });\n    }\n}\n", "import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { assertValidBaseString } from './assertions';\n\n/**\n * Encodes a string using a custom alphabet by dividing\n * by the base and handling leading zeroes.\n * @see {@link getBaseXCodec} for a more detailed description.\n */\nexport const getBaseXEncoder = (alphabet: string): VariableSizeEncoder<string> => {\n    return createEncoder({\n        getSizeFromValue: (value: string): number => {\n            const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet[0]);\n            if (!tailChars) return value.length;\n\n            const base10Number = getBigIntFromBaseX(tailChars, alphabet);\n            return leadingZeroes.length + Math.ceil(base10Number.toString(16).length / 2);\n        },\n        write(value: string, bytes, offset) {\n            // Check if the value is valid.\n            assertValidBaseString(alphabet, value);\n            if (value === '') return offset;\n\n            // Handle leading zeroes.\n            const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet[0]);\n            if (!tailChars) {\n                bytes.set(new Uint8Array(leadingZeroes.length).fill(0), offset);\n                return offset + leadingZeroes.length;\n            }\n\n            // From baseX to base10.\n            let base10Number = getBigIntFromBaseX(tailChars, alphabet);\n\n            // From base10 to bytes.\n            const tailBytes: number[] = [];\n            while (base10Number > 0n) {\n                tailBytes.unshift(Number(base10Number % 256n));\n                base10Number /= 256n;\n            }\n\n            const bytesToAdd = [...Array(leadingZeroes.length).fill(0), ...tailBytes];\n            bytes.set(bytesToAdd, offset);\n            return offset + bytesToAdd.length;\n        },\n    });\n};\n\n/**\n * Decodes a string using a custom alphabet by dividing\n * by the base and handling leading zeroes.\n * @see {@link getBaseXCodec} for a more detailed description.\n */\nexport const getBaseXDecoder = (alphabet: string): VariableSizeDecoder<string> => {\n    return createDecoder({\n        read(rawBytes, offset): [string, number] {\n            const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n            if (bytes.length === 0) return ['', 0];\n\n            // Handle leading zeroes.\n            let trailIndex = bytes.findIndex(n => n !== 0);\n            trailIndex = trailIndex === -1 ? bytes.length : trailIndex;\n            const leadingZeroes = alphabet[0].repeat(trailIndex);\n            if (trailIndex === bytes.length) return [leadingZeroes, rawBytes.length];\n\n            // From bytes to base10.\n            const base10Number = bytes.slice(trailIndex).reduce((sum, byte) => sum * 256n + BigInt(byte), 0n);\n\n            // From base10 to baseX.\n            const tailChars = getBaseXFromBigInt(base10Number, alphabet);\n\n            return [leadingZeroes + tailChars, rawBytes.length];\n        },\n    });\n};\n\n/**\n * A string codec that requires a custom alphabet and uses\n * the length of that alphabet as the base. It then divides\n * the input by the base as many times as necessary to get\n * the output. It also supports leading zeroes by using the\n * first character of the alphabet as the zero character.\n *\n * This can be used to create codecs such as base10 or base58.\n */\nexport const getBaseXCodec = (alphabet: string): VariableSizeCodec<string> =>\n    combineCodec(getBaseXEncoder(alphabet), getBaseXDecoder(alphabet));\n\nfunction partitionLeadingZeroes(\n    value: string,\n    zeroCharacter: string,\n): [leadingZeros: string, tailChars: string | undefined] {\n    const [leadingZeros, tailChars] = value.split(new RegExp(`((?!${zeroCharacter}).*)`));\n    return [leadingZeros, tailChars];\n}\n\nfunction getBigIntFromBaseX(value: string, alphabet: string): bigint {\n    const base = BigInt(alphabet.length);\n    let sum = 0n;\n    for (const char of value) {\n        sum *= base;\n        sum += BigInt(alphabet.indexOf(char));\n    }\n    return sum;\n}\n\nfunction getBaseXFromBigInt(value: bigint, alphabet: string): string {\n    const base = BigInt(alphabet.length);\n    const tailChars = [];\n    while (value > 0n) {\n        tailChars.unshift(alphabet[Number(value % base)]);\n        value /= base;\n    }\n    return tailChars.join('');\n}\n", "import { getBaseXCodec, getBaseXDecoder, getBaseXEncoder } from './baseX';\n\nconst alphabet = '0123456789';\n\n/** Encodes strings in base10. */\nexport const getBase10Encoder = () => getBaseXEncoder(alphabet);\n\n/** Decodes strings in base10. */\nexport const getBase10Decoder = () => getBaseXDecoder(alphabet);\n\n/** Encodes and decodes strings in base10. */\nexport const getBase10Codec = () => getBaseXCodec(alphabet);\n", "import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { assertValidBaseString } from './assertions';\n\n/** Encodes strings in base16. */\nexport const getBase16Encoder = (): VariableSizeEncoder<string> =>\n    createEncoder({\n        getSizeFromValue: (value: string) => Math.ceil(value.length / 2),\n        write(value: string, bytes, offset) {\n            const lowercaseValue = value.toLowerCase();\n            assertValidBaseString('0123456789abcdef', lowercaseValue, value);\n            const matches = lowercaseValue.match(/.{1,2}/g);\n            const hexBytes = matches ? matches.map((byte: string) => parseInt(byte, 16)) : [];\n            bytes.set(hexBytes, offset);\n            return hexBytes.length + offset;\n        },\n    });\n\n/** Decodes strings in base16. */\nexport const getBase16Decoder = (): VariableSizeDecoder<string> =>\n    createDecoder({\n        read(bytes, offset) {\n            const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n            return [value, bytes.length];\n        },\n    });\n\n/** Encodes and decodes strings in base16. */\nexport const getBase16Codec = (): VariableSizeCodec<string> => combineCodec(getBase16Encoder(), getBase16Decoder());\n", "import { getBaseXCodec, getBaseXDecoder, getBaseXEncoder } from './baseX';\n\nconst alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\n/** Encodes strings in base58. */\nexport const getBase58Encoder = () => getBaseXEncoder(alphabet);\n\n/** Decodes strings in base58. */\nexport const getBase58Decoder = () => getBaseXDecoder(alphabet);\n\n/** Encodes and decodes strings in base58. */\nexport const getBase58Codec = () => getBaseXCodec(alphabet);\n", "import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    mapDecoder,\n    mapEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, SolanaError } from '@solana/errors';\n\nimport { assertValidBaseString } from './assertions';\nimport { getBaseXResliceDecoder, getBaseXResliceEncoder } from './baseX-reslice';\n\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/** Encodes strings in base64. */\nexport const getBase64Encoder = (): VariableSizeEncoder<string> => {\n    if (__BROWSER__) {\n        return createEncoder({\n            getSizeFromValue: (value: string) => {\n                try {\n                    return (atob as Window['atob'])(value).length;\n                } catch (e) {\n                    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n                        alphabet,\n                        base: 64,\n                        value,\n                    });\n                }\n            },\n            write(value: string, bytes, offset) {\n                try {\n                    const bytesToAdd = (atob as Window['atob'])(value)\n                        .split('')\n                        .map(c => c.charCodeAt(0));\n                    bytes.set(bytesToAdd, offset);\n                    return bytesToAdd.length + offset;\n                } catch (e) {\n                    throw new SolanaError(SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {\n                        alphabet,\n                        base: 64,\n                        value,\n                    });\n                }\n            },\n        });\n    }\n\n    if (__NODEJS__) {\n        return createEncoder({\n            getSizeFromValue: (value: string) => Buffer.from(value, 'base64').length,\n            write(value: string, bytes, offset) {\n                assertValidBaseString(alphabet, value.replace(/=/g, ''));\n                const buffer = Buffer.from(value, 'base64');\n                bytes.set(buffer, offset);\n                return buffer.length + offset;\n            },\n        });\n    }\n\n    return mapEncoder(getBaseXResliceEncoder(alphabet, 6), (value: string): string => value.replace(/=/g, ''));\n};\n\n/** Decodes strings in base64. */\nexport const getBase64Decoder = (): VariableSizeDecoder<string> => {\n    if (__BROWSER__) {\n        return createDecoder({\n            read(bytes, offset = 0) {\n                const slice = bytes.slice(offset);\n                const value = (btoa as Window['btoa'])(String.fromCharCode(...slice));\n                return [value, bytes.length];\n            },\n        });\n    }\n\n    if (__NODEJS__) {\n        return createDecoder({\n            read: (bytes, offset = 0) => [Buffer.from(bytes, offset).toString('base64'), bytes.length],\n        });\n    }\n\n    return mapDecoder(getBaseXResliceDecoder(alphabet, 6), (value: string): string =>\n        value.padEnd(Math.ceil(value.length / 4) * 4, '='),\n    );\n};\n\n/** Encodes and decodes strings in base64. */\nexport const getBase64Codec = (): VariableSizeCodec<string> => combineCodec(getBase64Encoder(), getBase64Decoder());\n", "import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { assertValidBaseString } from './assertions';\n\n/**\n * Encodes a string using a custom alphabet by reslicing the bits of the byte array.\n * @see {@link getBaseXResliceCodec} for a more detailed description.\n */\nexport const getBaseXResliceEncoder = (alphabet: string, bits: number): VariableSizeEncoder<string> =>\n    createEncoder({\n        getSizeFromValue: (value: string) => Math.floor((value.length * bits) / 8),\n        write(value: string, bytes, offset) {\n            assertValidBaseString(alphabet, value);\n            if (value === '') return offset;\n            const charIndices = [...value].map(c => alphabet.indexOf(c));\n            const reslicedBytes = reslice(charIndices, bits, 8, false);\n            bytes.set(reslicedBytes, offset);\n            return reslicedBytes.length + offset;\n        },\n    });\n\n/**\n * Decodes a string using a custom alphabet by reslicing the bits of the byte array.\n * @see {@link getBaseXResliceCodec} for a more detailed description.\n */\nexport const getBaseXResliceDecoder = (alphabet: string, bits: number): VariableSizeDecoder<string> =>\n    createDecoder({\n        read(rawBytes, offset = 0): [string, number] {\n            const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);\n            if (bytes.length === 0) return ['', rawBytes.length];\n            const charIndices = reslice([...bytes], 8, bits, true);\n            return [charIndices.map(i => alphabet[i]).join(''), rawBytes.length];\n        },\n    });\n\n/**\n * A string serializer that reslices bytes into custom chunks\n * of bits that are then mapped to a custom alphabet.\n *\n * This can be used to create serializers whose alphabet\n * is a power of 2 such as base16 or base64.\n */\nexport const getBaseXResliceCodec = (alphabet: string, bits: number): VariableSizeCodec<string> =>\n    combineCodec(getBaseXResliceEncoder(alphabet, bits), getBaseXResliceDecoder(alphabet, bits));\n\n/** Helper function to reslice the bits inside bytes. */\nfunction reslice(input: number[], inputBits: number, outputBits: number, useRemainder: boolean): number[] {\n    const output = [];\n    let accumulator = 0;\n    let bitsInAccumulator = 0;\n    const mask = (1 << outputBits) - 1;\n    for (const value of input) {\n        accumulator = (accumulator << inputBits) | value;\n        bitsInAccumulator += inputBits;\n        while (bitsInAccumulator >= outputBits) {\n            bitsInAccumulator -= outputBits;\n            output.push((accumulator >> bitsInAccumulator) & mask);\n        }\n    }\n    if (useRemainder && bitsInAccumulator > 0) {\n        output.push((accumulator << (outputBits - bitsInAccumulator)) & mask);\n    }\n    return output;\n}\n", "/**Removes null characters from a string. */\nexport const removeNullCharacters = (value: string) =>\n    // eslint-disable-next-line no-control-regex\n    value.replace(/\\u0000/g, '');\n\n/** Pads a string with null characters at the end. */\nexport const padNullCharacters = (value: string, chars: number) => value.padEnd(chars, '\\u0000');\n", "import {\n    assertByteArrayHasEnoughBytesForCodec,\n    assertByteArrayIsNotEmptyForCodec,\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    fixDecoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    fixEncoder,\n    getEncodedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { getU32Decoder, getU32Encoder, NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';\n\nimport { getUtf8Decoder, getUtf8Encoder } from './utf8';\n\n/** Defines the config for string codecs. */\nexport type StringCodecConfig<\n    TPrefix extends NumberCodec | NumberDecoder | NumberEncoder,\n    TEncoding extends Codec<string> | Decoder<string> | Encoder<string>,\n> = {\n    /**\n     * The codec to use for encoding and decoding the content.\n     * @defaultValue UTF-8 encoding.\n     */\n    encoding?: TEncoding;\n\n    /**\n     * The size of the string. It can be one of the following:\n     * - a {@link NumberCodec} that prefixes the string with its size.\n     * - a fixed number of bytes.\n     * - or `'variable'` to use the rest of the byte array.\n     * @defaultValue u32 prefix.\n     */\n    size?: TPrefix | number | 'variable';\n};\n\n/** Encodes strings from a given encoding and size strategy. */\nexport function getStringEncoder<TSize extends number>(\n    config: StringCodecConfig<NumberEncoder, Encoder<string>> & { size: TSize },\n): FixedSizeEncoder<string, TSize>;\nexport function getStringEncoder<TSize extends number>(\n    config: StringCodecConfig<NumberEncoder, Encoder<string>> & {\n        encoding: FixedSizeEncoder<string, TSize>;\n        size: 'variable';\n    },\n): FixedSizeEncoder<string, TSize>;\nexport function getStringEncoder(\n    config?: StringCodecConfig<NumberEncoder, Encoder<string>>,\n): VariableSizeEncoder<string>;\nexport function getStringEncoder(config: StringCodecConfig<NumberEncoder, Encoder<string>> = {}): Encoder<string> {\n    const size = config.size ?? getU32Encoder();\n    const encoding = config.encoding ?? getUtf8Encoder();\n\n    if (size === 'variable') {\n        return encoding;\n    }\n\n    if (typeof size === 'number') {\n        return fixEncoder(encoding, size);\n    }\n\n    return createEncoder({\n        getSizeFromValue: (value: string) => {\n            const contentSize = getEncodedSize(value, encoding);\n            return getEncodedSize(contentSize, size) + contentSize;\n        },\n        write: (value: string, bytes, offset) => {\n            const contentSize = getEncodedSize(value, encoding);\n            offset = size.write(contentSize, bytes, offset);\n            return encoding.write(value, bytes, offset);\n        },\n    });\n}\n\n/** Decodes strings from a given encoding and size strategy. */\nexport function getStringDecoder<TSize extends number>(\n    config: StringCodecConfig<NumberDecoder, Decoder<string>> & { size: TSize },\n): FixedSizeDecoder<string, TSize>;\nexport function getStringDecoder<TSize extends number>(\n    config: StringCodecConfig<NumberDecoder, Decoder<string>> & {\n        encoding: FixedSizeDecoder<string, TSize>;\n        size: 'variable';\n    },\n): FixedSizeDecoder<string, TSize>;\nexport function getStringDecoder(\n    config?: StringCodecConfig<NumberDecoder, Decoder<string>>,\n): VariableSizeDecoder<string>;\nexport function getStringDecoder(config: StringCodecConfig<NumberDecoder, Decoder<string>> = {}): Decoder<string> {\n    const size = config.size ?? getU32Decoder();\n    const encoding = config.encoding ?? getUtf8Decoder();\n\n    if (size === 'variable') {\n        return encoding;\n    }\n\n    if (typeof size === 'number') {\n        return fixDecoder(encoding, size);\n    }\n\n    return createDecoder({\n        read: (bytes: Uint8Array, offset = 0) => {\n            assertByteArrayIsNotEmptyForCodec('string', bytes, offset);\n            const [lengthBigInt, lengthOffset] = size.read(bytes, offset);\n            const length = Number(lengthBigInt);\n            offset = lengthOffset;\n            const contentBytes = bytes.slice(offset, offset + length);\n            assertByteArrayHasEnoughBytesForCodec('string', length, contentBytes);\n            const [value, contentOffset] = encoding.read(contentBytes, 0);\n            offset += contentOffset;\n            return [value, offset];\n        },\n    });\n}\n\n/** Encodes and decodes strings from a given encoding and size strategy. */\nexport function getStringCodec<TSize extends number>(\n    config: StringCodecConfig<NumberCodec, Codec<string>> & { size: TSize },\n): FixedSizeCodec<string, string, TSize>;\nexport function getStringCodec<TSize extends number>(\n    config: StringCodecConfig<NumberCodec, Codec<string>> & {\n        encoding: FixedSizeCodec<string, string, TSize>;\n        size: 'variable';\n    },\n): FixedSizeCodec<string, string, TSize>;\nexport function getStringCodec(config?: StringCodecConfig<NumberCodec, Codec<string>>): VariableSizeCodec<string>;\nexport function getStringCodec(config: StringCodecConfig<NumberCodec, Codec<string>> = {}): Codec<string> {\n    return combineCodec(getStringEncoder(config), getStringDecoder(config));\n}\n", "import {\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport { TextDecoder, TextEncoder } from '@solana/text-encoding-impl';\n\nimport { removeNullCharacters } from './null-characters';\n\n/** Encodes UTF-8 strings using the native `TextEncoder` API. */\nexport const getUtf8Encoder = (): VariableSizeEncoder<string> => {\n    let textEncoder: TextEncoder;\n    return createEncoder({\n        getSizeFromValue: value => (textEncoder ||= new TextEncoder()).encode(value).length,\n        write: (value: string, bytes, offset) => {\n            const bytesToAdd = (textEncoder ||= new TextEncoder()).encode(value);\n            bytes.set(bytesToAdd, offset);\n            return offset + bytesToAdd.length;\n        },\n    });\n};\n\n/** Decodes UTF-8 strings using the native `TextDecoder` API. */\nexport const getUtf8Decoder = (): VariableSizeDecoder<string> => {\n    let textDecoder: TextDecoder;\n    return createDecoder({\n        read(bytes, offset) {\n            const value = (textDecoder ||= new TextDecoder()).decode(bytes.slice(offset));\n            return [removeNullCharacters(value), bytes.length];\n        },\n    });\n};\n\n/** Encodes and decodes UTF-8 strings using the native `TextEncoder` and `TextDecoder` API. */\nexport const getUtf8Codec = (): Codec<string> => combineCodec(getUtf8Encoder(), getUtf8Decoder());\n", "export const TextDecoder = globalThis.TextDecoder;\nexport const TextEncoder = globalThis.TextEncoder;\n", "/**\n * An implementation of the Rust Option type in JavaScript.\n * It can be one of the following:\n * - <code>{@link Some}<T></code>: Meaning there is a value of type T.\n * - <code>{@link None}</code>: Meaning there is no value.\n */\nexport type Option<T> = None | Some<T>;\n\n/**\n * Defines a looser type that can be used when serializing an {@link Option}.\n * This allows us to pass null or the Option value directly whilst still\n * supporting the Option type for use-cases that need more type safety.\n */\nexport type OptionOrNullable<T> = Option<T> | T | null;\n\n/**\n * Represents an option of type `T` that has a value.\n *\n * @see {@link Option}\n */\nexport type Some<T> = Readonly<{ __option: 'Some'; value: T }>;\n\n/**\n * Represents an option of type `T` that has no value.\n *\n * @see {@link Option}\n */\nexport type None = Readonly<{ __option: 'None' }>;\n\n/**\n * Creates a new {@link Option} of type `T` that has a value.\n *\n * @see {@link Option}\n */\nexport const some = <T>(value: T): Option<T> => ({ __option: 'Some', value });\n\n/**\n * Creates a new {@link Option} of type `T` that has no value.\n *\n * @see {@link Option}\n */\nexport const none = <T>(): Option<T> => ({ __option: 'None' });\n\n/**\n * Whether the given data is an {@link Option}.\n */\nexport const isOption = <T = unknown>(input: unknown): input is Option<T> =>\n    !!(\n        input &&\n        typeof input === 'object' &&\n        '__option' in input &&\n        ((input.__option === 'Some' && 'value' in input) || input.__option === 'None')\n    );\n\n/**\n * Whether the given {@link Option} is a {@link Some}.\n */\nexport const isSome = <T>(option: Option<T>): option is Some<T> => option.__option === 'Some';\n\n/**\n * Whether the given {@link Option} is a {@link None}.\n */\nexport const isNone = <T>(option: Option<T>): option is None => option.__option === 'None';\n", "import {\n    assertIsFixedSize,\n    Codec,\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Decoder,\n    Encoder,\n    FixedSizeCodec,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    getEncodedSize,\n    isFixedSize,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\nimport {\n    FixedSizeNumberCodec,\n    FixedSizeNumberDecoder,\n    FixedSizeNumberEncoder,\n    getU8Decoder,\n    getU8Encoder,\n    NumberCodec,\n    NumberDecoder,\n    NumberEncoder,\n} from '@solana/codecs-numbers';\n\nimport { isOption, isSome, none, Option, OptionOrNullable, some } from './option';\nimport { wrapNullable } from './unwrap-option';\n\n/** Defines the config for option codecs. */\nexport type OptionCodecConfig<TPrefix extends NumberCodec | NumberDecoder | NumberEncoder> = {\n    /**\n     * Whether the item codec should be of fixed size.\n     *\n     * When this is true, a `None` value will skip the bytes that would\n     * have been used for the item. Note that this will only work if the\n     * item codec is of fixed size.\n     * @defaultValue `false`\n     */\n    fixed?: boolean;\n\n    /**\n     * The codec to use for the boolean prefix.\n     * @defaultValue u8 prefix.\n     */\n    prefix?: TPrefix;\n};\n\n/**\n * Creates a encoder for an optional value using `null` as the `None` value.\n *\n * @param item - The encoder to use for the value that may be present.\n * @param config - A set of config for the encoder.\n */\nexport function getOptionEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom>,\n    config: OptionCodecConfig<FixedSizeNumberEncoder> & { fixed: true },\n): FixedSizeEncoder<OptionOrNullable<TFrom>>;\nexport function getOptionEncoder<TFrom>(\n    item: FixedSizeEncoder<TFrom, 0>,\n    config?: OptionCodecConfig<FixedSizeNumberEncoder>,\n): FixedSizeEncoder<OptionOrNullable<TFrom>>;\nexport function getOptionEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config?: OptionCodecConfig<NumberEncoder> & { fixed?: false },\n): VariableSizeEncoder<OptionOrNullable<TFrom>>;\nexport function getOptionEncoder<TFrom>(\n    item: Encoder<TFrom>,\n    config: OptionCodecConfig<NumberEncoder> = {},\n): Encoder<OptionOrNullable<TFrom>> {\n    const prefix = config.prefix ?? getU8Encoder();\n    const fixed = config.fixed ?? false;\n\n    const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n    if (fixed || isZeroSizeItem) {\n        assertIsFixedSize(item);\n        assertIsFixedSize(prefix);\n        const fixedSize = prefix.fixedSize + item.fixedSize;\n        return createEncoder({\n            fixedSize,\n            write: (optionOrNullable: OptionOrNullable<TFrom>, bytes, offset) => {\n                const option = isOption<TFrom>(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n                const prefixOffset = prefix.write(Number(isSome(option)), bytes, offset);\n                if (isSome(option)) {\n                    item.write(option.value, bytes, prefixOffset);\n                }\n                return offset + fixedSize;\n            },\n        });\n    }\n\n    return createEncoder({\n        getSizeFromValue: (optionOrNullable: OptionOrNullable<TFrom>) => {\n            const option = isOption<TFrom>(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n            return (\n                getEncodedSize(Number(isSome(option)), prefix) +\n                (isSome(option) ? getEncodedSize(option.value, item) : 0)\n            );\n        },\n        maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? undefined,\n        write: (optionOrNullable: OptionOrNullable<TFrom>, bytes, offset) => {\n            const option = isOption<TFrom>(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);\n            offset = prefix.write(Number(isSome(option)), bytes, offset);\n            if (isSome(option)) {\n                offset = item.write(option.value, bytes, offset);\n            }\n            return offset;\n        },\n    });\n}\n\n/**\n * Creates a decoder for an optional value using `null` as the `None` value.\n *\n * @param item - The decoder to use for the value that may be present.\n * @param config - A set of config for the decoder.\n */\nexport function getOptionDecoder<TTo>(\n    item: FixedSizeDecoder<TTo>,\n    config: OptionCodecConfig<FixedSizeNumberDecoder> & { fixed: true },\n): FixedSizeDecoder<Option<TTo>>;\nexport function getOptionDecoder<TTo>(\n    item: FixedSizeDecoder<TTo, 0>,\n    config?: OptionCodecConfig<FixedSizeNumberDecoder>,\n): FixedSizeDecoder<Option<TTo>>;\nexport function getOptionDecoder<TTo>(\n    item: Decoder<TTo>,\n    config?: OptionCodecConfig<NumberDecoder> & { fixed?: false },\n): VariableSizeDecoder<Option<TTo>>;\nexport function getOptionDecoder<TTo>(\n    item: Decoder<TTo>,\n    config: OptionCodecConfig<NumberDecoder> = {},\n): Decoder<Option<TTo>> {\n    const prefix = config.prefix ?? getU8Decoder();\n    const fixed = config.fixed ?? false;\n\n    let fixedSize: number | null = null;\n    const isZeroSizeItem = isFixedSize(item) && isFixedSize(prefix) && item.fixedSize === 0;\n    if (fixed || isZeroSizeItem) {\n        assertIsFixedSize(item);\n        assertIsFixedSize(prefix);\n        fixedSize = prefix.fixedSize + item.fixedSize;\n    }\n\n    return createDecoder({\n        ...(fixedSize === null\n            ? { maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? undefined }\n            : { fixedSize }),\n        read: (bytes: Uint8Array, offset) => {\n            if (bytes.length - offset <= 0) {\n                return [none(), offset];\n            }\n            const [isSome, prefixOffset] = prefix.read(bytes, offset);\n            if (isSome === 0) {\n                return [none(), fixedSize !== null ? offset + fixedSize : prefixOffset];\n            }\n            const [value, newOffset] = item.read(bytes, prefixOffset);\n            return [some(value), fixedSize !== null ? offset + fixedSize : newOffset];\n        },\n    });\n}\n\n/**\n * Creates a codec for an optional value using `null` as the `None` value.\n *\n * @param item - The codec to use for the value that may be present.\n * @param config - A set of config for the codec.\n */\nexport function getOptionCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo>,\n    config: OptionCodecConfig<FixedSizeNumberCodec> & { fixed: true },\n): FixedSizeCodec<OptionOrNullable<TFrom>, Option<TTo>>;\nexport function getOptionCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: FixedSizeCodec<TFrom, TTo, 0>,\n    config?: OptionCodecConfig<FixedSizeNumberCodec>,\n): FixedSizeCodec<OptionOrNullable<TFrom>, Option<TTo>>;\nexport function getOptionCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config?: OptionCodecConfig<NumberCodec> & { fixed?: false },\n): VariableSizeCodec<OptionOrNullable<TFrom>, Option<TTo>>;\nexport function getOptionCodec<TFrom, TTo extends TFrom = TFrom>(\n    item: Codec<TFrom, TTo>,\n    config: OptionCodecConfig<NumberCodec> = {},\n): Codec<OptionOrNullable<TFrom>, Option<TTo>> {\n    return combineCodec(getOptionEncoder<TFrom>(item, config as object), getOptionDecoder<TTo>(item, config as object));\n}\n\nfunction sumCodecSizes(sizes: (number | null)[]): number | null {\n    return sizes.reduce((all, size) => (all === null || size === null ? null : all + size), 0 as number | null);\n}\n\nfunction getMaxSize(codec: { fixedSize: number } | { maxSize?: number }): number | null {\n    return isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n", "import { isSome, none, Option, some } from './option';\n\n/**\n * Unwraps the value of an {@link Option} of type `T`\n * or returns a fallback value that defaults to `null`.\n */\nexport function unwrapOption<T>(option: Option<T>): T | null;\nexport function unwrapOption<T, U>(option: Option<T>, fallback: () => U): T | U;\nexport function unwrapOption<T, U = null>(option: Option<T>, fallback?: () => U): T | U {\n    if (isSome(option)) return option.value;\n    return fallback ? fallback() : (null as U);\n}\n\n/**\n * Wraps a nullable value into an {@link Option}.\n */\nexport const wrapNullable = <T>(nullable: T | null): Option<T> => (nullable !== null ? some(nullable) : none<T>());\n", "import { isOption, isSome, None, Some } from './option';\n\n/**\n * Lists all types that should not be recursively unwrapped.\n *\n * @see {@link UnwrappedOption}\n */\ntype UnUnwrappables =\n    | Date\n    | Int8Array\n    | Int16Array\n    | Int32Array\n    | Uint8Array\n    | Uint16Array\n    | Uint32Array\n    | bigint\n    | boolean\n    | number\n    | string\n    | symbol\n    | null\n    | undefined;\n\n/**\n * A type that defines the recursive unwrapping of a type `T`\n * such that all nested {@link Option} types are unwrapped.\n *\n * For each nested {@link Option} type, if the option is a {@link Some},\n * it returns the type of its value, otherwise, it returns the provided\n * fallback type `U` which defaults to `null`.\n */\nexport type UnwrappedOption<T, U = null> = T extends Some<infer TValue>\n    ? UnwrappedOption<TValue, U>\n    : T extends None\n      ? U\n      : T extends UnUnwrappables\n        ? T\n        : T extends object\n          ? { [key in keyof T]: UnwrappedOption<T[key], U> }\n          : T extends Array<infer TItem>\n            ? Array<UnwrappedOption<TItem, U>>\n            : T;\n\n/**\n * Recursively go through a type `T` such that all\n * nested {@link Option} types are unwrapped.\n *\n * For each nested {@link Option} type, if the option is a {@link Some},\n * it returns its value, otherwise, it returns the provided fallback value\n * which defaults to `null`.\n */\nexport function unwrapOptionRecursively<T>(input: T): UnwrappedOption<T>;\nexport function unwrapOptionRecursively<T, U>(input: T, fallback: () => U): UnwrappedOption<T, U>;\nexport function unwrapOptionRecursively<T, U = null>(input: T, fallback?: () => U): UnwrappedOption<T, U> {\n    // Types to bypass.\n    if (!input || ArrayBuffer.isView(input)) {\n        return input as UnwrappedOption<T, U>;\n    }\n\n    const next = <X>(x: X) =>\n        (fallback ? unwrapOptionRecursively(x, fallback) : unwrapOptionRecursively(x)) as UnwrappedOption<X, U>;\n\n    // Handle Option.\n    if (isOption(input)) {\n        if (isSome(input)) return next(input.value) as UnwrappedOption<T, U>;\n        return (fallback ? fallback() : null) as UnwrappedOption<T, U>;\n    }\n\n    // Walk.\n    if (Array.isArray(input)) {\n        return input.map(next) as UnwrappedOption<T, U>;\n    }\n    if (typeof input === 'object') {\n        return Object.fromEntries(Object.entries(input).map(([k, v]) => [k, next(v)])) as UnwrappedOption<T, U>;\n    }\n    return input as UnwrappedOption<T, U>;\n}\n", "export * from './splDiscriminate.js';\nexport * from './tlvState.js';\nexport * from './errors.js';\n", "import { createHash } from 'crypto';\n\nexport const splDiscriminate = (discriminator: string, length = 8): Buffer => {\n    const digest = createHash('sha256').update(discriminator).digest();\n    return digest.subarray(0, length);\n};\n", "import { TlvInvalidAccountDataError } from './errors.js';\n\nexport type LengthSize = 1 | 2 | 4 | 8;\n\nexport type Discriminator = Uint8Array;\n\nexport class TlvState {\n    private readonly tlvData: Buffer;\n    private readonly discriminatorSize: number;\n    private readonly lengthSize: LengthSize;\n\n    public constructor(buffer: Buffer, discriminatorSize = 2, lengthSize: LengthSize = 2, offset: number = 0) {\n        this.tlvData = buffer.subarray(offset);\n        this.discriminatorSize = discriminatorSize;\n        this.lengthSize = lengthSize;\n    }\n\n    /**\n     * Get the raw tlv data\n     *\n     * @return the raw tlv data\n     */\n    public get data(): Buffer {\n        return this.tlvData;\n    }\n\n    private readEntryLength<T>(size: LengthSize, offset: number, constructor: (x: number | bigint) => T): T {\n        switch (size) {\n            case 1:\n                return constructor(this.tlvData.readUInt8(offset));\n            case 2:\n                return constructor(this.tlvData.readUInt16LE(offset));\n            case 4:\n                return constructor(this.tlvData.readUInt32LE(offset));\n            case 8:\n                return constructor(this.tlvData.readBigUInt64LE(offset));\n        }\n    }\n\n    /**\n     * Get a single entry from the tlv data. This function returns the first entry with the given type.\n     *\n     * @param type the type of the entry to get\n     *\n     * @return the entry from the tlv data or null\n     */\n    public firstBytes(discriminator: Discriminator): Buffer | null {\n        const entries = this.bytesRepeating(discriminator, 1);\n        return entries.length > 0 ? entries[0] : null;\n    }\n\n    /**\n     * Get a multiple entries from the tlv data. This function returns `count` or less entries with the given type.\n     *\n     * @param type the type of the entry to get\n     * @param count the number of entries to get (0 for all entries)\n     *\n     * @return the entry from the tlv data or null\n     */\n    public bytesRepeating(discriminator: Discriminator, count = 0): Buffer[] {\n        const entries: Buffer[] = [];\n        let offset = 0;\n        while (offset < this.tlvData.length) {\n            if (offset + this.discriminatorSize + this.lengthSize > this.tlvData.length) {\n                throw new TlvInvalidAccountDataError();\n            }\n            const type = this.tlvData.subarray(offset, offset + this.discriminatorSize);\n            offset += this.discriminatorSize;\n            const entryLength = this.readEntryLength(this.lengthSize, offset, Number);\n            offset += this.lengthSize;\n            if (offset + entryLength > this.tlvData.length) {\n                throw new TlvInvalidAccountDataError();\n            }\n            if (type.equals(discriminator)) {\n                entries.push(this.tlvData.subarray(offset, offset + entryLength));\n            }\n            if (count > 0 && entries.length >= count) {\n                break;\n            }\n            offset += entryLength;\n        }\n        return entries;\n    }\n\n    /**\n     * Get all the discriminators from the tlv data. This function will return a type multiple times if it occurs multiple times in the tlv data.\n     *\n     * @return a list of the discriminators.\n     */\n    public discriminators(): Buffer[] {\n        const discriminators: Buffer[] = [];\n        let offset = 0;\n        while (offset < this.tlvData.length) {\n            if (offset + this.discriminatorSize + this.lengthSize > this.tlvData.length) {\n                throw new TlvInvalidAccountDataError();\n            }\n            const type = this.tlvData.subarray(offset, offset + this.discriminatorSize);\n            discriminators.push(type);\n            offset += this.discriminatorSize;\n            const entryLength = this.readEntryLength(this.lengthSize, offset, Number);\n            offset += this.lengthSize;\n            if (offset + entryLength > this.tlvData.length) {\n                throw new TlvInvalidAccountDataError();\n            }\n            offset += entryLength;\n        }\n        return discriminators;\n    }\n}\n", "/** Base class for errors */\nexport abstract class TlvError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if the byte length of an tlv buffer doesn't match the expected size */\nexport class TlvInvalidAccountDataError extends TlvError {\n    name = 'TlvInvalidAccountDataError';\n}\n", "export * from './tokenGroup.js';\nexport * from './tokenGroupMember.js';\n", "import { PublicKey } from '@solana/web3.js';\nimport { getBytesCodec, getStructCodec, getU32Codec } from '@solana/codecs';\n\nconst tokenGroupCodec = getStructCodec([\n    ['updateAuthority', getBytesCodec({ size: 32 })],\n    ['mint', getBytesCodec({ size: 32 })],\n    ['size', getU32Codec()],\n    ['maxSize', getU32Codec()],\n]);\n\nexport const TOKEN_GROUP_SIZE = tokenGroupCodec.fixedSize;\n\nexport interface TokenGroup {\n    /** The authority that can sign to update the group */\n    updateAuthority?: PublicKey;\n    /** The associated mint, used to counter spoofing to be sure that group belongs to a particular mint */\n    mint: PublicKey;\n    /** The current number of group members */\n    size: number;\n    /** The maximum number of group members */\n    maxSize: number;\n}\n\n// Checks if all elements in the array are 0\nfunction isNonePubkey(buffer: Uint8Array): boolean {\n    for (let i = 0; i < buffer.length; i++) {\n        if (buffer[i] !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Pack TokenGroup into byte slab\nexport function packTokenGroup(group: TokenGroup): Uint8Array {\n    // If no updateAuthority given, set it to the None/Zero PublicKey for encoding\n    const updateAuthority = group.updateAuthority ?? PublicKey.default;\n    return tokenGroupCodec.encode({\n        updateAuthority: updateAuthority.toBuffer(),\n        mint: group.mint.toBuffer(),\n        size: group.size,\n        maxSize: group.maxSize,\n    });\n}\n\n// unpack byte slab into TokenGroup\nexport function unpackTokenGroup(buffer: Buffer | Uint8Array): TokenGroup {\n    const data = tokenGroupCodec.decode(buffer);\n\n    return isNonePubkey(data.updateAuthority)\n        ? {\n              mint: new PublicKey(data.mint),\n              size: data.size,\n              maxSize: data.maxSize,\n          }\n        : {\n              updateAuthority: new PublicKey(data.updateAuthority),\n              mint: new PublicKey(data.mint),\n              size: data.size,\n              maxSize: data.maxSize,\n          };\n}\n", "import { PublicKey } from '@solana/web3.js';\nimport { getBytesCodec, getStructCodec, getU32Codec } from '@solana/codecs';\n\nconst tokenGroupMemberCodec = getStructCodec([\n    ['mint', getBytesCodec({ size: 32 })],\n    ['group', getBytesCodec({ size: 32 })],\n    ['memberNumber', getU32Codec()],\n]);\n\nexport const TOKEN_GROUP_MEMBER_SIZE = tokenGroupMemberCodec.fixedSize;\n\nexport interface TokenGroupMember {\n    /** The associated mint, used to counter spoofing to be sure that member belongs to a particular mint */\n    mint: PublicKey;\n    /** The pubkey of the `TokenGroup` */\n    group: PublicKey;\n    /** The member number */\n    memberNumber: number;\n}\n\n// Pack TokenGroupMember into byte slab\nexport function packTokenGroupMember(member: TokenGroupMember): Uint8Array {\n    return tokenGroupMemberCodec.encode({\n        mint: member.mint.toBuffer(),\n        group: member.group.toBuffer(),\n        memberNumber: member.memberNumber,\n    });\n}\n\n// unpack byte slab into TokenGroupMember\nexport function unpackTokenGroupMember(buffer: Buffer | Uint8Array): TokenGroupMember {\n    const data = tokenGroupMemberCodec.decode(buffer);\n    return {\n        mint: new PublicKey(data.mint),\n        group: new PublicKey(data.group),\n        memberNumber: data.memberNumber,\n    };\n}\n", "import { struct, u32 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n    unpackTokenGroup,\n    unpackTokenGroupMember,\n    type TokenGroup,\n    type TokenGroupMember,\n} from '@solana/spl-token-group';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\nexport { TOKEN_GROUP_SIZE, TOKEN_GROUP_MEMBER_SIZE } from '@solana/spl-token-group';\n\nexport function getTokenGroupState(mint: Mint): Partial<TokenGroup> | null {\n    const extensionData = getExtensionData(ExtensionType.TokenGroup, mint.tlvData);\n    if (extensionData !== null) {\n        const { updateAuthority, mint, size, maxSize } = unpackTokenGroup(extensionData);\n\n        // Explicitly set None/Zero keys to null\n        return {\n            updateAuthority: updateAuthority?.equals(PublicKey.default) ? undefined : updateAuthority,\n            mint,\n            size,\n            maxSize,\n        };\n    } else {\n        return null;\n    }\n}\n\nexport function getTokenGroupMemberState(mint: Mint): Partial<TokenGroupMember> | null {\n    const extensionData = getExtensionData(ExtensionType.TokenGroupMember, mint.tlvData);\n    if (extensionData !== null) {\n        const { mint, group, memberNumber } = unpackTokenGroupMember(extensionData);\n\n        return {\n            mint,\n            group,\n            memberNumber,\n        };\n    } else {\n        return null;\n    }\n}\n", "import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** GroupMemberPointer as stored by the program */\nexport interface GroupMemberPointer {\n    /** Optional authority that can set the member address */\n    authority: PublicKey | null;\n    /** Optional account address that holds the member */\n    memberAddress: PublicKey | null;\n}\n\n/** Buffer layout for de/serializing a Group Pointer extension */\nexport const GroupMemberPointerLayout = struct<{ authority: PublicKey; memberAddress: PublicKey }>([\n    publicKey('authority'),\n    publicKey('memberAddress'),\n]);\n\nexport const GROUP_MEMBER_POINTER_SIZE = GroupMemberPointerLayout.span;\n\nexport function getGroupMemberPointerState(mint: Mint): Partial<GroupMemberPointer> | null {\n    const extensionData = getExtensionData(ExtensionType.GroupMemberPointer, mint.tlvData);\n    if (extensionData !== null) {\n        const { authority, memberAddress } = GroupMemberPointerLayout.decode(extensionData);\n\n        // Explicitly set None/Zero keys to null\n        return {\n            authority: authority.equals(PublicKey.default) ? null : authority,\n            memberAddress: memberAddress.equals(PublicKey.default) ? null : memberAddress,\n        };\n    } else {\n        return null;\n    }\n}\n", "import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** GroupPointer as stored by the program */\nexport interface GroupPointer {\n    /** Optional authority that can set the group address */\n    authority: PublicKey | null;\n    /** Optional account address that holds the group */\n    groupAddress: PublicKey | null;\n}\n\n/** Buffer layout for de/serializing a GroupPointer extension */\nexport const GroupPointerLayout = struct<{ authority: PublicKey; groupAddress: PublicKey }>([\n    publicKey('authority'),\n    publicKey('groupAddress'),\n]);\n\nexport const GROUP_POINTER_SIZE = GroupPointerLayout.span;\n\nexport function getGroupPointerState(mint: Mint): Partial<GroupPointer> | null {\n    const extensionData = getExtensionData(ExtensionType.GroupPointer, mint.tlvData);\n    if (extensionData !== null) {\n        const { authority, groupAddress } = GroupPointerLayout.decode(extensionData);\n\n        // Explicitly set None/Zero keys to null\n        return {\n            authority: authority.equals(PublicKey.default) ? null : authority,\n            groupAddress: groupAddress.equals(PublicKey.default) ? null : groupAddress,\n        };\n    } else {\n        return null;\n    }\n}\n", "import { struct } from '@solana/buffer-layout';\nimport type { Account } from '../state/account.js';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n\n/** ImmutableOwner as stored by the program */\nexport interface ImmutableOwner {} // eslint-disable-line\n\n/** Buffer layout for de/serializing an account */\nexport const ImmutableOwnerLayout = struct<ImmutableOwner>([]);\n\nexport const IMMUTABLE_OWNER_SIZE = ImmutableOwnerLayout.span;\n\nexport function getImmutableOwner(account: Account): ImmutableOwner | null {\n    const extensionData = getExtensionData(ExtensionType.ImmutableOwner, account.tlvData);\n    if (extensionData !== null) {\n        return ImmutableOwnerLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "import { ns64, s16, struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\nexport interface InterestBearingMintConfigState {\n    rateAuthority: PublicKey;\n    initializationTimestamp: bigint;\n    preUpdateAverageRate: number;\n    lastUpdateTimestamp: bigint;\n    currentRate: number;\n}\n\nexport const InterestBearingMintConfigStateLayout = struct<InterestBearingMintConfigState>([\n    publicKey('rateAuthority'),\n    ns64('initializationTimestamp'),\n    s16('preUpdateAverageRate'),\n    ns64('lastUpdateTimestamp'),\n    s16('currentRate'),\n]);\n\nexport const INTEREST_BEARING_MINT_CONFIG_STATE_SIZE = InterestBearingMintConfigStateLayout.span;\n\nexport function getInterestBearingMintConfigState(mint: Mint): InterestBearingMintConfigState | null {\n    const extensionData = getExtensionData(ExtensionType.InterestBearingConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return InterestBearingMintConfigStateLayout.decode(extensionData);\n    }\n    return null;\n}\n", "export * from './actions.js';\nexport * from './instructions.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    createDisableRequiredMemoTransfersInstruction,\n    createEnableRequiredMemoTransfersInstruction,\n} from './instructions.js';\n\n/**\n * Enable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function enableRequiredMemoTransfers(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createEnableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Disable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function disableRequiredMemoTransfers(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createDisableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum MemoTransferInstruction {\n    Enable = 0,\n    Disable = 1,\n}\n\n/** TODO: docs */\nexport interface MemoTransferInstructionData {\n    instruction: TokenInstruction.MemoTransferExtension;\n    memoTransferInstruction: MemoTransferInstruction;\n}\n\n/** TODO: docs */\nexport const memoTransferInstructionData = struct<MemoTransferInstructionData>([\n    u8('instruction'),\n    u8('memoTransferInstruction'),\n]);\n\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableRequiredMemoTransfersInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createMemoTransferInstruction(MemoTransferInstruction.Enable, account, authority, multiSigners, programId);\n}\n\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableRequiredMemoTransfersInstruction(\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    return createMemoTransferInstruction(MemoTransferInstruction.Disable, account, authority, multiSigners, programId);\n}\n\nfunction createMemoTransferInstruction(\n    memoTransferInstruction: MemoTransferInstruction,\n    account: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[],\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);\n    const data = Buffer.alloc(memoTransferInstructionData.span);\n    memoTransferInstructionData.encode(\n        {\n            instruction: TokenInstruction.MemoTransferExtension,\n            memoTransferInstruction,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n", "import { struct } from '@solana/buffer-layout';\nimport { bool } from '@solana/buffer-layout-utils';\nimport type { Account } from '../../state/account.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** MemoTransfer as stored by the program */\nexport interface MemoTransfer {\n    /** Require transfers into this account to be accompanied by a memo */\n    requireIncomingTransferMemos: boolean;\n}\n\n/** Buffer layout for de/serializing a memo transfer extension */\nexport const MemoTransferLayout = struct<MemoTransfer>([bool('requireIncomingTransferMemos')]);\n\nexport const MEMO_TRANSFER_SIZE = MemoTransferLayout.span;\n\nexport function getMemoTransfer(account: Account): MemoTransfer | null {\n    const extensionData = getExtensionData(ExtensionType.MemoTransfer, account.tlvData);\n    if (extensionData !== null) {\n        return MemoTransferLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\n/** MetadataPointer as stored by the program */\nexport interface MetadataPointer {\n    /** Optional authority that can set the metadata address */\n    authority: PublicKey | null;\n    /** Optional Account Address that holds the metadata */\n    metadataAddress: PublicKey | null;\n}\n\n/** Buffer layout for de/serializing a Metadata Pointer extension */\nexport const MetadataPointerLayout = struct<{ authority: PublicKey; metadataAddress: PublicKey }>([\n    publicKey('authority'),\n    publicKey('metadataAddress'),\n]);\n\nexport const METADATA_POINTER_SIZE = MetadataPointerLayout.span;\n\nexport function getMetadataPointerState(mint: Mint): Partial<MetadataPointer> | null {\n    const extensionData = getExtensionData(ExtensionType.MetadataPointer, mint.tlvData);\n    if (extensionData !== null) {\n        const { authority, metadataAddress } = MetadataPointerLayout.decode(extensionData);\n\n        // Explicitly set None/Zero keys to null\n        return {\n            authority: authority.equals(PublicKey.default) ? null : authority,\n            metadataAddress: metadataAddress.equals(PublicKey.default) ? null : metadataAddress,\n        };\n    } else {\n        return null;\n    }\n}\n", "import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../state/mint.js';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n\n/** MintCloseAuthority as stored by the program */\nexport interface MintCloseAuthority {\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a mint */\nexport const MintCloseAuthorityLayout = struct<MintCloseAuthority>([publicKey('closeAuthority')]);\n\nexport const MINT_CLOSE_AUTHORITY_SIZE = MintCloseAuthorityLayout.span;\n\nexport function getMintCloseAuthority(mint: Mint): MintCloseAuthority | null {\n    const extensionData = getExtensionData(ExtensionType.MintCloseAuthority, mint.tlvData);\n    if (extensionData !== null) {\n        return MintCloseAuthorityLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "import { struct } from '@solana/buffer-layout';\nimport type { Account } from '../state/account.js';\nimport type { Mint } from '../state/mint.js';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n\n/** Non-transferable mint state as stored by the program */\nexport interface NonTransferable {} // eslint-disable-line\n\n/** Non-transferable token account state as stored by the program */\nexport interface NonTransferableAccount {} // eslint-disable-line\n\n/** Buffer layout for de/serializing an account */\nexport const NonTransferableLayout = struct<NonTransferable>([]);\n\nexport const NON_TRANSFERABLE_SIZE = NonTransferableLayout.span;\nexport const NON_TRANSFERABLE_ACCOUNT_SIZE = NonTransferableLayout.span;\n\nexport function getNonTransferable(mint: Mint): NonTransferable | null {\n    const extensionData = getExtensionData(ExtensionType.NonTransferable, mint.tlvData);\n    if (extensionData !== null) {\n        return NonTransferableLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\nexport function getNonTransferableAccount(account: Account): NonTransferableAccount | null {\n    const extensionData = getExtensionData(ExtensionType.NonTransferableAccount, account.tlvData);\n    if (extensionData !== null) {\n        return NonTransferableLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "import { struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Mint } from '../state/mint.js';\nimport { ExtensionType, getExtensionData } from './extensionType.js';\n\n/** PermanentDelegate as stored by the program */\nexport interface PermanentDelegate {\n    delegate: PublicKey;\n}\n\n/** Buffer layout for de/serializing a mint */\nexport const PermanentDelegateLayout = struct<PermanentDelegate>([publicKey('delegate')]);\n\nexport const PERMANENT_DELEGATE_SIZE = PermanentDelegateLayout.span;\n\nexport function getPermanentDelegate(mint: Mint): PermanentDelegate | null {\n    const extensionData = getExtensionData(ExtensionType.PermanentDelegate, mint.tlvData);\n    if (extensionData !== null) {\n        return PermanentDelegateLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "export * from './actions.js';\nexport * from './instructions.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    createHarvestWithheldTokensToMintInstruction,\n    createTransferCheckedWithFeeInstruction,\n    createWithdrawWithheldTokensFromAccountsInstruction,\n    createWithdrawWithheldTokensFromMintInstruction,\n} from './instructions.js';\n\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedWithFeeInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            fee,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[],\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createWithdrawWithheldTokensFromAccountsInstruction(\n            mint,\n            destination,\n            authorityPublicKey,\n            signers,\n            sources,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    sources: PublicKey[],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n", "import { struct, u16, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, Signer, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n    TokenUnsupportedInstructionError,\n} from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { COptionPublicKeyLayout } from '../../serialization.js';\n\nexport enum TransferFeeInstruction {\n    InitializeTransferFeeConfig = 0,\n    TransferCheckedWithFee = 1,\n    WithdrawWithheldTokensFromMint = 2,\n    WithdrawWithheldTokensFromAccounts = 3,\n    HarvestWithheldTokensToMint = 4,\n    SetTransferFee = 5,\n}\n\n// InitializeTransferFeeConfig\n\n/** TODO: docs */\nexport interface InitializeTransferFeeConfigInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig;\n    transferFeeConfigAuthority: PublicKey | null;\n    withdrawWithheldAuthority: PublicKey | null;\n    transferFeeBasisPoints: number;\n    maximumFee: bigint;\n}\n\n/** TODO: docs */\nexport const initializeTransferFeeConfigInstructionData = struct<InitializeTransferFeeConfigInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n    new COptionPublicKeyLayout('transferFeeConfigAuthority'),\n    new COptionPublicKeyLayout('withdrawWithheldAuthority'),\n    u16('transferFeeBasisPoints'),\n    u64('maximumFee'),\n]);\n\n/**\n * Construct an InitializeTransferFeeConfig instruction\n *\n * @param mint            Token mint account\n * @param transferFeeConfigAuthority  Optional authority that can update the fees\n * @param withdrawWithheldAuthority Optional authority that can withdraw fees\n * @param transferFeeBasisPoints Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee        Maximum fee assessed on transfers\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeTransferFeeConfigInstruction(\n    mint: PublicKey,\n    transferFeeConfigAuthority: PublicKey | null,\n    withdrawWithheldAuthority: PublicKey | null,\n    transferFeeBasisPoints: number,\n    maximumFee: bigint,\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeTransferFeeConfigInstructionData.span);\n    initializeTransferFeeConfigInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig,\n            transferFeeConfigAuthority: transferFeeConfigAuthority,\n            withdrawWithheldAuthority: withdrawWithheldAuthority,\n            transferFeeBasisPoints: transferFeeBasisPoints,\n            maximumFee: maximumFee,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeTransferFeeConfig instruction */\nexport interface DecodedInitializeTransferFeeConfigInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig;\n        transferFeeConfigAuthority: PublicKey | null;\n        withdrawWithheldAuthority: PublicKey | null;\n        transferFeeBasisPoints: number;\n        maximumFee: bigint;\n    };\n}\n\n/**\n * Decode an InitializeTransferFeeConfig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeTransferFeeConfigInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializeTransferFeeConfigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeTransferFeeConfigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializeTransferFeeConfigInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.InitializeTransferFeeConfig\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeTransferFeeConfig instruction */\nexport interface DecodedInitializeTransferFeeConfigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig;\n        transferFeeConfigAuthority: PublicKey | null;\n        withdrawWithheldAuthority: PublicKey | null;\n        transferFeeBasisPoints: number;\n        maximumFee: bigint;\n    };\n}\n\n/**\n * Decode an InitializeTransferFeeConfig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeTransferFeeConfigInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializeTransferFeeConfigInstructionUnchecked {\n    const {\n        instruction,\n        transferFeeInstruction,\n        transferFeeConfigAuthority,\n        withdrawWithheldAuthority,\n        transferFeeBasisPoints,\n        maximumFee,\n    } = initializeTransferFeeConfigInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            transferFeeConfigAuthority,\n            withdrawWithheldAuthority,\n            transferFeeBasisPoints,\n            maximumFee,\n        },\n    };\n}\n\n// TransferCheckedWithFee\nexport interface TransferCheckedWithFeeInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee;\n    amount: bigint;\n    decimals: number;\n    fee: bigint;\n}\n\nexport const transferCheckedWithFeeInstructionData = struct<TransferCheckedWithFeeInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n    u64('amount'),\n    u8('decimals'),\n    u64('fee'),\n]);\n\n/**\n * Construct an TransferCheckedWithFee instruction\n *\n * @param source          The source account\n * @param mint            The token mint\n * @param destination     The destination account\n * @param authority       The source account's owner/delegate\n * @param signers         The signer account(s)\n * @param amount          The amount of tokens to transfer\n * @param decimals        The expected number of base 10 digits to the right of the decimal place\n * @param fee             The expected fee assesed on this transfer, calculated off-chain based on the transferFeeBasisPoints and maximumFee of the mint.\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedWithFeeInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(transferCheckedWithFeeInstructionData.span);\n    transferCheckedWithFeeInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee,\n            amount,\n            decimals,\n            fee,\n        },\n        data\n    );\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferCheckedWithFee instruction */\nexport interface DecodedTransferCheckedWithFeeInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee;\n        amount: bigint;\n        decimals: number;\n        fee: bigint;\n    };\n}\n\n/**\n * Decode a TransferCheckedWithFee instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedWithFeeInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedTransferCheckedWithFeeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedWithFeeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, authority, signers },\n        data,\n    } = decodeTransferCheckedWithFeeInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.TransferCheckedWithFee\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferCheckedWithFees instruction */\nexport interface DecodedTransferCheckedWithFeeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | undefined;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee;\n        amount: bigint;\n        decimals: number;\n        fee: bigint;\n    };\n}\n\n/**\n * Decode a TransferCheckedWithFees instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedWithFeeInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, authority, ...signers],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedWithFeeInstructionUnchecked {\n    const { instruction, transferFeeInstruction, amount, decimals, fee } =\n        transferCheckedWithFeeInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            amount,\n            decimals,\n            fee,\n        },\n    };\n}\n\n// WithdrawWithheldTokensFromMint\nexport interface WithdrawWithheldTokensFromMintInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint;\n}\n\nexport const withdrawWithheldTokensFromMintInstructionData = struct<WithdrawWithheldTokensFromMintInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n]);\n\n/**\n * Construct a WithdrawWithheldTokensFromMint instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromMintInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    signers: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(withdrawWithheldTokensFromMintInstructionData.span);\n    withdrawWithheldTokensFromMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint,\n        },\n        data\n    );\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        signers\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromMint instruction */\nexport interface DecodedWithdrawWithheldTokensFromMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedWithdrawWithheldTokensFromMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== withdrawWithheldTokensFromMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, signers },\n        data,\n    } = decodeWithdrawWithheldTokensFromMintInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromMint\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromMint instruction */\nexport interface DecodedWithdrawWithheldTokensFromMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromMintInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...signers],\n    data,\n}: TransactionInstruction): DecodedWithdrawWithheldTokensFromMintInstructionUnchecked {\n    const { instruction, transferFeeInstruction } = withdrawWithheldTokensFromMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\n\n// WithdrawWithheldTokensFromAccounts\nexport interface WithdrawWithheldTokensFromAccountsInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts;\n    numTokenAccounts: number;\n}\n\nexport const withdrawWithheldTokensFromAccountsInstructionData =\n    struct<WithdrawWithheldTokensFromAccountsInstructionData>([\n        u8('instruction'),\n        u8('transferFeeInstruction'),\n        u8('numTokenAccounts'),\n    ]);\n\n/**\n * Construct a WithdrawWithheldTokensFromAccounts instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createWithdrawWithheldTokensFromAccountsInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    signers: (Signer | PublicKey)[],\n    sources: PublicKey[],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(withdrawWithheldTokensFromAccountsInstructionData.span);\n    withdrawWithheldTokensFromAccountsInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts,\n            numTokenAccounts: sources.length,\n        },\n        data\n    );\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        signers\n    );\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromAccounts instruction */\nexport interface DecodedWithdrawWithheldTokensFromAccountsInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts;\n        numTokenAccounts: number;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromAccounts instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedWithdrawWithheldTokensFromAccountsInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== withdrawWithheldTokensFromAccountsInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, signers, sources },\n        data,\n    } = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromAccounts\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n            sources: sources ? sources : null,\n        },\n        data,\n    };\n}\n\n/** A decoded, valid WithdrawWithheldTokensFromAccounts instruction */\nexport interface DecodedWithdrawWithheldTokensFromAccountsInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        signers: AccountMeta[] | null;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts;\n        numTokenAccounts: number;\n    };\n}\n\n/**\n * Decode a WithdrawWithheldTokensFromAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked({\n    programId,\n    keys,\n    data,\n}: TransactionInstruction): DecodedWithdrawWithheldTokensFromAccountsInstructionUnchecked {\n    const { instruction, transferFeeInstruction, numTokenAccounts } =\n        withdrawWithheldTokensFromAccountsInstructionData.decode(data);\n    const [mint, destination, authority, signers, sources] = [\n        keys[0],\n        keys[1],\n        keys[2],\n        keys.slice(3, 3 + numTokenAccounts),\n        keys.slice(-1 * numTokenAccounts),\n    ];\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            numTokenAccounts,\n        },\n    };\n}\n\n// HarvestWithheldTokensToMint\n\nexport interface HarvestWithheldTokensToMintInstructionData {\n    instruction: TokenInstruction.TransferFeeExtension;\n    transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint;\n}\n\nexport const harvestWithheldTokensToMintInstructionData = struct<HarvestWithheldTokensToMintInstructionData>([\n    u8('instruction'),\n    u8('transferFeeInstruction'),\n]);\n\n/**\n * Construct a HarvestWithheldTokensToMint instruction\n *\n * @param mint              The token mint\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createHarvestWithheldTokensToMintInstruction(\n    mint: PublicKey,\n    sources: PublicKey[],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(harvestWithheldTokensToMintInstructionData.span);\n    harvestWithheldTokensToMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferFeeExtension,\n            transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint,\n        },\n        data\n    );\n    const keys: AccountMeta[] = [];\n    keys.push({ pubkey: mint, isSigner: false, isWritable: true });\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid HarvestWithheldTokensToMint instruction */\nexport interface DecodedHarvestWithheldTokensToMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint;\n    };\n}\n\n/**\n * Decode a HarvestWithheldTokensToMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedHarvestWithheldTokensToMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== harvestWithheldTokensToMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, sources },\n        data,\n    } = decodeHarvestWithheldTokensToMintInstructionUnchecked(instruction);\n    if (\n        data.instruction !== TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.HarvestWithheldTokensToMint\n    )\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data,\n    };\n}\n\n/** A decoded, valid HarvestWithheldTokensToMint instruction */\nexport interface DecodedHarvestWithheldTokensToMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        sources: AccountMeta[] | null;\n    };\n    data: {\n        instruction: TokenInstruction.TransferFeeExtension;\n        transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint;\n    };\n}\n\n/**\n * Decode a HarvestWithheldTokensToMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeHarvestWithheldTokensToMintInstructionUnchecked({\n    programId,\n    keys: [mint, ...sources],\n    data,\n}: TransactionInstruction): DecodedHarvestWithheldTokensToMintInstructionUnchecked {\n    const { instruction, transferFeeInstruction } = harvestWithheldTokensToMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\n", "import { Layout } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\n\nexport class COptionPublicKeyLayout extends Layout<PublicKey | null> {\n    private publicKeyLayout: Layout<PublicKey>;\n\n    constructor(property?: string | undefined) {\n        super(-1, property);\n        this.publicKeyLayout = publicKey();\n    }\n\n    decode(buffer: Uint8Array, offset: number = 0): PublicKey | null {\n        const option = buffer[offset];\n        if (option === 0) {\n            return null;\n        }\n        return this.publicKeyLayout.decode(buffer, offset + 1);\n    }\n\n    encode(src: PublicKey | null, buffer: Uint8Array, offset: number = 0): number {\n        if (src === null) {\n            buffer[offset] = 0;\n            return 1;\n        } else {\n            buffer[offset] = 1;\n            this.publicKeyLayout.encode(src, buffer, offset + 1);\n            return 33;\n        }\n    }\n\n    getSpan(buffer?: Uint8Array, offset: number = 0): number {\n        if (buffer) {\n            const option = buffer[offset];\n            return option === 0 ? 1 : 1 + this.publicKeyLayout.span;\n        }\n        return 1 + this.publicKeyLayout.span;\n    }\n}\n", "import type { Layout } from '@solana/buffer-layout';\nimport { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Account } from '../../state/account.js';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\n\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = BigInt(MAX_FEE_BASIS_POINTS);\n\n/** TransferFeeConfig as stored by the program */\nexport interface TransferFee {\n    /** First epoch where the transfer fee takes effect */\n    epoch: bigint;\n    /** Maximum fee assessed on transfers, expressed as an amount of tokens */\n    maximumFee: bigint;\n    /**\n     * Amount of transfer collected as fees, expressed as basis points of the\n     * transfer amount, ie. increments of 0.01%\n     */\n    transferFeeBasisPoints: number;\n}\n\n/** Transfer fee extension data for mints. */\nexport interface TransferFeeConfig {\n    /** Optional authority to set the fee */\n    transferFeeConfigAuthority: PublicKey;\n    /** Withdraw from mint instructions must be signed by this key */\n    withdrawWithheldAuthority: PublicKey;\n    /** Withheld transfer fee tokens that have been moved to the mint for withdrawal */\n    withheldAmount: bigint;\n    /** Older transfer fee, used if the current epoch < newerTransferFee.epoch */\n    olderTransferFee: TransferFee;\n    /** Newer transfer fee, used if the current epoch >= newerTransferFee.epoch */\n    newerTransferFee: TransferFee;\n}\n\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property?: string): Layout<TransferFee> {\n    return struct<TransferFee>([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n\n/** Calculate the transfer fee */\nexport function calculateFee(transferFee: TransferFee, preFeeAmount: bigint): bigint {\n    const transferFeeBasisPoints = transferFee.transferFeeBasisPoints;\n    if (transferFeeBasisPoints === 0 || preFeeAmount === BigInt(0)) {\n        return BigInt(0);\n    } else {\n        const numerator = preFeeAmount * BigInt(transferFeeBasisPoints);\n        const rawFee = (numerator + ONE_IN_BASIS_POINTS - BigInt(1)) / ONE_IN_BASIS_POINTS;\n        const fee = rawFee > transferFee.maximumFee ? transferFee.maximumFee : rawFee;\n        return BigInt(fee);\n    }\n}\n\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct<TransferFeeConfig>([\n    publicKey('transferFeeConfigAuthority'),\n    publicKey('withdrawWithheldAuthority'),\n    u64('withheldAmount'),\n    transferFeeLayout('olderTransferFee'),\n    transferFeeLayout('newerTransferFee'),\n]);\n\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n\n/** Get the fee for given epoch */\nexport function getEpochFee(transferFeeConfig: TransferFeeConfig, epoch: bigint): TransferFee {\n    if (epoch >= transferFeeConfig.newerTransferFee.epoch) {\n        return transferFeeConfig.newerTransferFee;\n    } else {\n        return transferFeeConfig.olderTransferFee;\n    }\n}\n\n/** Calculate the fee for the given epoch and input amount */\nexport function calculateEpochFee(transferFeeConfig: TransferFeeConfig, epoch: bigint, preFeeAmount: bigint): bigint {\n    const transferFee = getEpochFee(transferFeeConfig, epoch);\n    return calculateFee(transferFee, preFeeAmount);\n}\n\n/** Transfer fee amount data for accounts. */\nexport interface TransferFeeAmount {\n    /** Withheld transfer fee tokens that can be claimed by the fee authority */\n    withheldAmount: bigint;\n}\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct<TransferFeeAmount>([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\n\nexport function getTransferFeeConfig(mint: Mint): TransferFeeConfig | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeConfigLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\nexport function getTransferFeeAmount(account: Account): TransferFeeAmount | null {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeAmountLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n", "export * from './actions.js';\nexport * from './instructions.js';\nexport * from './seeds.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, Signer, TransactionSignature } from '@solana/web3.js';\nimport type { PublicKey } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../../constants.js';\nimport {\n    createInitializeTransferHookInstruction,\n    createTransferCheckedWithFeeAndTransferHookInstruction,\n    createTransferCheckedWithTransferHookInstruction,\n    createUpdateTransferHookInstruction,\n} from './instructions.js';\n\n/**\n * Initialize a transfer hook on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to initialize with extension\n * @param authority             Transfer hook authority account\n * @param transferHookProgramId The transfer hook program account\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeTransferHook(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    authority: PublicKey,\n    transferHookProgramId: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(\n        createInitializeTransferHookInstruction(mint, authority, transferHookProgramId, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n\n/**\n * Update the transfer hook program on a mint\n *\n * @param connection            Connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint to modify\n * @param transferHookProgramId New transfer hook program account\n * @param authority             Transfer hook update authority\n * @param multiSigners          Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions        Options for confirming the transaction\n * @param programId             SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateTransferHook(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    transferHookProgramId: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateTransferHookInstruction(mint, authorityPublicKey, transferHookProgramId, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Transfer tokens from one account to another, asserting the token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithTransferHook(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        await createTransferCheckedWithTransferHookInstruction(\n            connection,\n            source,\n            mint,\n            destination,\n            authorityPublicKey,\n            amount,\n            decimals,\n            signers,\n            confirmOptions?.commitment,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param authority      Authority of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param fee            The calculated fee for the transfer fee extension\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFeeAndTransferHook(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        await createTransferCheckedWithFeeAndTransferHookInstruction(\n            connection,\n            source,\n            mint,\n            destination,\n            authorityPublicKey,\n            amount,\n            decimals,\n            fee,\n            signers,\n            confirmOptions?.commitment,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, Commitment, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { createTransferCheckedInstruction } from '../../instructions/transferChecked.js';\nimport { createTransferCheckedWithFeeInstruction } from '../transferFee/instructions.js';\nimport { getMint } from '../../state/mint.js';\nimport { getExtraAccountMetaAddress, getExtraAccountMetas, getTransferHook, resolveExtraAccountMeta } from './state.js';\n\nexport enum TransferHookInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\n/** Deserialized instruction for the initiation of an transfer hook */\nexport interface InitializeTransferHookInstructionData {\n    instruction: TokenInstruction.TransferHookExtension;\n    transferHookInstruction: TransferHookInstruction.Initialize;\n    authority: PublicKey;\n    transferHookProgramId: PublicKey;\n}\n\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeTransferHookInstructionData = struct<InitializeTransferHookInstructionData>([\n    u8('instruction'),\n    u8('transferHookInstruction'),\n    publicKey('authority'),\n    publicKey('transferHookProgramId'),\n]);\n\n/**\n * Construct an InitializeTransferHook instruction\n *\n * @param mint                  Token mint account\n * @param authority             Transfer hook authority account\n * @param transferHookProgramId Transfer hook program account\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeTransferHookInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    transferHookProgramId: PublicKey,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeTransferHookInstructionData.span);\n    initializeTransferHookInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferHookExtension,\n            transferHookInstruction: TransferHookInstruction.Initialize,\n            authority,\n            transferHookProgramId,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** Deserialized instruction for the initiation of an transfer hook */\nexport interface UpdateTransferHookInstructionData {\n    instruction: TokenInstruction.TransferHookExtension;\n    transferHookInstruction: TransferHookInstruction.Update;\n    transferHookProgramId: PublicKey;\n}\n\n/** The struct that represents the instruction data as it is read by the program */\nexport const updateTransferHookInstructionData = struct<UpdateTransferHookInstructionData>([\n    u8('instruction'),\n    u8('transferHookInstruction'),\n    publicKey('transferHookProgramId'),\n]);\n\n/**\n * Construct an UpdateTransferHook instruction\n *\n * @param mint                  Mint to update\n * @param authority             The mint's transfer hook authority\n * @param transferHookProgramId The new transfer hook program account\n * @param signers               The signer account(s) for a multisig\n * @param tokenProgramId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateTransferHookInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    transferHookProgramId: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n    const data = Buffer.alloc(updateTransferHookInstructionData.span);\n    updateTransferHookInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferHookExtension,\n            transferHookInstruction: TransferHookInstruction.Update,\n            transferHookProgramId,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\nfunction deEscalateAccountMeta(accountMeta: AccountMeta, accountMetas: AccountMeta[]): AccountMeta {\n    const maybeHighestPrivileges = accountMetas\n        .filter((x) => x.pubkey.equals(accountMeta.pubkey))\n        .reduce<{ isSigner: boolean; isWritable: boolean } | undefined>((acc, x) => {\n            if (!acc) return { isSigner: x.isSigner, isWritable: x.isWritable };\n            return { isSigner: acc.isSigner || x.isSigner, isWritable: acc.isWritable || x.isWritable };\n        }, undefined);\n    if (maybeHighestPrivileges) {\n        const { isSigner, isWritable } = maybeHighestPrivileges;\n        if (!isSigner && isSigner !== accountMeta.isSigner) {\n            accountMeta.isSigner = false;\n        }\n        if (!isWritable && isWritable !== accountMeta.isWritable) {\n            accountMeta.isWritable = false;\n        }\n    }\n    return accountMeta;\n}\n\n/**\n * Construct an `ExecuteInstruction` for a transfer hook program, without the\n * additional accounts\n *\n * @param programId             The program ID of the transfer hook program\n * @param source                The source account\n * @param mint                  The mint account\n * @param destination           The destination account\n * @param owner                 Owner of the source account\n * @param validateStatePubkey   The validate state pubkey\n * @param amount                The amount of tokens to transfer\n * @returns Instruction to add to a transaction\n */\nexport function createExecuteInstruction(\n    programId: PublicKey,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    validateStatePubkey: PublicKey,\n    amount: bigint\n): TransactionInstruction {\n    const keys = [source, mint, destination, owner, validateStatePubkey].map((pubkey) => ({\n        pubkey,\n        isSigner: false,\n        isWritable: false,\n    }));\n\n    const data = Buffer.alloc(16);\n    data.set(Buffer.from([105, 37, 101, 197, 75, 251, 102, 26]), 0); // `ExecuteInstruction` discriminator\n    data.writeBigUInt64LE(BigInt(amount), 8);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/**\n * Adds all the extra accounts needed for a transfer hook to an instruction.\n *\n * Note this will modify the instruction passed in.\n *\n * @param connection            Connection to use\n * @param instruction           The instruction to add accounts to\n * @param programId             Transfer hook program ID\n * @param source                The source account\n * @param mint                  The mint account\n * @param destination           The destination account\n * @param owner                 Owner of the source account\n * @param amount                The amount of tokens to transfer\n * @param commitment            Commitment to use\n */\nexport async function addExtraAccountMetasForExecute(\n    connection: Connection,\n    instruction: TransactionInstruction,\n    programId: PublicKey,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    commitment?: Commitment\n) {\n    const validateStatePubkey = getExtraAccountMetaAddress(mint, programId);\n    const validateStateAccount = await connection.getAccountInfo(validateStatePubkey, commitment);\n    if (validateStateAccount == null) {\n        return instruction;\n    }\n    const validateStateData = getExtraAccountMetas(validateStateAccount);\n\n    // Check to make sure the provided keys are in the instruction\n    if (![source, mint, destination, owner].every((key) => instruction.keys.some((meta) => meta.pubkey.equals(key)))) {\n        throw new Error('Missing required account in instruction');\n    }\n\n    const executeInstruction = createExecuteInstruction(\n        programId,\n        source,\n        mint,\n        destination,\n        owner,\n        validateStatePubkey,\n        BigInt(amount)\n    );\n\n    for (const extraAccountMeta of validateStateData) {\n        executeInstruction.keys.push(\n            deEscalateAccountMeta(\n                await resolveExtraAccountMeta(\n                    connection,\n                    extraAccountMeta,\n                    executeInstruction.keys,\n                    executeInstruction.data,\n                    executeInstruction.programId\n                ),\n                executeInstruction.keys\n            )\n        );\n    }\n\n    // Add only the extra accounts resolved from the validation state\n    instruction.keys.push(...executeInstruction.keys.slice(5));\n\n    // Add the transfer hook program ID and the validation state account\n    instruction.keys.push({ pubkey: programId, isSigner: false, isWritable: false });\n    instruction.keys.push({ pubkey: validateStatePubkey, isSigner: false, isWritable: false });\n}\n\n/**\n * Construct an transferChecked instruction with extra accounts for transfer hook\n *\n * @param connection            Connection to use\n * @param source                Source account\n * @param mint                  Mint to update\n * @param destination           Destination account\n * @param owner                 Owner of the source account\n * @param amount                The amount of tokens to transfer\n * @param decimals              Number of decimals in transfer amount\n * @param multiSigners          The signer account(s) for a multisig\n * @param commitment            Commitment to use\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport async function createTransferCheckedWithTransferHookInstruction(\n    connection: Connection,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n) {\n    const instruction = createTransferCheckedInstruction(\n        source,\n        mint,\n        destination,\n        owner,\n        amount,\n        decimals,\n        multiSigners,\n        programId\n    );\n\n    const mintInfo = await getMint(connection, mint, commitment, programId);\n    const transferHook = getTransferHook(mintInfo);\n\n    if (transferHook) {\n        await addExtraAccountMetasForExecute(\n            connection,\n            instruction,\n            transferHook.programId,\n            source,\n            mint,\n            destination,\n            owner,\n            amount,\n            commitment\n        );\n    }\n\n    return instruction;\n}\n\n/**\n * Construct an transferChecked instruction with extra accounts for transfer hook\n *\n * @param connection            Connection to use\n * @param source                Source account\n * @param mint                  Mint to update\n * @param destination           Destination account\n * @param owner                 Owner of the source account\n * @param amount                The amount of tokens to transfer\n * @param decimals              Number of decimals in transfer amount\n * @param fee                   The calculated fee for the transfer fee extension\n * @param multiSigners          The signer account(s) for a multisig\n * @param commitment            Commitment to use\n * @param programId             SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport async function createTransferCheckedWithFeeAndTransferHookInstruction(\n    connection: Connection,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: bigint,\n    decimals: number,\n    fee: bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n) {\n    const instruction = createTransferCheckedWithFeeInstruction(\n        source,\n        mint,\n        destination,\n        owner,\n        amount,\n        decimals,\n        fee,\n        multiSigners,\n        programId\n    );\n\n    const mintInfo = await getMint(connection, mint, commitment, programId);\n    const transferHook = getTransferHook(mintInfo);\n\n    if (transferHook) {\n        await addExtraAccountMetasForExecute(\n            connection,\n            instruction,\n            transferHook.programId,\n            source,\n            mint,\n            destination,\n            owner,\n            amount,\n            commitment\n        );\n    }\n\n    return instruction;\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferCheckedInstructionData {\n    instruction: TokenInstruction.TransferChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferChecked instruction */\nexport interface DecodedTransferCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.TransferChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, owner, multiSigners },\n        data,\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferChecked instruction */\nexport interface DecodedTransferCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n", "import { blob, greedy, seq, struct, u32, u8 } from '@solana/buffer-layout';\nimport type { Mint } from '../../state/mint.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nimport type { AccountInfo, AccountMeta, Connection } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { Account } from '../../state/account.js';\nimport { TokenTransferHookAccountNotFound } from '../../errors.js';\nimport { unpackSeeds } from './seeds.js';\n\n/** TransferHook as stored by the program */\nexport interface TransferHook {\n    /** The transfer hook update authrority */\n    authority: PublicKey;\n    /** The transfer hook program account */\n    programId: PublicKey;\n}\n\n/** Buffer layout for de/serializing a transfer hook extension */\nexport const TransferHookLayout = struct<TransferHook>([publicKey('authority'), publicKey('programId')]);\n\nexport const TRANSFER_HOOK_SIZE = TransferHookLayout.span;\n\nexport function getTransferHook(mint: Mint): TransferHook | null {\n    const extensionData = getExtensionData(ExtensionType.TransferHook, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferHookLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\n/** TransferHookAccount as stored by the program */\nexport interface TransferHookAccount {\n    /**\n     * Whether or not this account is currently tranferring tokens\n     * True during the transfer hook cpi, otherwise false\n     */\n    transferring: boolean;\n}\n\n/** Buffer layout for de/serializing a transfer hook account extension */\nexport const TransferHookAccountLayout = struct<TransferHookAccount>([bool('transferring')]);\n\nexport const TRANSFER_HOOK_ACCOUNT_SIZE = TransferHookAccountLayout.span;\n\nexport function getTransferHookAccount(account: Account): TransferHookAccount | null {\n    const extensionData = getExtensionData(ExtensionType.TransferHookAccount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferHookAccountLayout.decode(extensionData);\n    } else {\n        return null;\n    }\n}\n\nexport function getExtraAccountMetaAddress(mint: PublicKey, programId: PublicKey): PublicKey {\n    const seeds = [Buffer.from('extra-account-metas'), mint.toBuffer()];\n    return PublicKey.findProgramAddressSync(seeds, programId)[0];\n}\n\n/** ExtraAccountMeta as stored by the transfer hook program */\nexport interface ExtraAccountMeta {\n    discriminator: number;\n    addressConfig: Uint8Array;\n    isSigner: boolean;\n    isWritable: boolean;\n}\n\n/** Buffer layout for de/serializing an ExtraAccountMeta */\nexport const ExtraAccountMetaLayout = struct<ExtraAccountMeta>([\n    u8('discriminator'),\n    blob(32, 'addressConfig'),\n    bool('isSigner'),\n    bool('isWritable'),\n]);\n\nexport interface ExtraAccountMetaList {\n    count: number;\n    extraAccounts: ExtraAccountMeta[];\n}\n\n/** Buffer layout for de/serializing a list of ExtraAccountMeta prefixed by a u32 length */\nexport const ExtraAccountMetaListLayout = struct<ExtraAccountMetaList>([\n    u32('count'),\n    seq<ExtraAccountMeta>(ExtraAccountMetaLayout, greedy(ExtraAccountMetaLayout.span), 'extraAccounts'),\n]);\n\n/** Buffer layout for de/serializing a list of ExtraAccountMetaAccountData prefixed by a u32 length */\nexport interface ExtraAccountMetaAccountData {\n    instructionDiscriminator: bigint;\n    length: number;\n    extraAccountsList: ExtraAccountMetaList;\n}\n\n/** Buffer layout for de/serializing an ExtraAccountMetaAccountData */\nexport const ExtraAccountMetaAccountDataLayout = struct<ExtraAccountMetaAccountData>([\n    u64('instructionDiscriminator'),\n    u32('length'),\n    ExtraAccountMetaListLayout.replicate('extraAccountsList'),\n]);\n\n/** Unpack an extra account metas account and parse the data into a list of ExtraAccountMetas */\nexport function getExtraAccountMetas(account: AccountInfo<Buffer>): ExtraAccountMeta[] {\n    const extraAccountsList = ExtraAccountMetaAccountDataLayout.decode(account.data).extraAccountsList;\n    return extraAccountsList.extraAccounts.slice(0, extraAccountsList.count);\n}\n\n/** Take an ExtraAccountMeta and construct that into an acutal AccountMeta */\nexport async function resolveExtraAccountMeta(\n    connection: Connection,\n    extraMeta: ExtraAccountMeta,\n    previousMetas: AccountMeta[],\n    instructionData: Buffer,\n    transferHookProgramId: PublicKey\n): Promise<AccountMeta> {\n    if (extraMeta.discriminator === 0) {\n        return {\n            pubkey: new PublicKey(extraMeta.addressConfig),\n            isSigner: extraMeta.isSigner,\n            isWritable: extraMeta.isWritable,\n        };\n    }\n\n    let programId = PublicKey.default;\n\n    if (extraMeta.discriminator === 1) {\n        programId = transferHookProgramId;\n    } else {\n        const accountIndex = extraMeta.discriminator - (1 << 7);\n        if (previousMetas.length <= accountIndex) {\n            throw new TokenTransferHookAccountNotFound();\n        }\n        programId = previousMetas[accountIndex].pubkey;\n    }\n\n    const seeds = await unpackSeeds(extraMeta.addressConfig, previousMetas, instructionData, connection);\n    const pubkey = PublicKey.findProgramAddressSync(seeds, programId)[0];\n\n    return { pubkey, isSigner: extraMeta.isSigner, isWritable: extraMeta.isWritable };\n}\n", "import type { AccountMeta, Connection } from '@solana/web3.js';\nimport { TokenTransferHookAccountDataNotFound, TokenTransferHookInvalidSeed } from '../../errors.js';\n\ninterface Seed {\n    data: Buffer;\n    packedLength: number;\n}\n\nconst DISCRIMINATOR_SPAN = 1;\nconst LITERAL_LENGTH_SPAN = 1;\nconst INSTRUCTION_ARG_OFFSET_SPAN = 1;\nconst INSTRUCTION_ARG_LENGTH_SPAN = 1;\nconst ACCOUNT_KEY_INDEX_SPAN = 1;\nconst ACCOUNT_DATA_ACCOUNT_INDEX_SPAN = 1;\nconst ACCOUNT_DATA_OFFSET_SPAN = 1;\nconst ACCOUNT_DATA_LENGTH_SPAN = 1;\n\nfunction unpackSeedLiteral(seeds: Uint8Array): Seed {\n    if (seeds.length < 1) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    const [length, ...rest] = seeds;\n    if (rest.length < length) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    return {\n        data: Buffer.from(rest.slice(0, length)),\n        packedLength: DISCRIMINATOR_SPAN + LITERAL_LENGTH_SPAN + length,\n    };\n}\n\nfunction unpackSeedInstructionArg(seeds: Uint8Array, instructionData: Buffer): Seed {\n    if (seeds.length < 2) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    const [index, length] = seeds;\n    if (instructionData.length < length + index) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    return {\n        data: instructionData.subarray(index, index + length),\n        packedLength: DISCRIMINATOR_SPAN + INSTRUCTION_ARG_OFFSET_SPAN + INSTRUCTION_ARG_LENGTH_SPAN,\n    };\n}\n\nfunction unpackSeedAccountKey(seeds: Uint8Array, previousMetas: AccountMeta[]): Seed {\n    if (seeds.length < 1) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    const [index] = seeds;\n    if (previousMetas.length <= index) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    return {\n        data: previousMetas[index].pubkey.toBuffer(),\n        packedLength: DISCRIMINATOR_SPAN + ACCOUNT_KEY_INDEX_SPAN,\n    };\n}\n\nasync function unpackSeedAccountData(\n    seeds: Uint8Array,\n    previousMetas: AccountMeta[],\n    connection: Connection\n): Promise<Seed> {\n    if (seeds.length < 3) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    const [accountIndex, dataIndex, length] = seeds;\n    if (previousMetas.length <= accountIndex) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    const accountInfo = await connection.getAccountInfo(previousMetas[accountIndex].pubkey);\n    if (accountInfo == null) {\n        throw new TokenTransferHookAccountDataNotFound();\n    }\n    if (accountInfo.data.length < dataIndex + length) {\n        throw new TokenTransferHookInvalidSeed();\n    }\n    return {\n        data: accountInfo.data.subarray(dataIndex, dataIndex + length),\n        packedLength:\n            DISCRIMINATOR_SPAN + ACCOUNT_DATA_ACCOUNT_INDEX_SPAN + ACCOUNT_DATA_OFFSET_SPAN + ACCOUNT_DATA_LENGTH_SPAN,\n    };\n}\n\nasync function unpackFirstSeed(\n    seeds: Uint8Array,\n    previousMetas: AccountMeta[],\n    instructionData: Buffer,\n    connection: Connection\n): Promise<Seed | null> {\n    const [discriminator, ...rest] = seeds;\n    const remaining = new Uint8Array(rest);\n    switch (discriminator) {\n        case 0:\n            return null;\n        case 1:\n            return unpackSeedLiteral(remaining);\n        case 2:\n            return unpackSeedInstructionArg(remaining, instructionData);\n        case 3:\n            return unpackSeedAccountKey(remaining, previousMetas);\n        case 4:\n            return unpackSeedAccountData(remaining, previousMetas, connection);\n        default:\n            throw new TokenTransferHookInvalidSeed();\n    }\n}\n\nexport async function unpackSeeds(\n    seeds: Uint8Array,\n    previousMetas: AccountMeta[],\n    instructionData: Buffer,\n    connection: Connection\n): Promise<Buffer[]> {\n    const unpackedSeeds: Buffer[] = [];\n    let i = 0;\n    while (i < 32) {\n        const seed = await unpackFirstSeed(seeds.slice(i), previousMetas, instructionData, connection);\n        if (seed == null) {\n            break;\n        }\n        unpackedSeeds.push(seed.data);\n        i += seed.packedLength;\n    }\n    return unpackedSeeds;\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeAccountInstructionData {\n    instruction: TokenInstruction.InitializeAccount;\n}\n\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct<InitializeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeAccountInstructionData.span);\n    initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, rent },\n        data,\n    } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: initializeAccountInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n", "import type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\n\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.alloc(0),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.from([1]),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\nfunction buildAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    instructionData: Buffer,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(\n    nestedAssociatedToken: PublicKey,\n    nestedMint: PublicKey,\n    destinationAssociatedToken: PublicKey,\n    ownerAssociatedToken: PublicKey,\n    ownerMint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountIdempotentInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Create and initialize a new associated token account\n * The instruction will succeed even if the associated token account already exists\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new or existing associated token account\n */\nexport async function createAssociatedTokenAccountIdempotent(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountIdempotentInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MINT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n\n/** TODO: docs */\nexport interface InitializeMint2InstructionData {\n    instruction: TokenInstruction.InitializeMint2;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthority: PublicKey | null;\n}\n\n/** TODO: docs */\nexport const initializeMint2InstructionData = struct<InitializeMint2InstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    new COptionPublicKeyLayout('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMint2Instruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeMint2InstructionData.span);\n    initializeMint2InstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint2,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMint2 instruction */\nexport interface DecodedInitializeMint2Instruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint2;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMint2Instruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMint2Instruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMint2InstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializeMint2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint2) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint2 instruction */\nexport interface DecodedInitializeMint2InstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMint2InstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializeMint2InstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthority } = initializeMint2InstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(\n    connection: Connection,\n    payer: Signer,\n    signers: PublicKey[],\n    m: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MULTISIG_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializeMultisigInstructionData {\n    instruction: TokenInstruction.InitializeMultisig;\n    m: number;\n}\n\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct<InitializeMultisigInstructionData>([\n    u8('instruction'),\n    u8('m'),\n]);\n\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(\n    account: PublicKey,\n    signers: (Signer | PublicKey)[],\n    m: number,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({\n            pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n            isSigner: false,\n            isWritable: false,\n        });\n    }\n\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMultisig,\n            m,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        rent: AccountMeta;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMultisig;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMultisigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, rent, signers },\n        data,\n    } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({\n    programId,\n    keys: [account, rent, ...signers],\n    data,\n}: TransactionInstruction): DecodedInitializeMultisigInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(\n    connection: Connection,\n    payer: Signer,\n    confirmOptions?: ConfirmOptions,\n    nativeMint = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<void> {\n    const transaction = new Transaction().add(\n        createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface CreateNativeMintInstructionData {\n    instruction: TokenInstruction.CreateNativeMint;\n}\n\n/** TODO: docs */\nexport const createNativeMintInstructionData = struct<CreateNativeMintInstructionData>([u8('instruction')]);\n\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCreateNativeMintInstruction(\n    payer: PublicKey,\n    nativeMintId = NATIVE_MINT_2022,\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: nativeMintId, isSigner: false, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(createNativeMintInstructionData.span);\n    createNativeMintInstructionData.encode({ instruction: TokenInstruction.CreateNativeMint }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n", "import type { ConfirmOptions, Connection, Keypair, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(\n    connection: Connection,\n    payer: Signer,\n    owner: PublicKey,\n    amount: number,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    nativeMint = NATIVE_MINT\n): Promise<PublicKey> {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = getAssociatedTokenAddressSync(\n            nativeMint,\n            owner,\n            false,\n            programId,\n            ASSOCIATED_TOKEN_PROGRAM_ID\n        );\n\n        const transaction = new Transaction().add(\n            createAssociatedTokenAccountInstruction(\n                payer.publicKey,\n                associatedToken,\n                owner,\n                nativeMint,\n                programId,\n                ASSOCIATED_TOKEN_PROGRAM_ID\n            ),\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }),\n            createSyncNativeInstruction(associatedToken, programId)\n        );\n\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n        return associatedToken;\n    }\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface SyncNativeInstructionData {\n    instruction: TokenInstruction.SyncNative;\n}\n\n/** TODO: docs */\nexport const syncNativeInstructionData = struct<SyncNativeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account: PublicKey, programId = TOKEN_PROGRAM_ID): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SyncNative instruction */\nexport interface DecodedSyncNativeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.SyncNative;\n    };\n}\n\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSyncNativeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SyncNative instruction */\nexport interface DecodedSyncNativeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedSyncNativeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createFreezeAccountInstruction } from '../instructions/freezeAccount.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Freeze a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to freeze\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function freezeAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createFreezeAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface FreezeAccountInstructionData {\n    instruction: TokenInstruction.FreezeAccount;\n}\n\n/** TODO: docs */\nexport const freezeAccountInstructionData = struct<FreezeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a FreezeAccount instruction\n *\n * @param account      Account to freeze\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createFreezeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(freezeAccountInstructionData.span);\n    freezeAccountInstructionData.encode({ instruction: TokenInstruction.FreezeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid FreezeAccount instruction */\nexport interface DecodedFreezeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.FreezeAccount;\n    };\n}\n\n/**\n * Decode a FreezeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeFreezeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedFreezeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== freezeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, authority, multiSigners },\n        data,\n    } = decodeFreezeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.FreezeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated FreezeAccount instruction */\nexport interface DecodedFreezeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a FreezeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeFreezeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedFreezeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: freezeAccountInstructionData.decode(data),\n    };\n}\n", "import type { Commitment, ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidMintError,\n    TokenInvalidOwnerError,\n} from '../errors.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport type { Account } from '../state/account.js';\nimport { getAccount } from '../state/account.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Retrieve the associated token account, or create it if it doesn't exist\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint associated with the account to set or verify\n * @param owner                    Owner of the account to set or verify\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param commitment               Desired level of commitment for querying the state\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function getOrCreateAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    commitment?: Commitment,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<Account> {\n    const associatedToken = getAssociatedTokenAddressSync(\n        mint,\n        owner,\n        allowOwnerOffCurve,\n        programId,\n        associatedTokenProgramId\n    );\n\n    // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically.\n    let account: Account;\n    try {\n        account = await getAccount(connection, associatedToken, commitment, programId);\n    } catch (error: unknown) {\n        // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n        // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n        // TokenInvalidAccountOwnerError in this code path.\n        if (error instanceof TokenAccountNotFoundError || error instanceof TokenInvalidAccountOwnerError) {\n            // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n            try {\n                const transaction = new Transaction().add(\n                    createAssociatedTokenAccountInstruction(\n                        payer.publicKey,\n                        associatedToken,\n                        owner,\n                        mint,\n                        programId,\n                        associatedTokenProgramId\n                    )\n                );\n\n                await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n            } catch (error: unknown) {\n                // Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n                // instruction error if the associated account exists already.\n            }\n\n            // Now this should always succeed\n            account = await getAccount(connection, associatedToken, commitment, programId);\n        } else {\n            throw error;\n        }\n    }\n\n    if (!account.mint.equals(mint)) throw new TokenInvalidMintError();\n    if (!account.owner.equals(owner)) throw new TokenInvalidOwnerError();\n\n    return account;\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createMintToInstruction } from '../instructions/mintTo.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Mint tokens to an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function mintTo(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createMintToInstruction(mint, destination, authorityPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface MintToInstructionData {\n    instruction: TokenInstruction.MintTo;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const mintToInstructionData = struct<MintToInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: number | bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(mintToInstructionData.span);\n    mintToInstructionData.encode(\n        {\n            instruction: TokenInstruction.MintTo,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid MintTo instruction */\nexport interface DecodedMintToInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.MintTo;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedMintToInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, multiSigners },\n        data,\n    } = decodeMintToInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintTo) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated MintTo instruction */\nexport interface DecodedMintToInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedMintToInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createMintToCheckedInstruction } from '../instructions/mintToChecked.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Mint tokens to an account, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param decimals       Number of decimals in amount to mint\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function mintToChecked(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createMintToCheckedInstruction(mint, destination, authorityPublicKey, amount, decimals, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface MintToCheckedInstructionData {\n    instruction: TokenInstruction.MintToChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const mintToCheckedInstructionData = struct<MintToCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a MintToChecked instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param decimals     Number of decimals in amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToCheckedInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(mintToCheckedInstructionData.span);\n    mintToCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.MintToChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid MintToChecked instruction */\nexport interface DecodedMintToCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.MintToChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a MintToChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedMintToCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, multiSigners },\n        data,\n    } = decodeMintToCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintToChecked) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated MintToChecked instruction */\nexport interface DecodedMintToCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a MintToChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToCheckedInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedMintToCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToCheckedInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createRecoverNestedInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Recover funds funds in an associated token account which is owned by an associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param owner                    Owner of original ATA\n * @param mint                     Mint for the original ATA\n * @param nestedMint               Mint for the nested ATA\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function recoverNested(\n    connection: Connection,\n    payer: Signer,\n    owner: Signer,\n    mint: PublicKey,\n    nestedMint: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const ownerAssociatedToken = getAssociatedTokenAddressSync(\n        mint,\n        owner.publicKey,\n        false,\n        programId,\n        associatedTokenProgramId\n    );\n\n    const destinationAssociatedToken = getAssociatedTokenAddressSync(\n        nestedMint,\n        owner.publicKey,\n        false,\n        programId,\n        associatedTokenProgramId\n    );\n\n    const nestedAssociatedToken = getAssociatedTokenAddressSync(\n        nestedMint,\n        ownerAssociatedToken,\n        true,\n        programId,\n        associatedTokenProgramId\n    );\n\n    const transaction = new Transaction().add(\n        createRecoverNestedInstruction(\n            nestedAssociatedToken,\n            nestedMint,\n            destinationAssociatedToken,\n            ownerAssociatedToken,\n            mint,\n            owner.publicKey,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, owner], confirmOptions);\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createRevokeInstruction } from '../instructions/revoke.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Revoke approval for the transfer of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function revoke(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createRevokeInstruction(account, ownerPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface RevokeInstructionData {\n    instruction: TokenInstruction.Revoke;\n}\n\n/** TODO: docs */\nexport const revokeInstructionData = struct<RevokeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRevokeInstruction(\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\n\n    const data = Buffer.alloc(revokeInstructionData.span);\n    revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Revoke instruction */\nexport interface DecodedRevokeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Revoke;\n    };\n}\n\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeRevokeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedRevokeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== revokeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, owner, multiSigners },\n        data,\n    } = decodeRevokeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Revoke) throw new TokenInvalidInstructionTypeError();\n    if (!account || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Revoke instruction */\nexport interface DecodedRevokeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeRevokeInstructionUnchecked({\n    programId,\n    keys: [account, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedRevokeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data: revokeInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport type { AuthorityType } from '../instructions/setAuthority.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setAuthority(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    currentAuthority: Signer | PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createSetAuthorityInstruction(\n            account,\n            currentAuthorityPublicKey,\n            authorityType,\n            newAuthority,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, Signer, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n\n/** Authority types defined by the program */\nexport enum AuthorityType {\n    MintTokens = 0,\n    FreezeAccount = 1,\n    AccountOwner = 2,\n    CloseAccount = 3,\n    TransferFeeConfig = 4,\n    WithheldWithdraw = 5,\n    CloseMint = 6,\n    InterestRate = 7,\n    PermanentDelegate = 8,\n    ConfidentialTransferMint = 9,\n    TransferHookProgramId = 10,\n    ConfidentialTransferFeeConfig = 11,\n    MetadataPointer = 12,\n    GroupPointer = 13,\n    GroupMemberPointer = 14,\n}\n\n/** TODO: docs */\nexport interface SetAuthorityInstructionData {\n    instruction: TokenInstruction.SetAuthority;\n    authorityType: AuthorityType;\n    newAuthority: PublicKey | null;\n}\n\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct<SetAuthorityInstructionData>([\n    u8('instruction'),\n    u8('authorityType'),\n    new COptionPublicKeyLayout('newAuthority'),\n]);\n\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(\n    account: PublicKey,\n    currentAuthority: PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.SetAuthority,\n            authorityType,\n            newAuthority,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SetAuthority instruction */\nexport interface DecodedSetAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        currentAuthority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.SetAuthority;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSetAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, currentAuthority, multiSigners },\n        data,\n    } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SetAuthority instruction */\nexport interface DecodedSetAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        currentAuthority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedSetAuthorityInstructionUnchecked {\n    const { instruction, authorityType, newAuthority } = setAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority,\n        },\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\n\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function syncNative(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createThawAccountInstruction } from '../instructions/thawAccount.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Thaw (unfreeze) a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to thaw\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function thawAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createThawAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface ThawAccountInstructionData {\n    instruction: TokenInstruction.ThawAccount;\n}\n\n/** TODO: docs */\nexport const thawAccountInstructionData = struct<ThawAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createThawAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(thawAccountInstructionData.span);\n    thawAccountInstructionData.encode({ instruction: TokenInstruction.ThawAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid ThawAccount instruction */\nexport interface DecodedThawAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.ThawAccount;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeThawAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedThawAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== thawAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, authority, multiSigners },\n        data,\n    } = decodeThawAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ThawAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated ThawAccount instruction */\nexport interface DecodedThawAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeThawAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedThawAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: thawAccountInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createTransferInstruction } from '../instructions/transfer.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Transfer tokens from one account to another\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transfer(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferInstruction(source, destination, ownerPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferInstructionData {\n    instruction: TokenInstruction.Transfer;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const transferInstructionData = struct<TransferInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(\n    source: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferInstructionData.span);\n    transferInstructionData.encode(\n        {\n            instruction: TokenInstruction.Transfer,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Transfer instruction */\nexport interface DecodedTransferInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Transfer;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, destination, owner, multiSigners },\n        data,\n    } = decodeTransferInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\n    if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Transfer instruction */\nexport interface DecodedTransferInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({\n    programId,\n    keys: [source, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferInstructionData.decode(data),\n    };\n}\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createTransferCheckedInstruction } from '../instructions/transferChecked.js';\nimport { getSigners } from './internal.js';\n\n/**\n * Transfer tokens from one account to another, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferChecked(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "import { u64 } from '@solana/buffer-layout-utils';\nimport type { Connection, PublicKey, Signer, TransactionError } from '@solana/web3.js';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function uiAmountToAmount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID\n): Promise<bigint | TransactionError | null> {\n    const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData) {\n        const data = Buffer.from(returnData.data[0], returnData.data[1]);\n        return u64().decode(data);\n    }\n    return err;\n}\n", "import { blob, struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface UiAmountToAmountInstructionData {\n    instruction: TokenInstruction.UiAmountToAmount;\n    amount: Uint8Array;\n}\n\n/** TODO: docs */\n\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(\n    mint: PublicKey,\n    amount: string,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(buf.length, 'amount'),\n    ]);\n\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode(\n        {\n            instruction: TokenInstruction.UiAmountToAmount,\n            amount: buf,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.UiAmountToAmount;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedUiAmountToAmountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated UiAmountToAmount instruction */\nexport interface DecodedUiAmountToAmountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        amount: Uint8Array;\n    };\n}\n\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedUiAmountToAmountInstructionUnchecked {\n    const uiAmountToAmountInstructionData = struct<UiAmountToAmountInstructionData>([\n        u8('instruction'),\n        blob(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\n", "export * from './accountType.js';\nexport * from './cpiGuard/index.js';\nexport * from './defaultAccountState/index.js';\nexport * from './extensionType.js';\nexport * from './groupMemberPointer/index.js';\nexport * from './groupPointer/index.js';\nexport * from './immutableOwner.js';\nexport * from './interestBearingMint/index.js';\nexport * from './memoTransfer/index.js';\nexport * from './metadataPointer/index.js';\nexport * from './tokenGroup/index.js';\nexport * from './tokenMetadata/index.js';\nexport * from './mintCloseAuthority.js';\nexport * from './nonTransferable.js';\nexport * from './transferFee/index.js';\nexport * from './permanentDelegate.js';\nexport * from './transferHook/index.js';\n", "export * from './instructions.js';\nexport * from './state.js';\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { Signer } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\n\nexport enum GroupMemberPointerInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\nexport const initializeGroupMemberPointerData = struct<{\n    instruction: TokenInstruction.GroupMemberPointerExtension;\n    groupMemberPointerInstruction: number;\n    authority: PublicKey;\n    memberAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('groupMemberPointerInstruction'),\n    publicKey('authority'),\n    publicKey('memberAddress'),\n]);\n\n/**\n * Construct an Initialize GroupMemberPointer instruction\n *\n * @param mint            Token mint account\n * @param authority       Optional Authority that can set the member address\n * @param memberAddress   Optional Account address that holds the member\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeGroupMemberPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey | null,\n    memberAddress: PublicKey | null,\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeGroupMemberPointerData.span);\n    initializeGroupMemberPointerData.encode(\n        {\n            instruction: TokenInstruction.GroupMemberPointerExtension,\n            groupMemberPointerInstruction: GroupMemberPointerInstruction.Initialize,\n            authority: authority ?? PublicKey.default,\n            memberAddress: memberAddress ?? PublicKey.default,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n\nexport const updateGroupMemberPointerData = struct<{\n    instruction: TokenInstruction.GroupMemberPointerExtension;\n    groupMemberPointerInstruction: number;\n    memberAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('groupMemberPointerInstruction'),\n    publicKey('memberAddress'),\n]);\n\nexport function createUpdateGroupMemberPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    memberAddress: PublicKey | null,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(updateGroupMemberPointerData.span);\n    updateGroupMemberPointerData.encode(\n        {\n            instruction: TokenInstruction.GroupMemberPointerExtension,\n            groupMemberPointerInstruction: GroupMemberPointerInstruction.Update,\n            memberAddress: memberAddress ?? PublicKey.default,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n", "export * from './instructions.js';\nexport * from './state.js';\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { Signer } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\n\nexport enum GroupPointerInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\nexport const initializeGroupPointerData = struct<{\n    instruction: TokenInstruction.GroupPointerExtension;\n    groupPointerInstruction: number;\n    authority: PublicKey;\n    groupAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('groupPointerInstruction'),\n    publicKey('authority'),\n    publicKey('groupAddress'),\n]);\n\n/**\n * Construct an Initialize GroupPointer instruction\n *\n * @param mint            Token mint account\n * @param authority       Optional Authority that can set the group address\n * @param groupAddress    Optional Account address that holds the group\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeGroupPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey | null,\n    groupAddress: PublicKey | null,\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeGroupPointerData.span);\n    initializeGroupPointerData.encode(\n        {\n            instruction: TokenInstruction.GroupPointerExtension,\n            groupPointerInstruction: GroupPointerInstruction.Initialize,\n            authority: authority ?? PublicKey.default,\n            groupAddress: groupAddress ?? PublicKey.default,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n\nexport const updateGroupPointerData = struct<{\n    instruction: TokenInstruction.GroupPointerExtension;\n    groupPointerInstruction: number;\n    groupAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('groupPointerInstruction'),\n    publicKey('groupAddress'),\n]);\n\nexport function createUpdateGroupPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    groupAddress: PublicKey | null,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(updateGroupPointerData.span);\n    updateGroupPointerData.encode(\n        {\n            instruction: TokenInstruction.GroupPointerExtension,\n            groupPointerInstruction: GroupPointerInstruction.Update,\n            groupAddress: groupAddress ?? PublicKey.default,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n", "export * from './actions.js';\nexport * from './instructions.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport {\n    createInitializeInterestBearingMintInstruction,\n    createUpdateRateInterestBearingMintInstruction,\n} from './instructions.js';\n\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function createInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<PublicKey> {\n    const mintLen = getMintLen([ExtensionType.InterestBearingConfig]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: mintLen,\n            lamports,\n            programId,\n        }),\n        createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId),\n        createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateRateInterestBearingMint(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    rateAuthority: Signer,\n    rate: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<string> {\n    const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n    const transaction = new Transaction().add(\n        createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n\n/** TODO: docs */\nexport interface InitializeMintInstructionData {\n    instruction: TokenInstruction.InitializeMint;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthority: PublicKey | null;\n}\n\n/** TODO: docs */\nexport const initializeMintInstructionData = struct<InitializeMintInstructionData>([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    new COptionPublicKeyLayout('freezeAuthority'),\n]);\n\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMint,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMint instruction */\nexport interface DecodedInitializeMintInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMint;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMintInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, rent },\n        data,\n    } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMint instruction */\nexport interface DecodedInitializeMintInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        decimals: number;\n        mintAuthority: PublicKey;\n        freezeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({\n    programId,\n    keys: [mint, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeMintInstructionUnchecked {\n    const { instruction, decimals, mintAuthority, freezeAuthority } = initializeMintInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority,\n        },\n    };\n}\n", "import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\n\nexport enum InterestBearingMintInstruction {\n    Initialize = 0,\n    UpdateRate = 1,\n}\n\nexport interface InterestBearingMintInitializeInstructionData {\n    instruction: TokenInstruction.InterestBearingMintExtension;\n    interestBearingMintInstruction: InterestBearingMintInstruction.Initialize;\n    rateAuthority: PublicKey;\n    rate: number;\n}\n\nexport interface InterestBearingMintUpdateRateInstructionData {\n    instruction: TokenInstruction.InterestBearingMintExtension;\n    interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate;\n    rate: number;\n}\n\nexport const interestBearingMintInitializeInstructionData = struct<InterestBearingMintInitializeInstructionData>([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    // TODO: Make this an optional public key\n    publicKey('rateAuthority'),\n    s16('rate'),\n]);\n\nexport const interestBearingMintUpdateRateInstructionData = struct<InterestBearingMintUpdateRateInstructionData>([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    s16('rate'),\n]);\n\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeInterestBearingMintInstruction(\n    mint: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    programId = TOKEN_2022_PROGRAM_ID\n) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n    interestBearingMintInitializeInstructionData.encode(\n        {\n            instruction: TokenInstruction.InterestBearingMintExtension,\n            interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n            rateAuthority,\n            rate,\n        },\n        data\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateRateInterestBearingMintInstruction(\n    mint: PublicKey,\n    rateAuthority: PublicKey,\n    rate: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n) {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: rateAuthority, isSigner: !multiSigners.length, isWritable: false },\n        ],\n        rateAuthority,\n        multiSigners\n    );\n    const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n    interestBearingMintUpdateRateInstructionData.encode(\n        {\n            instruction: TokenInstruction.InterestBearingMintExtension,\n            interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n            rate,\n        },\n        data\n    );\n    return new TransactionInstruction({ keys, programId, data });\n}\n", "export * from './instructions.js';\nexport * from './state.js';\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { Signer } from '@solana/web3.js';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID, programSupportsExtensions } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nimport { addSigners } from '../../instructions/internal.js';\n\nexport enum MetadataPointerInstruction {\n    Initialize = 0,\n    Update = 1,\n}\n\nexport const initializeMetadataPointerData = struct<{\n    instruction: TokenInstruction.MetadataPointerExtension;\n    metadataPointerInstruction: number;\n    authority: PublicKey;\n    metadataAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('metadataPointerInstruction'),\n    publicKey('authority'),\n    publicKey('metadataAddress'),\n]);\n\n/**\n * Construct an Initialize MetadataPointer instruction\n *\n * @param mint            Token mint account\n * @param authority       Optional Authority that can set the metadata address\n * @param metadataAddress Optional Account address that holds the metadata\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMetadataPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey | null,\n    metadataAddress: PublicKey | null,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeMetadataPointerData.span);\n    initializeMetadataPointerData.encode(\n        {\n            instruction: TokenInstruction.MetadataPointerExtension,\n            metadataPointerInstruction: MetadataPointerInstruction.Initialize,\n            authority: authority ?? PublicKey.default,\n            metadataAddress: metadataAddress ?? PublicKey.default,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n\nexport const updateMetadataPointerData = struct<{\n    instruction: TokenInstruction.MetadataPointerExtension;\n    metadataPointerInstruction: number;\n    metadataAddress: PublicKey;\n}>([\n    // prettier-ignore\n    u8('instruction'),\n    u8('metadataPointerInstruction'),\n    publicKey('metadataAddress'),\n]);\n\nexport function createUpdateMetadataPointerInstruction(\n    mint: PublicKey,\n    authority: PublicKey,\n    metadataAddress: PublicKey | null,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId: PublicKey = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n\n    const keys = addSigners([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);\n\n    const data = Buffer.alloc(updateMetadataPointerData.span);\n    updateMetadataPointerData.encode(\n        {\n            instruction: TokenInstruction.MetadataPointerExtension,\n            metadataPointerInstruction: MetadataPointerInstruction.Update,\n            metadataAddress: metadataAddress ?? PublicKey.default,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data: data });\n}\n", "export * from './actions.js';\nexport * from './state.js';\n", "import type { ConfirmOptions, Connection, PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport type { Field, TokenMetadata } from '@solana/spl-token-metadata';\nimport {\n    createInitializeInstruction,\n    createRemoveKeyInstruction,\n    createUpdateAuthorityInstruction,\n    createUpdateFieldInstruction,\n    pack,\n    unpack,\n} from '@solana/spl-token-metadata';\n\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { ExtensionType, getExtensionData, getNewAccountLenForExtensionLen } from '../extensionType.js';\nimport { updateTokenMetadata } from './state.js';\nimport { TokenAccountNotFoundError } from '../../errors.js';\nimport { unpackMint } from '../../state/index.js';\n\nasync function getAdditionalRentForNewMetadata(\n    connection: Connection,\n    address: PublicKey,\n    tokenMetadata: TokenMetadata,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<number> {\n    const info = await connection.getAccountInfo(address);\n    if (!info) {\n        throw new TokenAccountNotFoundError();\n    }\n\n    const extensionLen = pack(tokenMetadata).length;\n    const newAccountLen = getNewAccountLenForExtensionLen(\n        info,\n        address,\n        ExtensionType.TokenMetadata,\n        extensionLen,\n        programId\n    );\n\n    if (newAccountLen <= info.data.length) {\n        return 0;\n    }\n\n    const newRentExemptMinimum = await connection.getMinimumBalanceForRentExemption(newAccountLen);\n\n    return newRentExemptMinimum - info.lamports;\n}\n\nasync function getAdditionalRentForUpdatedMetadata(\n    connection: Connection,\n    address: PublicKey,\n    field: string | Field,\n    value: string,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<number> {\n    const info = await connection.getAccountInfo(address);\n    if (!info) {\n        throw new TokenAccountNotFoundError();\n    }\n\n    const mint = unpackMint(address, info, programId);\n    const extensionData = getExtensionData(ExtensionType.TokenMetadata, mint.tlvData);\n    if (extensionData === null) {\n        throw new Error('TokenMetadata extension not initialized');\n    }\n\n    const updatedTokenMetadata = updateTokenMetadata(unpack(extensionData), field, value);\n    const extensionLen = pack(updatedTokenMetadata).length;\n\n    const newAccountLen = getNewAccountLenForExtensionLen(\n        info,\n        address,\n        ExtensionType.TokenMetadata,\n        extensionLen,\n        programId\n    );\n\n    if (newAccountLen <= info.data.length) {\n        return 0;\n    }\n\n    const newRentExemptMinimum = await connection.getMinimumBalanceForRentExemption(newAccountLen);\n\n    return newRentExemptMinimum - info.lamports;\n}\n\n/**\n * Initializes a TLV entry with the basic token-metadata fields.\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param mintAuthority    Mint Authority\n * @param name             Longer name of token\n * @param symbol           Shortened symbol of token\n * @param uri              URI pointing to more metadata (image, video, etc)\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataInitialize(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey,\n    mintAuthority: PublicKey | Signer,\n    name: string,\n    symbol: string,\n    uri: string,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createInitializeInstruction({\n            programId,\n            metadata: mint,\n            updateAuthority,\n            mint,\n            mintAuthority: mintAuthorityPublicKey,\n            name,\n            symbol,\n            uri,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Initializes a TLV entry with the basic token-metadata fields,\n * Includes a transfer for any additional rent-exempt SOL if required.\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param mintAuthority    Mint Authority\n * @param name             Longer name of token\n * @param symbol           Shortened symbol of token\n * @param uri              URI pointing to more metadata (image, video, etc)\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataInitializeWithRentTransfer(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey,\n    mintAuthority: PublicKey | Signer,\n    name: string,\n    symbol: string,\n    uri: string,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [mintAuthorityPublicKey, signers] = getSigners(mintAuthority, multiSigners);\n\n    const transaction = new Transaction();\n\n    const lamports = await getAdditionalRentForNewMetadata(\n        connection,\n        mint,\n        {\n            updateAuthority,\n            mint,\n            name,\n            symbol,\n            uri,\n            additionalMetadata: [],\n        },\n        programId\n    );\n\n    if (lamports > 0) {\n        transaction.add(SystemProgram.transfer({ fromPubkey: payer.publicKey, toPubkey: mint, lamports: lamports }));\n    }\n\n    transaction.add(\n        createInitializeInstruction({\n            programId,\n            metadata: mint,\n            updateAuthority,\n            mint,\n            mintAuthority: mintAuthorityPublicKey,\n            name,\n            symbol,\n            uri,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Updates a field in a token-metadata account.\n * If the field does not exist on the account, it will be created.\n * If the field does exist, it will be overwritten.\n *\n * The field can be one of the required fields (name, symbol, URI), or a\n * totally new field denoted by a \"key\" string.\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param field            Field to update in the metadata\n * @param value            Value to write for the field\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataUpdateField(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey | Signer,\n    field: string | Field,\n    value: string,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateFieldInstruction({\n            programId,\n            metadata: mint,\n            updateAuthority: updateAuthorityPublicKey,\n            field,\n            value,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Updates a field in a token-metadata account.\n * If the field does not exist on the account, it will be created.\n * If the field does exist, it will be overwritten.\n * Includes a transfer for any additional rent-exempt SOL if required.\n *\n * The field can be one of the required fields (name, symbol, URI), or a\n * totally new field denoted by a \"key\" string.\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param field            Field to update in the metadata\n * @param value            Value to write for the field\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataUpdateFieldWithRentTransfer(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey | Signer,\n    field: string | Field,\n    value: string,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n\n    const transaction = new Transaction();\n\n    const lamports = await getAdditionalRentForUpdatedMetadata(connection, mint, field, value, programId);\n\n    if (lamports > 0) {\n        transaction.add(SystemProgram.transfer({ fromPubkey: payer.publicKey, toPubkey: mint, lamports: lamports }));\n    }\n\n    transaction.add(\n        createUpdateFieldInstruction({\n            programId,\n            metadata: mint,\n            updateAuthority: updateAuthorityPublicKey,\n            field,\n            value,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n * Remove a field in a token-metadata account.\n *\n * The field can be one of the required fields (name, symbol, URI), or a\n * totally new field denoted by a \"key\" string.\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param key              Key to remove in the additional metadata portion\n * @param idempotent       When true, instruction will not error if the key does not exist\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataRemoveKey(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey | Signer,\n    key: string,\n    idempotent: boolean,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createRemoveKeyInstruction({\n            programId,\n            metadata: mint,\n            updateAuthority: updateAuthorityPublicKey,\n            key,\n            idempotent,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n\n/**\n *  Update authority\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param mint             Mint Account\n * @param updateAuthority  Update Authority\n * @param newAuthority     New authority for the token metadata, or unset\n * @param multiSigners     Signing accounts if `authority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function tokenMetadataUpdateAuthority(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    updateAuthority: PublicKey | Signer,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [updateAuthorityPublicKey, signers] = getSigners(updateAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createUpdateAuthorityInstruction({\n            programId,\n            metadata: mint,\n            oldAuthority: updateAuthorityPublicKey,\n            newAuthority,\n        })\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n", "export * from './errors.js';\nexport * from './field.js';\nexport * from './instruction.js';\nexport * from './state.js';\n", "// Errors match those in rust https://github.com/solana-labs/solana-program-library/blob/master/token-metadata/interface/src/error.rs\n// Code follows: https://github.com/solana-labs/solana-program-library/blob/master/token/js/src/errors.tshttps://github.com/solana-labs/solana-program-library/blob/master/token/js/src/errors.ts\n\n/** Base class for errors */\nexport class TokenMetadataError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if incorrect account provided */\nexport class IncorrectAccountError extends TokenMetadataError {\n    name = 'IncorrectAccountError';\n}\n\n/** Thrown if Mint has no mint authority */\nexport class MintHasNoMintAuthorityError extends TokenMetadataError {\n    name = 'MintHasNoMintAuthorityError';\n}\n\n/** Thrown if Incorrect mint authority has signed the instruction */\nexport class IncorrectMintAuthorityError extends TokenMetadataError {\n    name = 'IncorrectMintAuthorityError';\n}\n\n/** Thrown if Incorrect mint authority has signed the instruction */\nexport class IncorrectUpdateAuthorityError extends TokenMetadataError {\n    name = 'IncorrectUpdateAuthorityError';\n}\n\n/** Thrown if Token metadata has no update authority */\nexport class ImmutableMetadataError extends TokenMetadataError {\n    name = 'ImmutableMetadataError';\n}\n\n/** Thrown if Key not found in metadata account */\nexport class KeyNotFoundError extends TokenMetadataError {\n    name = 'KeyNotFoundError';\n}\n", "import type { Codec } from '@solana/codecs';\nimport { getStringCodec, getStructCodec, getTupleCodec, getUnitCodec } from '@solana/codecs';\n\nexport enum Field {\n    Name,\n    Symbol,\n    Uri,\n}\n\ntype FieldLayout = { __kind: 'Name' } | { __kind: 'Symbol' } | { __kind: 'Uri' } | { __kind: 'Key'; value: [string] };\n\nexport const getFieldCodec = () =>\n    [\n        ['Name', getUnitCodec()],\n        ['Symbol', getUnitCodec()],\n        ['Uri', getUnitCodec()],\n        ['Key', getStructCodec([['value', getTupleCodec([getStringCodec()])]])],\n    ] as const;\n\nexport function getFieldConfig(field: Field | string): FieldLayout {\n    if (field === Field.Name || field === 'Name' || field === 'name') {\n        return { __kind: 'Name' };\n    } else if (field === Field.Symbol || field === 'Symbol' || field === 'symbol') {\n        return { __kind: 'Symbol' };\n    } else if (field === Field.Uri || field === 'Uri' || field === 'uri') {\n        return { __kind: 'Uri' };\n    } else {\n        return { __kind: 'Key', value: [field] };\n    }\n}\n", "import type { Encoder } from '@solana/codecs';\nimport {\n    getBooleanEncoder,\n    getBytesEncoder,\n    getDataEnumCodec,\n    getOptionEncoder,\n    getStringEncoder,\n    getStructEncoder,\n    getTupleEncoder,\n    getU64Encoder,\n    mapEncoder,\n} from '@solana/codecs';\nimport { splDiscriminate } from '@solana/spl-type-length-value';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\n\nimport type { Field } from './field.js';\nimport { getFieldCodec, getFieldConfig } from './field.js';\n\nfunction getInstructionEncoder<T extends object>(discriminator: Uint8Array, dataEncoder: Encoder<T>): Encoder<T> {\n    return mapEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), (data: T): [Uint8Array, T] => [\n        discriminator,\n        data,\n    ]);\n}\n\nfunction getPublicKeyEncoder(): Encoder<PublicKey> {\n    return mapEncoder(getBytesEncoder({ size: 32 }), (publicKey: PublicKey) => publicKey.toBytes());\n}\n\n/**\n * Initializes a TLV entry with the basic token-metadata fields.\n *\n * Assumes that the provided mint is an SPL token mint, that the metadata\n * account is allocated and assigned to the program, and that the metadata\n * account has enough lamports to cover the rent-exempt reserve.\n */\nexport interface InitializeInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    updateAuthority: PublicKey;\n    mint: PublicKey;\n    mintAuthority: PublicKey;\n    name: string;\n    symbol: string;\n    uri: string;\n}\n\nexport function createInitializeInstruction(args: InitializeInstructionArgs): TransactionInstruction {\n    const { programId, metadata, updateAuthority, mint, mintAuthority, name, symbol, uri } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: false, isWritable: false, pubkey: updateAuthority },\n            { isSigner: false, isWritable: false, pubkey: mint },\n            { isSigner: true, isWritable: false, pubkey: mintAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:initialize_account'),\n                getStructEncoder([\n                    ['name', getStringEncoder()],\n                    ['symbol', getStringEncoder()],\n                    ['uri', getStringEncoder()],\n                ])\n            ).encode({ name, symbol, uri })\n        ),\n    });\n}\n\n/**\n * If the field does not exist on the account, it will be created.\n * If the field does exist, it will be overwritten.\n */\nexport interface UpdateFieldInstruction {\n    programId: PublicKey;\n    metadata: PublicKey;\n    updateAuthority: PublicKey;\n    field: Field | string;\n    value: string;\n}\n\nexport function createUpdateFieldInstruction(args: UpdateFieldInstruction): TransactionInstruction {\n    const { programId, metadata, updateAuthority, field, value } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:updating_field'),\n                getStructEncoder([\n                    ['field', getDataEnumCodec(getFieldCodec())],\n                    ['value', getStringEncoder()],\n                ])\n            ).encode({ field: getFieldConfig(field), value })\n        ),\n    });\n}\n\nexport interface RemoveKeyInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    updateAuthority: PublicKey;\n    key: string;\n    idempotent: boolean;\n}\n\nexport function createRemoveKeyInstruction(args: RemoveKeyInstructionArgs) {\n    const { programId, metadata, updateAuthority, key, idempotent } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: true, isWritable: false, pubkey: updateAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:remove_key_ix'),\n                getStructEncoder([\n                    ['idempotent', getBooleanEncoder()],\n                    ['key', getStringEncoder()],\n                ])\n            ).encode({ idempotent, key })\n        ),\n    });\n}\n\nexport interface UpdateAuthorityInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    oldAuthority: PublicKey;\n    newAuthority: PublicKey | null;\n}\n\nexport function createUpdateAuthorityInstruction(args: UpdateAuthorityInstructionArgs): TransactionInstruction {\n    const { programId, metadata, oldAuthority, newAuthority } = args;\n\n    return new TransactionInstruction({\n        programId,\n        keys: [\n            { isSigner: false, isWritable: true, pubkey: metadata },\n            { isSigner: true, isWritable: false, pubkey: oldAuthority },\n        ],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:update_the_authority'),\n                getStructEncoder([['newAuthority', getPublicKeyEncoder()]])\n            ).encode({ newAuthority: newAuthority ?? SystemProgram.programId })\n        ),\n    });\n}\n\nexport interface EmitInstructionArgs {\n    programId: PublicKey;\n    metadata: PublicKey;\n    start?: bigint;\n    end?: bigint;\n}\n\nexport function createEmitInstruction(args: EmitInstructionArgs): TransactionInstruction {\n    const { programId, metadata, start, end } = args;\n    return new TransactionInstruction({\n        programId,\n        keys: [{ isSigner: false, isWritable: false, pubkey: metadata }],\n        data: Buffer.from(\n            getInstructionEncoder(\n                splDiscriminate('spl_token_metadata_interface:emitter'),\n                getStructEncoder([\n                    ['start', getOptionEncoder(getU64Encoder())],\n                    ['end', getOptionEncoder(getU64Encoder())],\n                ])\n            ).encode({ start: start ?? null, end: end ?? null })\n        ),\n    });\n}\n", "import { PublicKey } from '@solana/web3.js';\nimport { getArrayCodec, getBytesCodec, getStringCodec, getStructCodec, getTupleCodec } from '@solana/codecs';\n\nexport const TOKEN_METADATA_DISCRIMINATOR = Buffer.from([112, 132, 90, 90, 11, 88, 157, 87]);\n\nconst tokenMetadataCodec = getStructCodec([\n    ['updateAuthority', getBytesCodec({ size: 32 })],\n    ['mint', getBytesCodec({ size: 32 })],\n    ['name', getStringCodec()],\n    ['symbol', getStringCodec()],\n    ['uri', getStringCodec()],\n    ['additionalMetadata', getArrayCodec(getTupleCodec([getStringCodec(), getStringCodec()]))],\n]);\n\nexport interface TokenMetadata {\n    // The authority that can sign to update the metadata\n    updateAuthority?: PublicKey;\n    // The associated mint, used to counter spoofing to be sure that metadata belongs to a particular mint\n    mint: PublicKey;\n    // The longer name of the token\n    name: string;\n    // The shortened symbol for the token\n    symbol: string;\n    // The URI pointing to richer metadata\n    uri: string;\n    // Any additional metadata about the token as key-value pairs\n    additionalMetadata: [string, string][];\n}\n\n// Checks if all elements in the array are 0\nfunction isNonePubkey(buffer: Uint8Array): boolean {\n    for (let i = 0; i < buffer.length; i++) {\n        if (buffer[i] !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Pack TokenMetadata into byte slab\nexport function pack(meta: TokenMetadata): Uint8Array {\n    // If no updateAuthority given, set it to the None/Zero PublicKey for encoding\n    const updateAuthority = meta.updateAuthority ?? PublicKey.default;\n    return tokenMetadataCodec.encode({\n        ...meta,\n        updateAuthority: updateAuthority.toBuffer(),\n        mint: meta.mint.toBuffer(),\n    });\n}\n\n// unpack byte slab into TokenMetadata\nexport function unpack(buffer: Buffer | Uint8Array): TokenMetadata {\n    const data = tokenMetadataCodec.decode(buffer);\n\n    return isNonePubkey(data.updateAuthority)\n        ? {\n              mint: new PublicKey(data.mint),\n              name: data.name,\n              symbol: data.symbol,\n              uri: data.uri,\n              additionalMetadata: data.additionalMetadata,\n          }\n        : {\n              updateAuthority: new PublicKey(data.updateAuthority),\n              mint: new PublicKey(data.mint),\n              name: data.name,\n              symbol: data.symbol,\n              uri: data.uri,\n              additionalMetadata: data.additionalMetadata,\n          };\n}\n", "import type { Commitment, Connection } from '@solana/web3.js';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { TokenMetadata } from '@solana/spl-token-metadata';\nimport { Field, unpack } from '@solana/spl-token-metadata';\n\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nimport { getMint } from '../../state/mint.js';\n\nconst getNormalizedTokenMetadataField = (field: Field | string): string => {\n    if (field === Field.Name || field === 'Name' || field === 'name') {\n        return 'name';\n    }\n\n    if (field === Field.Symbol || field === 'Symbol' || field === 'symbol') {\n        return 'symbol';\n    }\n\n    if (field === Field.Uri || field === 'Uri' || field === 'uri') {\n        return 'uri';\n    }\n\n    return field;\n};\n\nexport function updateTokenMetadata(current: TokenMetadata, key: Field | string, value: string): TokenMetadata {\n    const field = getNormalizedTokenMetadataField(key);\n\n    if (field === 'mint' || field === 'updateAuthority') {\n        throw new Error(`Cannot update ${field} via this instruction`);\n    }\n\n    // Handle updates to default keys\n    if (['name', 'symbol', 'uri'].includes(field)) {\n        return {\n            ...current,\n            [field]: value,\n        };\n    }\n\n    // Avoid mutating input, make a shallow copy\n    const additionalMetadata = [...current.additionalMetadata];\n\n    const i = current.additionalMetadata.findIndex((x) => x[0] === field);\n\n    if (i === -1) {\n        // Key was not found, add it\n        additionalMetadata.push([field, value]);\n    } else {\n        // Key was found, change value\n        additionalMetadata[i] = [field, value];\n    }\n\n    return {\n        ...current,\n        additionalMetadata,\n    };\n}\n\n/**\n * Retrieve Token Metadata Information\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token Metadata information\n */\nexport async function getTokenMetadata(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_2022_PROGRAM_ID\n): Promise<TokenMetadata | null> {\n    const mintInfo = await getMint(connection, address, commitment, programId);\n    const data = getExtensionData(ExtensionType.TokenMetadata, mintInfo.tlvData);\n\n    if (data === null) {\n        return null;\n    }\n\n    return unpack(data);\n}\n", "export * from './account.js';\nexport * from './mint.js';\nexport * from './multisig.js';\n", "export {\n    createInitializeInstruction,\n    createUpdateFieldInstruction,\n    createRemoveKeyInstruction,\n    createUpdateAuthorityInstruction,\n    createEmitInstruction,\n} from '@solana/spl-token-metadata';\nexport {\n    createInitializeGroupInstruction,\n    createUpdateGroupMaxSizeInstruction,\n    createUpdateGroupAuthorityInstruction,\n    createInitializeMemberInstruction,\n} from '@solana/spl-token-group';\n\nexport * from './associatedTokenAccount.js';\nexport * from './decode.js';\nexport * from './types.js';\n\nexport * from './initializeMint.js'; //                 0\nexport * from './initializeAccount.js'; //              1\nexport * from './initializeMultisig.js'; //             2\nexport * from './transfer.js'; //                       3\nexport * from './approve.js'; //                        4\nexport * from './revoke.js'; //                         5\nexport * from './setAuthority.js'; //                   6\nexport * from './mintTo.js'; //                         7\nexport * from './burn.js'; //                           8\nexport * from './closeAccount.js'; //                   9\nexport * from './freezeAccount.js'; //                 10\nexport * from './thawAccount.js'; //                   11\nexport * from './transferChecked.js'; //               12\nexport * from './approveChecked.js'; //                13\nexport * from './mintToChecked.js'; //                 14\nexport * from './burnChecked.js'; //                   15\nexport * from './initializeAccount2.js'; //            16\nexport * from './syncNative.js'; //                    17\nexport * from './initializeAccount3.js'; //            18\nexport * from './initializeMultisig2.js'; //           19\nexport * from './initializeMint2.js'; //               20\nexport * from './initializeImmutableOwner.js'; //      22\nexport * from './amountToUiAmount.js'; //              23\nexport * from './uiAmountToAmount.js'; //              24\nexport * from './initializeMintCloseAuthority.js'; //  25\nexport * from './reallocate.js'; //                    29\nexport * from './createNativeMint.js'; //              31\nexport * from './initializeNonTransferableMint.js'; // 32\nexport * from './initializePermanentDelegate.js'; //   35\n", "import { u8 } from '@solana/buffer-layout';\nimport type { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport type { DecodedAmountToUiAmountInstruction } from './amountToUiAmount.js';\nimport { decodeAmountToUiAmountInstruction } from './amountToUiAmount.js';\nimport type { DecodedApproveInstruction } from './approve.js';\nimport { decodeApproveInstruction } from './approve.js';\nimport type { DecodedApproveCheckedInstruction } from './approveChecked.js';\nimport { decodeApproveCheckedInstruction } from './approveChecked.js';\nimport type { DecodedBurnInstruction } from './burn.js';\nimport { decodeBurnInstruction } from './burn.js';\nimport type { DecodedBurnCheckedInstruction } from './burnChecked.js';\nimport { decodeBurnCheckedInstruction } from './burnChecked.js';\nimport type { DecodedCloseAccountInstruction } from './closeAccount.js';\nimport { decodeCloseAccountInstruction } from './closeAccount.js';\nimport type { DecodedFreezeAccountInstruction } from './freezeAccount.js';\nimport { decodeFreezeAccountInstruction } from './freezeAccount.js';\nimport type { DecodedInitializeAccountInstruction } from './initializeAccount.js';\nimport { decodeInitializeAccountInstruction } from './initializeAccount.js';\nimport type { DecodedInitializeAccount2Instruction } from './initializeAccount2.js';\nimport { decodeInitializeAccount2Instruction } from './initializeAccount2.js';\nimport type { DecodedInitializeAccount3Instruction } from './initializeAccount3.js';\nimport { decodeInitializeAccount3Instruction } from './initializeAccount3.js';\nimport type { DecodedInitializeMintInstruction } from './initializeMint.js';\nimport { decodeInitializeMintInstruction } from './initializeMint.js';\nimport type { DecodedInitializeMint2Instruction } from './initializeMint2.js';\nimport { decodeInitializeMint2Instruction } from './initializeMint2.js';\nimport type { DecodedInitializeMultisigInstruction } from './initializeMultisig.js';\nimport { decodeInitializeMultisigInstruction } from './initializeMultisig.js';\nimport type { DecodedMintToInstruction } from './mintTo.js';\nimport { decodeMintToInstruction } from './mintTo.js';\nimport type { DecodedMintToCheckedInstruction } from './mintToChecked.js';\nimport { decodeMintToCheckedInstruction } from './mintToChecked.js';\nimport type { DecodedRevokeInstruction } from './revoke.js';\nimport { decodeRevokeInstruction } from './revoke.js';\nimport type { DecodedSetAuthorityInstruction } from './setAuthority.js';\nimport { decodeSetAuthorityInstruction } from './setAuthority.js';\nimport type { DecodedSyncNativeInstruction } from './syncNative.js';\nimport { decodeSyncNativeInstruction } from './syncNative.js';\nimport type { DecodedThawAccountInstruction } from './thawAccount.js';\nimport { decodeThawAccountInstruction } from './thawAccount.js';\nimport type { DecodedTransferInstruction } from './transfer.js';\nimport { decodeTransferInstruction } from './transfer.js';\nimport type { DecodedTransferCheckedInstruction } from './transferChecked.js';\nimport { decodeTransferCheckedInstruction } from './transferChecked.js';\nimport { TokenInstruction } from './types.js';\nimport type { DecodedUiAmountToAmountInstruction } from './uiAmountToAmount.js';\nimport { decodeUiAmountToAmountInstruction } from './uiAmountToAmount.js';\n\n/** TODO: docs */\nexport type DecodedInstruction =\n    | DecodedInitializeMintInstruction\n    | DecodedInitializeAccountInstruction\n    | DecodedInitializeMultisigInstruction\n    | DecodedTransferInstruction\n    | DecodedApproveInstruction\n    | DecodedRevokeInstruction\n    | DecodedSetAuthorityInstruction\n    | DecodedMintToInstruction\n    | DecodedBurnInstruction\n    | DecodedCloseAccountInstruction\n    | DecodedFreezeAccountInstruction\n    | DecodedThawAccountInstruction\n    | DecodedTransferCheckedInstruction\n    | DecodedApproveCheckedInstruction\n    | DecodedMintToCheckedInstruction\n    | DecodedBurnCheckedInstruction\n    | DecodedInitializeAccount2Instruction\n    | DecodedSyncNativeInstruction\n    | DecodedInitializeAccount3Instruction\n    | DecodedInitializeMint2Instruction\n    | DecodedAmountToUiAmountInstruction\n    | DecodedUiAmountToAmountInstruction\n    // | DecodedInitializeMultisig2Instruction\n    // TODO: implement ^ and remove `never`\n    | never;\n\n/** TODO: docs */\nexport function decodeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInstruction {\n    if (!instruction.data.length) throw new TokenInvalidInstructionDataError();\n\n    const type = u8().decode(instruction.data);\n    if (type === TokenInstruction.InitializeMint) return decodeInitializeMintInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeAccount) return decodeInitializeAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeMultisig)\n        return decodeInitializeMultisigInstruction(instruction, programId);\n    if (type === TokenInstruction.Transfer) return decodeTransferInstruction(instruction, programId);\n    if (type === TokenInstruction.Approve) return decodeApproveInstruction(instruction, programId);\n    if (type === TokenInstruction.Revoke) return decodeRevokeInstruction(instruction, programId);\n    if (type === TokenInstruction.SetAuthority) return decodeSetAuthorityInstruction(instruction, programId);\n    if (type === TokenInstruction.MintTo) return decodeMintToInstruction(instruction, programId);\n    if (type === TokenInstruction.Burn) return decodeBurnInstruction(instruction, programId);\n    if (type === TokenInstruction.CloseAccount) return decodeCloseAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.FreezeAccount) return decodeFreezeAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.ThawAccount) return decodeThawAccountInstruction(instruction, programId);\n    if (type === TokenInstruction.TransferChecked) return decodeTransferCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.ApproveChecked) return decodeApproveCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.MintToChecked) return decodeMintToCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.BurnChecked) return decodeBurnCheckedInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeAccount2)\n        return decodeInitializeAccount2Instruction(instruction, programId);\n    if (type === TokenInstruction.SyncNative) return decodeSyncNativeInstruction(instruction, programId);\n    if (type === TokenInstruction.InitializeAccount3)\n        return decodeInitializeAccount3Instruction(instruction, programId);\n    if (type === TokenInstruction.InitializeMint2) return decodeInitializeMint2Instruction(instruction, programId);\n    if (type === TokenInstruction.AmountToUiAmount) return decodeAmountToUiAmountInstruction(instruction, programId);\n    if (type === TokenInstruction.UiAmountToAmount) return decodeUiAmountToAmountInstruction(instruction, programId);\n    // TODO: implement\n    if (type === TokenInstruction.InitializeMultisig2) throw new TokenInvalidInstructionTypeError();\n\n    throw new TokenInvalidInstructionTypeError();\n}\n\n/** TODO: docs */\nexport function isInitializeMintInstruction(decoded: DecodedInstruction): decoded is DecodedInitializeMintInstruction {\n    return decoded.data.instruction === TokenInstruction.InitializeMint;\n}\n\n/** TODO: docs */\nexport function isInitializeAccountInstruction(\n    decoded: DecodedInstruction\n): decoded is DecodedInitializeAccountInstruction {\n    return decoded.data.instruction === TokenInstruction.InitializeAccount;\n}\n\n/** TODO: docs */\nexport function isInitializeMultisigInstruction(\n    decoded: DecodedInstruction\n): decoded is DecodedInitializeMultisigInstruction {\n    return decoded.data.instruction === TokenInstruction.InitializeMultisig;\n}\n\n/** TODO: docs */\nexport function isTransferInstruction(decoded: DecodedInstruction): decoded is DecodedTransferInstruction {\n    return decoded.data.instruction === TokenInstruction.Transfer;\n}\n\n/** TODO: docs */\nexport function isApproveInstruction(decoded: DecodedInstruction): decoded is DecodedApproveInstruction {\n    return decoded.data.instruction === TokenInstruction.Approve;\n}\n\n/** TODO: docs */\nexport function isRevokeInstruction(decoded: DecodedInstruction): decoded is DecodedRevokeInstruction {\n    return decoded.data.instruction === TokenInstruction.Revoke;\n}\n\n/** TODO: docs */\nexport function isSetAuthorityInstruction(decoded: DecodedInstruction): decoded is DecodedSetAuthorityInstruction {\n    return decoded.data.instruction === TokenInstruction.SetAuthority;\n}\n\n/** TODO: docs */\nexport function isMintToInstruction(decoded: DecodedInstruction): decoded is DecodedMintToInstruction {\n    return decoded.data.instruction === TokenInstruction.MintTo;\n}\n\n/** TODO: docs */\nexport function isBurnInstruction(decoded: DecodedInstruction): decoded is DecodedBurnInstruction {\n    return decoded.data.instruction === TokenInstruction.Burn;\n}\n\n/** TODO: docs */\nexport function isCloseAccountInstruction(decoded: DecodedInstruction): decoded is DecodedCloseAccountInstruction {\n    return decoded.data.instruction === TokenInstruction.CloseAccount;\n}\n\n/** TODO: docs */\nexport function isFreezeAccountInstruction(decoded: DecodedInstruction): decoded is DecodedFreezeAccountInstruction {\n    return decoded.data.instruction === TokenInstruction.FreezeAccount;\n}\n\n/** TODO: docs */\nexport function isThawAccountInstruction(decoded: DecodedInstruction): decoded is DecodedThawAccountInstruction {\n    return decoded.data.instruction === TokenInstruction.ThawAccount;\n}\n\n/** TODO: docs */\nexport function isTransferCheckedInstruction(\n    decoded: DecodedInstruction\n): decoded is DecodedTransferCheckedInstruction {\n    return decoded.data.instruction === TokenInstruction.TransferChecked;\n}\n\n/** TODO: docs */\nexport function isApproveCheckedInstruction(decoded: DecodedInstruction): decoded is DecodedApproveCheckedInstruction {\n    return decoded.data.instruction === TokenInstruction.ApproveChecked;\n}\n\n/** TODO: docs */\nexport function isMintToCheckedInstruction(decoded: DecodedInstruction): decoded is DecodedMintToCheckedInstruction {\n    return decoded.data.instruction === TokenInstruction.MintToChecked;\n}\n\n/** TODO: docs */\nexport function isBurnCheckedInstruction(decoded: DecodedInstruction): decoded is DecodedBurnCheckedInstruction {\n    return decoded.data.instruction === TokenInstruction.BurnChecked;\n}\n\n/** TODO: docs */\nexport function isInitializeAccount2Instruction(\n    decoded: DecodedInstruction\n): decoded is DecodedInitializeAccount2Instruction {\n    return decoded.data.instruction === TokenInstruction.InitializeAccount2;\n}\n\n/** TODO: docs */\nexport function isSyncNativeInstruction(decoded: DecodedInstruction): decoded is DecodedSyncNativeInstruction {\n    return decoded.data.instruction === TokenInstruction.SyncNative;\n}\n\n/** TODO: docs */\nexport function isInitializeAccount3Instruction(\n    decoded: DecodedInstruction\n): decoded is DecodedInitializeAccount3Instruction {\n    return decoded.data.instruction === TokenInstruction.InitializeAccount3;\n}\n\n/** TODO: docs, implement */\n// export function isInitializeMultisig2Instruction(\n//     decoded: DecodedInstruction\n// ): decoded is DecodedInitializeMultisig2Instruction {\n//     return decoded.data.instruction === TokenInstruction.InitializeMultisig2;\n// }\n\n/** TODO: docs */\nexport function isInitializeMint2Instruction(\n    decoded: DecodedInstruction\n): decoded is DecodedInitializeMint2Instruction {\n    return decoded.data.instruction === TokenInstruction.InitializeMint2;\n}\n\n/** TODO: docs */\nexport function isAmountToUiAmountInstruction(\n    decoded: DecodedInstruction\n): decoded is DecodedAmountToUiAmountInstruction {\n    return decoded.data.instruction === TokenInstruction.AmountToUiAmount;\n}\n\n/** TODO: docs */\nexport function isUiamountToAmountInstruction(\n    decoded: DecodedInstruction\n): decoded is DecodedUiAmountToAmountInstruction {\n    return decoded.data.instruction === TokenInstruction.UiAmountToAmount;\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\nexport interface InitializeAccount2InstructionData {\n    instruction: TokenInstruction.InitializeAccount2;\n    owner: PublicKey;\n}\n\nexport const initializeAccount2InstructionData = struct<InitializeAccount2InstructionData>([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n\n/**\n * Construct an InitializeAccount2 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount2Instruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount2InstructionData.span);\n    initializeAccount2InstructionData.encode({ instruction: TokenInstruction.InitializeAccount2, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount2 instruction */\nexport interface DecodedInitializeAccount2Instruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount2;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount2Instruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccount2Instruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount2InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, rent },\n        data,\n    } = decodeInitializeAccount2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount2) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount2 instruction */\nexport interface DecodedInitializeAccount2InstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount2InstructionUnchecked({\n    programId,\n    keys: [account, mint, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeAccount2InstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            rent,\n        },\n        data: initializeAccount2InstructionData.decode(data),\n    };\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\nexport interface InitializeAccount3InstructionData {\n    instruction: TokenInstruction.InitializeAccount3;\n    owner: PublicKey;\n}\n\nexport const initializeAccount3InstructionData = struct<InitializeAccount3InstructionData>([\n    u8('instruction'),\n    publicKey('owner'),\n]);\n\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccount3Instruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeAccount3InstructionData.span);\n    initializeAccount3InstructionData.encode({ instruction: TokenInstruction.InitializeAccount3, owner }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount3 instruction */\nexport interface DecodedInitializeAccount3Instruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount3;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccount3Instruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccount3Instruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccount3InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint },\n        data,\n    } = decodeInitializeAccount3InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount3) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount3 instruction */\nexport interface DecodedInitializeAccount3InstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        owner: PublicKey;\n    };\n}\n\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccount3InstructionUnchecked({\n    programId,\n    keys: [account, mint],\n    data,\n}: TransactionInstruction): DecodedInitializeAccount3InstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data: initializeAccount3InstructionData.decode(data),\n    };\n}\n", "export {};\n//# sourceMappingURL=initializeMultisig2.js.map", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** Deserialized instruction for the initiation of an immutable owner account */\nexport interface InitializeImmutableOwnerInstructionData {\n    instruction: TokenInstruction.InitializeImmutableOwner;\n}\n\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeImmutableOwnerInstructionData = struct<InitializeImmutableOwnerInstructionData>([\n    u8('instruction'),\n]);\n\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeImmutableOwnerInstruction(\n    account: PublicKey,\n    programId: PublicKey\n): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);\n    initializeImmutableOwnerInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeImmutableOwner,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeImmutableOwner instruction */\nexport interface DecodedInitializeImmutableOwnerInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeImmutableOwner;\n    };\n}\n\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeImmutableOwnerInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializeImmutableOwnerInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeImmutableOwnerInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeImmutableOwner) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeImmutableOwner instruction */\nexport interface DecodedInitializeImmutableOwnerInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeImmutableOwnerInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedInitializeImmutableOwnerInstructionUnchecked {\n    const { instruction } = initializeImmutableOwnerInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account: account,\n        },\n        data: {\n            instruction,\n        },\n    };\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n    TokenUnsupportedInstructionError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\nimport { COptionPublicKeyLayout } from '../serialization.js';\n\n/** TODO: docs */\nexport interface InitializeMintCloseAuthorityInstructionData {\n    instruction: TokenInstruction.InitializeMintCloseAuthority;\n    closeAuthority: PublicKey | null;\n}\n\n/** TODO: docs */\nexport const initializeMintCloseAuthorityInstructionData = struct<InitializeMintCloseAuthorityInstructionData>([\n    u8('instruction'),\n    new COptionPublicKeyLayout('closeAuthority'),\n]);\n\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintCloseAuthorityInstruction(\n    mint: PublicKey,\n    closeAuthority: PublicKey | null,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n    initializeMintCloseAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMintCloseAuthority,\n            closeAuthority,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMintCloseAuthority instruction */\nexport interface DecodedInitializeMintCloseAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMintCloseAuthority;\n        closeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializeMintCloseAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMintCloseAuthority instruction */\nexport interface DecodedInitializeMintCloseAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        closeAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializeMintCloseAuthorityInstructionUnchecked {\n    const { instruction, closeAuthority } = initializeMintCloseAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            closeAuthority,\n        },\n    };\n}\n", "import { seq, struct, u16, u8 } from '@solana/buffer-layout';\nimport type { PublicKey, Signer } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface ReallocateInstructionData {\n    instruction: TokenInstruction.Reallocate;\n    extensionTypes: ExtensionType[];\n}\n\n/**\n * Construct a Reallocate instruction\n *\n * @param account        Address of the token account\n * @param payer          Address paying for the reallocation\n * @param extensionTypes Extensions to reallocate for\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createReallocateInstruction(\n    account: PublicKey,\n    payer: PublicKey,\n    extensionTypes: ExtensionType[],\n    owner: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_2022_PROGRAM_ID\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const baseKeys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const keys = addSigners(baseKeys, owner, multiSigners);\n\n    const reallocateInstructionData = struct<ReallocateInstructionData>([\n        u8('instruction'),\n        seq(u16(), extensionTypes.length, 'extensionTypes'),\n    ]);\n    const data = Buffer.alloc(reallocateInstructionData.span);\n    reallocateInstructionData.encode({ instruction: TokenInstruction.Reallocate, extensionTypes }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport type { PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** Deserialized instruction for the initiation of an immutable owner account */\nexport interface InitializeNonTransferableMintInstructionData {\n    instruction: TokenInstruction.InitializeNonTransferableMint;\n}\n\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeNonTransferableMintInstructionData = struct<InitializeNonTransferableMintInstructionData>([\n    u8('instruction'),\n]);\n\n/**\n * Construct an InitializeNonTransferableMint instruction\n *\n * @param mint           Mint Account to make non-transferable\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeNonTransferableMintInstruction(\n    mint: PublicKey,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializeNonTransferableMintInstructionData.span);\n    initializeNonTransferableMintInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeNonTransferableMint,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n", "import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountMeta } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n    TokenUnsupportedInstructionError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface InitializePermanentDelegateInstructionData {\n    instruction: TokenInstruction.InitializePermanentDelegate;\n    delegate: PublicKey;\n}\n\n/** TODO: docs */\nexport const initializePermanentDelegateInstructionData = struct<InitializePermanentDelegateInstructionData>([\n    u8('instruction'),\n    publicKey('delegate'),\n]);\n\n/**\n * Construct an InitializePermanentDelegate instruction\n *\n * @param mint               Token mint account\n * @param permanentDelegate  Authority that may sign for `Transfer`s and `Burn`s on any account\n * @param programId          SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializePermanentDelegateInstruction(\n    mint: PublicKey,\n    permanentDelegate: PublicKey | null,\n    programId: PublicKey\n): TransactionInstruction {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(initializePermanentDelegateInstructionData.span);\n    initializePermanentDelegateInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializePermanentDelegate,\n            delegate: permanentDelegate || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializePermanentDelegate instruction */\nexport interface DecodedInitializePermanentDelegateInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializePermanentDelegate;\n        delegate: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializePermanentDelegate instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializePermanentDelegateInstruction(\n    instruction: TransactionInstruction,\n    programId: PublicKey\n): DecodedInitializePermanentDelegateInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializePermanentDelegateInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint },\n        data,\n    } = decodeInitializePermanentDelegateInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializePermanentDelegate) throw new TokenInvalidInstructionTypeError();\n    if (!mint) throw new TokenInvalidInstructionKeysError();\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializePermanentDelegate instruction */\nexport interface DecodedInitializePermanentDelegateInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n        delegate: PublicKey | null;\n    };\n}\n\n/**\n * Decode an InitializePermanentDelegate instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializePermanentDelegateInstructionUnchecked({\n    programId,\n    keys: [mint],\n    data,\n}: TransactionInstruction): DecodedInitializePermanentDelegateInstructionUnchecked {\n    const { instruction, delegate } = initializePermanentDelegateInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            delegate,\n        },\n    };\n}\n"],
  "mappings": "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",
  "names": ["import_buffer_layout", "bigInt", "import_buffer_layout", "bool", "import_buffer_layout", "publicKey", "TokenInstruction", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "AccountType", "import_buffer_layout", "AccountState", "import_buffer_layout", "import_buffer_layout", "CpiGuardInstruction", "import_buffer_layout", "import_buffer_layout", "DefaultAccountStateInstruction", "import_buffer_layout", "SolanaError", "Endian", "newOffset", "combineCodec", "createDecoder", "getEncodedSize", "createEncoder", "assertByteArrayHasEnoughBytesForCodec", "isFixedSize", "getU8Decoder", "SolanaError", "assertByteArrayIsNotEmptyForCodec", "struct", "combineCodec", "mapDecoder", "mapEncoder", "getU8Decoder", "getU8Encoder", "SolanaError", "createEncoder", "alphabet", "createDecoder", "combineCodec", "createEncoder", "sumCodecSizes", "getMaxSize", "sumCodecSizes", "getMaxSize", "publicKey", "mint", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "MemoTransferInstruction", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "TransferFeeInstruction", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "TransferHookInstruction", "ExtensionType", "e", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "transaction", "import_buffer_layout", "error", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "AuthorityType", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "GroupMemberPointerInstruction", "import_buffer_layout", "GroupPointerInstruction", "import_buffer_layout", "import_buffer_layout", "InterestBearingMintInstruction", "import_buffer_layout", "MetadataPointerInstruction", "Field", "getInstructionEncoder", "getPublicKeyEncoder", "publicKey", "isNonePubkey", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout", "import_buffer_layout"]
}
